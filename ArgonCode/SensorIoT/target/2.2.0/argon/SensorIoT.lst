
d:/Coursework/Fall_2022/ECE_513/FinalProject/HeartRateMonitor/ArgonCode/SensorIoT/target/2.2.0/argon/SensorIoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001e94  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d5eb0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000070  2003deac  000d5eb4  0001deac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000008d4  2003df1c  2003df1c  0002df1c  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d5f24  000d5f24  00025f24  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d5f4c  000d5f4c  00025f4c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00137a42  00000000  00000000  00025f50  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000143ac  00000000  00000000  0015d992  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00023e05  00000000  00000000  00171d3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002318  00000000  00000000  00195b43  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00006438  00000000  00000000  00197e5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00037f7c  00000000  00000000  0019e293  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000330e0  00000000  00000000  001d620f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    001059e6  00000000  00000000  002092ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00005c90  00000000  00000000  0030ecd8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f001 fd31 	bl	d5a94 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f001 fd39 	bl	d5ab0 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003deac 	.word	0x2003deac
   d4048:	000d5eb4 	.word	0x000d5eb4
   d404c:	2003df1c 	.word	0x2003df1c
   d4050:	2003df1c 	.word	0x2003df1c
   d4054:	2003e7ed 	.word	0x2003e7ed

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
    module_user_init_hook();
   d405e:	f001 f945 	bl	d52ec <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000d5e88 	.word	0x000d5e88
   d407c:	000d5eac 	.word	0x000d5eac

000d4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4080:	f000 b814 	b.w	d40ac <setup>

000d4084 <module_user_loop>:
}

void module_user_loop() {
   d4084:	b508      	push	{r3, lr}
    loop();
   d4086:	f000 f84d 	bl	d4124 <loop>
    _post_loop();
}
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d408e:	f001 b8e5 	b.w	d525c <_post_loop>

000d4092 <_Znaj>:
   d4092:	f000 bfc5 	b.w	d5020 <malloc>

000d4096 <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d4096:	f000 bfcb 	b.w	d5030 <free>

000d409a <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409a:	7800      	ldrb	r0, [r0, #0]
   d409c:	fab0 f080 	clz	r0, r0
   d40a0:	0940      	lsrs	r0, r0, #5
   d40a2:	4770      	bx	lr

000d40a4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a4:	2301      	movs	r3, #1
   d40a6:	7003      	strb	r3, [r0, #0]
   d40a8:	4770      	bx	lr
	...

000d40ac <setup>:

byte pulseLED = 11; //Must be on PWM pin
byte readLED = 13; //Blinks with each data read

void setup()
{
   d40ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  Serial.begin(115200); // initialize serial communication at 115200 bits per second:
   d40ae:	f001 fa1f 	bl	d54f0 <_Z16_fetch_usbserialv>
   d40b2:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d40b6:	f001 fa0f 	bl	d54d8 <_ZN9USBSerial5beginEl>

  pinMode(pulseLED, OUTPUT);
   d40ba:	4b15      	ldr	r3, [pc, #84]	; (d4110 <setup+0x64>)
   d40bc:	2101      	movs	r1, #1
   d40be:	7818      	ldrb	r0, [r3, #0]
   d40c0:	f001 fc64 	bl	d598c <pinMode>
  pinMode(readLED, OUTPUT);
   d40c4:	4b13      	ldr	r3, [pc, #76]	; (d4114 <setup+0x68>)
   d40c6:	2101      	movs	r1, #1
   d40c8:	7818      	ldrb	r0, [r3, #0]
   d40ca:	f001 fc5f 	bl	d598c <pinMode>

  // Initialize sensor
  if (!particleSensor.begin(Wire, I2C_SPEED_FAST)) //Use default I2C port, 400kHz speed
   d40ce:	f001 fcb3 	bl	d5a38 <_Z19__fetch_global_Wirev>
   d40d2:	4a11      	ldr	r2, [pc, #68]	; (d4118 <setup+0x6c>)
   d40d4:	4601      	mov	r1, r0
   d40d6:	2357      	movs	r3, #87	; 0x57
   d40d8:	4810      	ldr	r0, [pc, #64]	; (d411c <setup+0x70>)
   d40da:	f000 fa8b 	bl	d45f4 <_ZN8MAX301055beginER7TwoWiremh>
   d40de:	b928      	cbnz	r0, d40ec <setup+0x40>
  {
    Serial.println(F("MAX30105 was not found. Please check wiring/power."));
   d40e0:	f001 fa06 	bl	d54f0 <_Z16_fetch_usbserialv>
   d40e4:	490e      	ldr	r1, [pc, #56]	; (d4120 <setup+0x74>)
   d40e6:	f001 f85a 	bl	d519e <_ZN5Print7printlnEPK19__FlashStringHelper>
    while (1);
   d40ea:	e7fe      	b.n	d40ea <setup+0x3e>
  byte ledMode = 2; //Options: 1 = Red only, 2 = Red + IR, 3 = Red + IR + Green
  byte sampleRate = 100; //Options: 50, 100, 200, 400, 800, 1000, 1600, 3200
  int pulseWidth = 411; //Options: 69, 118, 215, 411
  int adcRange = 4096; //Options: 2048, 4096, 8192, 16384

  particleSensor.setup(ledBrightness, sampleAverage, ledMode, sampleRate, pulseWidth, adcRange); //Configure sensor with these settings
   d40ec:	f240 139b 	movw	r3, #411	; 0x19b
   d40f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   d40f4:	e9cd 3201 	strd	r3, r2, [sp, #4]
   d40f8:	2364      	movs	r3, #100	; 0x64
   d40fa:	9300      	str	r3, [sp, #0]
   d40fc:	4807      	ldr	r0, [pc, #28]	; (d411c <setup+0x70>)
   d40fe:	2302      	movs	r3, #2
   d4100:	2204      	movs	r2, #4
   d4102:	213c      	movs	r1, #60	; 0x3c
   d4104:	f000 fb32 	bl	d476c <_ZN8MAX301055setupEhhhiii>
}
   d4108:	b005      	add	sp, #20
   d410a:	f85d fb04 	ldr.w	pc, [sp], #4
   d410e:	bf00      	nop
   d4110:	2003deac 	.word	0x2003deac
   d4114:	2003dead 	.word	0x2003dead
   d4118:	00061a80 	.word	0x00061a80
   d411c:	2003e0b4 	.word	0x2003e0b4
   d4120:	000d5bf8 	.word	0x000d5bf8

000d4124 <loop>:

void loop()
{
   d4124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  bufferLength = 100; //buffer length of 100 stores 4 seconds of samples running at 25sps
   d4128:	4c86      	ldr	r4, [pc, #536]	; (d4344 <loop+0x220>)

  //read the first 100 samples, and determine the signal range
  for (byte i = 0 ; i < bufferLength ; i++)
  {
    while (particleSensor.available() == false) //do we have new data?
   d412a:	4e87      	ldr	r6, [pc, #540]	; (d4348 <loop+0x224>)
      particleSensor.check(); //Check the sensor for new data

    redBuffer[i] = particleSensor.getRed();
   d412c:	f8df a234 	ldr.w	sl, [pc, #564]	; d4364 <loop+0x240>
    irBuffer[i] = particleSensor.getIR();
   d4130:	f8df 9234 	ldr.w	r9, [pc, #564]	; d4368 <loop+0x244>
  bufferLength = 100; //buffer length of 100 stores 4 seconds of samples running at 25sps
   d4134:	2364      	movs	r3, #100	; 0x64
{
   d4136:	b087      	sub	sp, #28
  bufferLength = 100; //buffer length of 100 stores 4 seconds of samples running at 25sps
   d4138:	6023      	str	r3, [r4, #0]
   d413a:	2700      	movs	r7, #0
  for (byte i = 0 ; i < bufferLength ; i++)
   d413c:	6821      	ldr	r1, [r4, #0]
   d413e:	b2fd      	uxtb	r5, r7
   d4140:	428d      	cmp	r5, r1
   d4142:	da32      	bge.n	d41aa <loop+0x86>
    while (particleSensor.available() == false) //do we have new data?
   d4144:	4630      	mov	r0, r6
   d4146:	f000 f927 	bl	d4398 <_ZN8MAX301059availableEv>
   d414a:	b918      	cbnz	r0, d4154 <loop+0x30>
      particleSensor.check(); //Check the sensor for new data
   d414c:	4630      	mov	r0, r6
   d414e:	f000 f971 	bl	d4434 <_ZN8MAX301055checkEv>
    while (particleSensor.available() == false) //do we have new data?
   d4152:	e7f7      	b.n	d4144 <loop+0x20>
    redBuffer[i] = particleSensor.getRed();
   d4154:	4630      	mov	r0, r6
   d4156:	f000 fa25 	bl	d45a4 <_ZN8MAX301056getRedEv>
   d415a:	f84a 0025 	str.w	r0, [sl, r5, lsl #2]
    irBuffer[i] = particleSensor.getIR();
   d415e:	4630      	mov	r0, r6
   d4160:	f000 fa2e 	bl	d45c0 <_ZN8MAX301055getIREv>
   d4164:	f849 0025 	str.w	r0, [r9, r5, lsl #2]
    particleSensor.nextSample(); //We're finished with this sample so move to next sample
   d4168:	4630      	mov	r0, r6
   d416a:	f000 f91f 	bl	d43ac <_ZN8MAX3010510nextSampleEv>

    Serial.print(F("red="));
   d416e:	f001 f9bf 	bl	d54f0 <_Z16_fetch_usbserialv>
   d4172:	4976      	ldr	r1, [pc, #472]	; (d434c <loop+0x228>)
   d4174:	f000 fff9 	bl	d516a <_ZN5Print5printEPK19__FlashStringHelper>
    Serial.print(redBuffer[i], DEC);
   d4178:	f001 f9ba 	bl	d54f0 <_Z16_fetch_usbserialv>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d417c:	220a      	movs	r2, #10
   d417e:	f85a 1025 	ldr.w	r1, [sl, r5, lsl #2]
   d4182:	f001 f80e 	bl	d51a2 <_ZN5Print11printNumberEmh>
    Serial.print(F(", ir="));
   d4186:	f001 f9b3 	bl	d54f0 <_Z16_fetch_usbserialv>
   d418a:	4971      	ldr	r1, [pc, #452]	; (d4350 <loop+0x22c>)
   d418c:	f000 ffed 	bl	d516a <_ZN5Print5printEPK19__FlashStringHelper>
    Serial.println(irBuffer[i], DEC);
   d4190:	f001 f9ae 	bl	d54f0 <_Z16_fetch_usbserialv>
   d4194:	f859 1025 	ldr.w	r1, [r9, r5, lsl #2]
   d4198:	4680      	mov	r8, r0
   d419a:	220a      	movs	r2, #10
   d419c:	f001 f801 	bl	d51a2 <_ZN5Print11printNumberEmh>
        n += println();
   d41a0:	4640      	mov	r0, r8
   d41a2:	f000 ffe6 	bl	d5172 <_ZN5Print7printlnEv>
  for (byte i = 0 ; i < bufferLength ; i++)
   d41a6:	3701      	adds	r7, #1
   d41a8:	e7c8      	b.n	d413c <loop+0x18>
  }

  //calculate heart rate and SpO2 after first 100 samples (first 4 seconds of samples)
  maxim_heart_rate_and_oxygen_saturation(irBuffer, bufferLength, redBuffer, &spo2, &validSPO2, &heartRate, &validHeartRate);
   d41aa:	4f6a      	ldr	r7, [pc, #424]	; (d4354 <loop+0x230>)
   d41ac:	4e6a      	ldr	r6, [pc, #424]	; (d4358 <loop+0x234>)
   d41ae:	4d6b      	ldr	r5, [pc, #428]	; (d435c <loop+0x238>)
   d41b0:	4b6b      	ldr	r3, [pc, #428]	; (d4360 <loop+0x23c>)
   d41b2:	4a6c      	ldr	r2, [pc, #432]	; (d4364 <loop+0x240>)
   d41b4:	486c      	ldr	r0, [pc, #432]	; (d4368 <loop+0x244>)
   d41b6:	9702      	str	r7, [sp, #8]
   d41b8:	9601      	str	r6, [sp, #4]
   d41ba:	9500      	str	r5, [sp, #0]
   d41bc:	f000 fc3a 	bl	d4a34 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_>
    }

    //take 25 sets of samples before calculating the heart rate.
    for (byte i = 75; i < 100; i++)
    {
      while (particleSensor.available() == false) //do we have new data?
   d41c0:	f8df 8184 	ldr.w	r8, [pc, #388]	; d4348 <loop+0x224>
    for (byte i = 25; i < 100; i++)
   d41c4:	4967      	ldr	r1, [pc, #412]	; (d4364 <loop+0x240>)
   d41c6:	4a68      	ldr	r2, [pc, #416]	; (d4368 <loop+0x244>)
  bufferLength = 100; //buffer length of 100 stores 4 seconds of samples running at 25sps
   d41c8:	234b      	movs	r3, #75	; 0x4b
      redBuffer[i - 25] = redBuffer[i];
   d41ca:	6e48      	ldr	r0, [r1, #100]	; 0x64
   d41cc:	f841 0b04 	str.w	r0, [r1], #4
      irBuffer[i - 25] = irBuffer[i];
   d41d0:	3b01      	subs	r3, #1
   d41d2:	6e50      	ldr	r0, [r2, #100]	; 0x64
   d41d4:	f842 0b04 	str.w	r0, [r2], #4
    for (byte i = 25; i < 100; i++)
   d41d8:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d41dc:	d1f5      	bne.n	d41ca <loop+0xa6>
   d41de:	2319      	movs	r3, #25
   d41e0:	f8df a19c 	ldr.w	sl, [pc, #412]	; d4380 <loop+0x25c>
   d41e4:	f8df b19c 	ldr.w	fp, [pc, #412]	; d4384 <loop+0x260>
   d41e8:	9304      	str	r3, [sp, #16]
      while (particleSensor.available() == false) //do we have new data?
   d41ea:	4640      	mov	r0, r8
   d41ec:	f000 f8d4 	bl	d4398 <_ZN8MAX301059availableEv>
   d41f0:	b918      	cbnz	r0, d41fa <loop+0xd6>
        particleSensor.check(); //Check the sensor for new data
   d41f2:	4640      	mov	r0, r8
   d41f4:	f000 f91e 	bl	d4434 <_ZN8MAX301055checkEv>
      while (particleSensor.available() == false) //do we have new data?
   d41f8:	e7f7      	b.n	d41ea <loop+0xc6>

      digitalWrite(readLED, !digitalRead(readLED)); //Blink onboard LED with every data read
   d41fa:	4b5c      	ldr	r3, [pc, #368]	; (d436c <loop+0x248>)
   d41fc:	f893 9000 	ldrb.w	r9, [r3]
   d4200:	4648      	mov	r0, r9
   d4202:	f001 fbed 	bl	d59e0 <digitalRead>
   d4206:	fab0 f180 	clz	r1, r0
   d420a:	0949      	lsrs	r1, r1, #5
   d420c:	4648      	mov	r0, r9
   d420e:	f001 fbce 	bl	d59ae <digitalWrite>

      redBuffer[i] = particleSensor.getRed();
   d4212:	4640      	mov	r0, r8
   d4214:	f000 f9c6 	bl	d45a4 <_ZN8MAX301056getRedEv>
   d4218:	f8ca 0000 	str.w	r0, [sl]
      irBuffer[i] = particleSensor.getIR();
   d421c:	4640      	mov	r0, r8
   d421e:	f000 f9cf 	bl	d45c0 <_ZN8MAX301055getIREv>
   d4222:	f8cb 0000 	str.w	r0, [fp]
      particleSensor.nextSample(); //We're finished with this sample so move to next sample
   d4226:	4640      	mov	r0, r8
   d4228:	f000 f8c0 	bl	d43ac <_ZN8MAX3010510nextSampleEv>

      //send samples and calculation result to terminal program through UART
      Serial.print(F("red="));
   d422c:	f001 f960 	bl	d54f0 <_Z16_fetch_usbserialv>
   d4230:	4946      	ldr	r1, [pc, #280]	; (d434c <loop+0x228>)
   d4232:	f000 ff9a 	bl	d516a <_ZN5Print5printEPK19__FlashStringHelper>
      Serial.print(redBuffer[i], DEC);
   d4236:	f001 f95b 	bl	d54f0 <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
   d423a:	220a      	movs	r2, #10
   d423c:	f85a 1b04 	ldr.w	r1, [sl], #4
   d4240:	f000 ffaf 	bl	d51a2 <_ZN5Print11printNumberEmh>
      Serial.print(F(", ir="));
   d4244:	f001 f954 	bl	d54f0 <_Z16_fetch_usbserialv>
   d4248:	4941      	ldr	r1, [pc, #260]	; (d4350 <loop+0x22c>)
   d424a:	f000 ff8e 	bl	d516a <_ZN5Print5printEPK19__FlashStringHelper>
      Serial.print(irBuffer[i], DEC);
   d424e:	f001 f94f 	bl	d54f0 <_Z16_fetch_usbserialv>
   d4252:	220a      	movs	r2, #10
   d4254:	f85b 1b04 	ldr.w	r1, [fp], #4
   d4258:	f000 ffa3 	bl	d51a2 <_ZN5Print11printNumberEmh>

      Serial.print(F(", HR="));
   d425c:	f001 f948 	bl	d54f0 <_Z16_fetch_usbserialv>
   d4260:	4943      	ldr	r1, [pc, #268]	; (d4370 <loop+0x24c>)
   d4262:	f000 ff82 	bl	d516a <_ZN5Print5printEPK19__FlashStringHelper>
      Serial.print(heartRate, DEC);
   d4266:	f001 f943 	bl	d54f0 <_Z16_fetch_usbserialv>
   d426a:	6832      	ldr	r2, [r6, #0]
        if (n < 0 && base == 10) {
   d426c:	2a00      	cmp	r2, #0
   d426e:	4681      	mov	r9, r0
   d4270:	da60      	bge.n	d4334 <loop+0x210>
            t = print('-');
   d4272:	212d      	movs	r1, #45	; 0x2d
   d4274:	9205      	str	r2, [sp, #20]
   d4276:	f000 ff75 	bl	d5164 <_ZN5Print5printEc>
            val = -n;
   d427a:	9a05      	ldr	r2, [sp, #20]
   d427c:	4251      	negs	r1, r2
        return printNumber(val, base) + t;
   d427e:	220a      	movs	r2, #10
   d4280:	4648      	mov	r0, r9
   d4282:	f000 ff8e 	bl	d51a2 <_ZN5Print11printNumberEmh>

      Serial.print(F(", HRvalid="));
   d4286:	f001 f933 	bl	d54f0 <_Z16_fetch_usbserialv>
   d428a:	493a      	ldr	r1, [pc, #232]	; (d4374 <loop+0x250>)
   d428c:	f000 ff6d 	bl	d516a <_ZN5Print5printEPK19__FlashStringHelper>
      Serial.print(validHeartRate, DEC);
   d4290:	f001 f92e 	bl	d54f0 <_Z16_fetch_usbserialv>
   d4294:	f997 2000 	ldrsb.w	r2, [r7]
        if (n < 0 && base == 10) {
   d4298:	2a00      	cmp	r2, #0
   d429a:	4681      	mov	r9, r0
   d429c:	da4c      	bge.n	d4338 <loop+0x214>
            t = print('-');
   d429e:	212d      	movs	r1, #45	; 0x2d
   d42a0:	9205      	str	r2, [sp, #20]
   d42a2:	f000 ff5f 	bl	d5164 <_ZN5Print5printEc>
            val = -n;
   d42a6:	9a05      	ldr	r2, [sp, #20]
   d42a8:	4251      	negs	r1, r2
        return printNumber(val, base) + t;
   d42aa:	220a      	movs	r2, #10
   d42ac:	4648      	mov	r0, r9
   d42ae:	f000 ff78 	bl	d51a2 <_ZN5Print11printNumberEmh>

      Serial.print(F(", SPO2="));
   d42b2:	f001 f91d 	bl	d54f0 <_Z16_fetch_usbserialv>
   d42b6:	4930      	ldr	r1, [pc, #192]	; (d4378 <loop+0x254>)
   d42b8:	f000 ff57 	bl	d516a <_ZN5Print5printEPK19__FlashStringHelper>
      Serial.print(spo2, DEC);
   d42bc:	f001 f918 	bl	d54f0 <_Z16_fetch_usbserialv>
   d42c0:	4a27      	ldr	r2, [pc, #156]	; (d4360 <loop+0x23c>)
   d42c2:	6812      	ldr	r2, [r2, #0]
        if (n < 0 && base == 10) {
   d42c4:	2a00      	cmp	r2, #0
   d42c6:	4681      	mov	r9, r0
   d42c8:	da38      	bge.n	d433c <loop+0x218>
            t = print('-');
   d42ca:	212d      	movs	r1, #45	; 0x2d
   d42cc:	9205      	str	r2, [sp, #20]
   d42ce:	f000 ff49 	bl	d5164 <_ZN5Print5printEc>
            val = -n;
   d42d2:	9a05      	ldr	r2, [sp, #20]
   d42d4:	4251      	negs	r1, r2
        return printNumber(val, base) + t;
   d42d6:	220a      	movs	r2, #10
   d42d8:	4648      	mov	r0, r9
   d42da:	f000 ff62 	bl	d51a2 <_ZN5Print11printNumberEmh>

      Serial.print(F(", SPO2Valid="));
   d42de:	f001 f907 	bl	d54f0 <_Z16_fetch_usbserialv>
   d42e2:	4926      	ldr	r1, [pc, #152]	; (d437c <loop+0x258>)
   d42e4:	f000 ff41 	bl	d516a <_ZN5Print5printEPK19__FlashStringHelper>
      Serial.println(validSPO2, DEC);
   d42e8:	f001 f902 	bl	d54f0 <_Z16_fetch_usbserialv>
   d42ec:	f995 2000 	ldrsb.w	r2, [r5]
        if (n < 0 && base == 10) {
   d42f0:	2a00      	cmp	r2, #0
   d42f2:	4681      	mov	r9, r0
   d42f4:	da24      	bge.n	d4340 <loop+0x21c>
            t = print('-');
   d42f6:	212d      	movs	r1, #45	; 0x2d
   d42f8:	9205      	str	r2, [sp, #20]
   d42fa:	f000 ff33 	bl	d5164 <_ZN5Print5printEc>
            val = -n;
   d42fe:	9a05      	ldr	r2, [sp, #20]
   d4300:	4251      	negs	r1, r2
        return printNumber(val, base) + t;
   d4302:	220a      	movs	r2, #10
   d4304:	4648      	mov	r0, r9
   d4306:	f000 ff4c 	bl	d51a2 <_ZN5Print11printNumberEmh>
        n += println();
   d430a:	4648      	mov	r0, r9
   d430c:	f000 ff31 	bl	d5172 <_ZN5Print7printlnEv>
    for (byte i = 75; i < 100; i++)
   d4310:	9b04      	ldr	r3, [sp, #16]
   d4312:	f103 39ff 	add.w	r9, r3, #4294967295
   d4316:	f019 03ff 	ands.w	r3, r9, #255	; 0xff
   d431a:	9304      	str	r3, [sp, #16]
   d431c:	f47f af65 	bne.w	d41ea <loop+0xc6>
    }

    //After gathering 25 new samples recalculate HR and SP02
    maxim_heart_rate_and_oxygen_saturation(irBuffer, bufferLength, redBuffer, &spo2, &validSPO2, &heartRate, &validHeartRate);
   d4320:	e9cd 6701 	strd	r6, r7, [sp, #4]
   d4324:	4b0e      	ldr	r3, [pc, #56]	; (d4360 <loop+0x23c>)
   d4326:	4a0f      	ldr	r2, [pc, #60]	; (d4364 <loop+0x240>)
   d4328:	6821      	ldr	r1, [r4, #0]
   d432a:	480f      	ldr	r0, [pc, #60]	; (d4368 <loop+0x244>)
   d432c:	9500      	str	r5, [sp, #0]
   d432e:	f000 fb81 	bl	d4a34 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_>
  }
   d4332:	e747      	b.n	d41c4 <loop+0xa0>
            val = n;
   d4334:	4611      	mov	r1, r2
   d4336:	e7a2      	b.n	d427e <loop+0x15a>
   d4338:	4611      	mov	r1, r2
   d433a:	e7b6      	b.n	d42aa <loop+0x186>
   d433c:	4611      	mov	r1, r2
   d433e:	e7ca      	b.n	d42d6 <loop+0x1b2>
   d4340:	4611      	mov	r1, r2
   d4342:	e7de      	b.n	d4302 <loop+0x1de>
   d4344:	2003df1c 	.word	0x2003df1c
   d4348:	2003e0b4 	.word	0x2003e0b4
   d434c:	000d5c2b 	.word	0x000d5c2b
   d4350:	000d5c30 	.word	0x000d5c30
   d4354:	2003e250 	.word	0x2003e250
   d4358:	2003df20 	.word	0x2003df20
   d435c:	2003e251 	.word	0x2003e251
   d4360:	2003e24c 	.word	0x2003e24c
   d4364:	2003e0bc 	.word	0x2003e0bc
   d4368:	2003df24 	.word	0x2003df24
   d436c:	2003dead 	.word	0x2003dead
   d4370:	000d5c36 	.word	0x000d5c36
   d4374:	000d5c3c 	.word	0x000d5c3c
   d4378:	000d5c47 	.word	0x000d5c47
   d437c:	000d5c4f 	.word	0x000d5c4f
   d4380:	2003e1e8 	.word	0x2003e1e8
   d4384:	2003e050 	.word	0x2003e050

000d4388 <_GLOBAL__sub_I_particleSensor>:
MAX30105 particleSensor;
   d4388:	4801      	ldr	r0, [pc, #4]	; (d4390 <_GLOBAL__sub_I_particleSensor+0x8>)
   d438a:	f000 b803 	b.w	d4394 <_ZN8MAX30105C1Ev>
   d438e:	bf00      	nop
   d4390:	2003e0b4 	.word	0x2003e0b4

000d4394 <_ZN8MAX30105C1Ev>:
  byte tail;
} sense; //This is our circular buffer of readings from the sensor

MAX30105::MAX30105() {
  // Constructor
}
   d4394:	4770      	bx	lr
	...

000d4398 <_ZN8MAX301059availableEv>:
//

//Tell caller how many samples are available
uint8_t MAX30105::available(void)
{
  uint8_t numberOfSamples = sense.head - sense.tail;
   d4398:	4b03      	ldr	r3, [pc, #12]	; (d43a8 <_ZN8MAX301059availableEv+0x10>)
   d439a:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
   d439e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
   d43a2:	1ac0      	subs	r0, r0, r3
  if (numberOfSamples < 0) numberOfSamples += STORAGE_SIZE;

  return (numberOfSamples);
}
   d43a4:	b2c0      	uxtb	r0, r0
   d43a6:	4770      	bx	lr
   d43a8:	2003e254 	.word	0x2003e254

000d43ac <_ZN8MAX3010510nextSampleEv>:
  uint8_t numberOfSamples = sense.head - sense.tail;
   d43ac:	4a06      	ldr	r2, [pc, #24]	; (d43c8 <_ZN8MAX3010510nextSampleEv+0x1c>)
   d43ae:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
}

//Advance the tail
void MAX30105::nextSample(void)
{
  if(available()) //Only advance the tail if new data is available
   d43b2:	f892 1030 	ldrb.w	r1, [r2, #48]	; 0x30
   d43b6:	4299      	cmp	r1, r3
  {
    sense.tail++;
   d43b8:	bf1e      	ittt	ne
   d43ba:	3301      	addne	r3, #1
    sense.tail %= STORAGE_SIZE; //Wrap condition
   d43bc:	f003 0303 	andne.w	r3, r3, #3
   d43c0:	f882 3031 	strbne.w	r3, [r2, #49]	; 0x31
  }
}
   d43c4:	4770      	bx	lr
   d43c6:	bf00      	nop
   d43c8:	2003e254 	.word	0x2003e254

000d43cc <_ZN8MAX3010513readRegister8Ehh>:
}

//
// Low-level I2C Communication
//
uint8_t MAX30105::readRegister8(uint8_t address, uint8_t reg) {
   d43cc:	b570      	push	{r4, r5, r6, lr}
   d43ce:	4604      	mov	r4, r0
  _i2cPort->beginTransmission(address);
   d43d0:	6800      	ldr	r0, [r0, #0]
uint8_t MAX30105::readRegister8(uint8_t address, uint8_t reg) {
   d43d2:	4616      	mov	r6, r2
   d43d4:	460d      	mov	r5, r1
  _i2cPort->beginTransmission(address);
   d43d6:	f001 f99f 	bl	d5718 <_ZN7TwoWire17beginTransmissionEh>
  _i2cPort->write(reg);
   d43da:	6820      	ldr	r0, [r4, #0]
   d43dc:	6803      	ldr	r3, [r0, #0]
   d43de:	4631      	mov	r1, r6
   d43e0:	689b      	ldr	r3, [r3, #8]
   d43e2:	4798      	blx	r3
  _i2cPort->endTransmission(false);
   d43e4:	2100      	movs	r1, #0
   d43e6:	6820      	ldr	r0, [r4, #0]
   d43e8:	f001 f99d 	bl	d5726 <_ZN7TwoWire15endTransmissionEh>
  _i2cPort->requestFrom(address, 1);   // Request 1 byte
   d43ec:	4629      	mov	r1, r5
   d43ee:	6820      	ldr	r0, [r4, #0]
   d43f0:	2201      	movs	r2, #1
   d43f2:	f001 f98e 	bl	d5712 <_ZN7TwoWire11requestFromEhj>

  int tries = 0;
   d43f6:	2500      	movs	r5, #0
  while (!_i2cPort->available())
   d43f8:	6820      	ldr	r0, [r4, #0]
   d43fa:	6803      	ldr	r3, [r0, #0]
   d43fc:	691b      	ldr	r3, [r3, #16]
   d43fe:	4798      	blx	r3
   d4400:	b958      	cbnz	r0, d441a <_ZN8MAX3010513readRegister8Ehh+0x4e>
  {
    delay(1);
   d4402:	2001      	movs	r0, #1
    if (tries++ > 200) break;
   d4404:	3501      	adds	r5, #1
    delay(1);
   d4406:	f000 fefd 	bl	d5204 <delay>
    if (tries++ > 200) break;
   d440a:	2dca      	cmp	r5, #202	; 0xca
   d440c:	d1f4      	bne.n	d43f8 <_ZN8MAX3010513readRegister8Ehh+0x2c>
  }
  if (tries == 200) return (0); //Fail

  return (_i2cPort->read());
   d440e:	6820      	ldr	r0, [r4, #0]
   d4410:	6803      	ldr	r3, [r0, #0]
   d4412:	695b      	ldr	r3, [r3, #20]
   d4414:	4798      	blx	r3
   d4416:	b2c0      	uxtb	r0, r0
}
   d4418:	bd70      	pop	{r4, r5, r6, pc}
  if (tries == 200) return (0); //Fail
   d441a:	2dc8      	cmp	r5, #200	; 0xc8
   d441c:	d1f7      	bne.n	d440e <_ZN8MAX3010513readRegister8Ehh+0x42>
   d441e:	2000      	movs	r0, #0
   d4420:	e7fa      	b.n	d4418 <_ZN8MAX3010513readRegister8Ehh+0x4c>

000d4422 <_ZN8MAX3010515getWritePointerEv>:
  return (readRegister8(_i2caddr, MAX30105_FIFOWRITEPTR));
   d4422:	7901      	ldrb	r1, [r0, #4]
   d4424:	2204      	movs	r2, #4
   d4426:	f7ff bfd1 	b.w	d43cc <_ZN8MAX3010513readRegister8Ehh>

000d442a <_ZN8MAX3010514getReadPointerEv>:
  return (readRegister8(_i2caddr, MAX30105_FIFOREADPTR));
   d442a:	7901      	ldrb	r1, [r0, #4]
   d442c:	2206      	movs	r2, #6
   d442e:	f7ff bfcd 	b.w	d43cc <_ZN8MAX3010513readRegister8Ehh>
	...

000d4434 <_ZN8MAX301055checkEv>:
{
   d4434:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d4438:	4604      	mov	r4, r0
  byte readPointer = getReadPointer();
   d443a:	f7ff fff6 	bl	d442a <_ZN8MAX3010514getReadPointerEv>
   d443e:	4606      	mov	r6, r0
  byte writePointer = getWritePointer();
   d4440:	4620      	mov	r0, r4
   d4442:	f7ff ffee 	bl	d4422 <_ZN8MAX3010515getWritePointerEv>
  if (readPointer != writePointer)
   d4446:	4286      	cmp	r6, r0
   d4448:	f000 808f 	beq.w	d456a <_ZN8MAX301055checkEv+0x136>
    if (numberOfSamples < 0) numberOfSamples += 32; //Wrap condition
   d444c:	1b86      	subs	r6, r0, r6
    _i2cPort->beginTransmission(MAX30105_ADDRESS);
   d444e:	f04f 0157 	mov.w	r1, #87	; 0x57
   d4452:	6820      	ldr	r0, [r4, #0]
    int bytesLeftToRead = numberOfSamples * activeLEDs * 3;
   d4454:	7967      	ldrb	r7, [r4, #5]
        sense.head %= STORAGE_SIZE; //Wrap condition
   d4456:	f8df 811c 	ldr.w	r8, [pc, #284]	; d4574 <_ZN8MAX301055checkEv+0x140>
    if (numberOfSamples < 0) numberOfSamples += 32; //Wrap condition
   d445a:	bf48      	it	mi
   d445c:	3620      	addmi	r6, #32
    _i2cPort->beginTransmission(MAX30105_ADDRESS);
   d445e:	f001 f95f 	bl	d5720 <_ZN7TwoWire17beginTransmissionEi>
    _i2cPort->write(MAX30105_FIFODATA);
   d4462:	6820      	ldr	r0, [r4, #0]
   d4464:	6803      	ldr	r3, [r0, #0]
   d4466:	2107      	movs	r1, #7
   d4468:	689b      	ldr	r3, [r3, #8]
   d446a:	4798      	blx	r3
    _i2cPort->endTransmission();
   d446c:	6820      	ldr	r0, [r4, #0]
   d446e:	f001 f95e 	bl	d572e <_ZN7TwoWire15endTransmissionEv>
    int bytesLeftToRead = numberOfSamples * activeLEDs * 3;
   d4472:	4377      	muls	r7, r6
   d4474:	eb07 0747 	add.w	r7, r7, r7, lsl #1
    while (bytesLeftToRead > 0)
   d4478:	2f00      	cmp	r7, #0
   d447a:	dd77      	ble.n	d456c <_ZN8MAX301055checkEv+0x138>
      if (toGet > BUFFER_LENGTH)
   d447c:	2f20      	cmp	r7, #32
        toGet = BUFFER_LENGTH - (BUFFER_LENGTH % (activeLEDs * 3)); //Trim toGet to be a multiple of the samples we need to read
   d447e:	bfc8      	it	gt
   d4480:	7965      	ldrbgt	r5, [r4, #5]
      _i2cPort->requestFrom(MAX30105_ADDRESS, toGet);
   d4482:	6820      	ldr	r0, [r4, #0]
        toGet = BUFFER_LENGTH - (BUFFER_LENGTH % (activeLEDs * 3)); //Trim toGet to be a multiple of the samples we need to read
   d4484:	bfc5      	ittet	gt
   d4486:	eb05 0545 	addgt.w	r5, r5, r5, lsl #1
   d448a:	2220      	movgt	r2, #32
   d448c:	463d      	movle	r5, r7
   d448e:	fbb2 f2f5 	udivgt	r2, r2, r5
   d4492:	bfc8      	it	gt
   d4494:	4355      	mulgt	r5, r2
      _i2cPort->requestFrom(MAX30105_ADDRESS, toGet);
   d4496:	462a      	mov	r2, r5
   d4498:	2157      	movs	r1, #87	; 0x57
   d449a:	f001 f93a 	bl	d5712 <_ZN7TwoWire11requestFromEhj>
      bytesLeftToRead -= toGet;
   d449e:	1b7f      	subs	r7, r7, r5
        temp[3] = 0;
   d44a0:	f04f 0900 	mov.w	r9, #0
      while (toGet > 0)
   d44a4:	2d00      	cmp	r5, #0
   d44a6:	dde7      	ble.n	d4478 <_ZN8MAX301055checkEv+0x44>
        sense.head++; //Advance the head of the storage struct
   d44a8:	f898 3030 	ldrb.w	r3, [r8, #48]	; 0x30
        temp[3] = 0;
   d44ac:	f88d 9007 	strb.w	r9, [sp, #7]
        sense.head++; //Advance the head of the storage struct
   d44b0:	3301      	adds	r3, #1
        sense.head %= STORAGE_SIZE; //Wrap condition
   d44b2:	f003 0303 	and.w	r3, r3, #3
   d44b6:	f888 3030 	strb.w	r3, [r8, #48]	; 0x30
        temp[2] = _i2cPort->read();
   d44ba:	6820      	ldr	r0, [r4, #0]
   d44bc:	6803      	ldr	r3, [r0, #0]
   d44be:	695b      	ldr	r3, [r3, #20]
   d44c0:	4798      	blx	r3
   d44c2:	f88d 0006 	strb.w	r0, [sp, #6]
        temp[1] = _i2cPort->read();
   d44c6:	6820      	ldr	r0, [r4, #0]
   d44c8:	6803      	ldr	r3, [r0, #0]
   d44ca:	695b      	ldr	r3, [r3, #20]
   d44cc:	4798      	blx	r3
   d44ce:	f88d 0005 	strb.w	r0, [sp, #5]
        temp[0] = _i2cPort->read();
   d44d2:	6820      	ldr	r0, [r4, #0]
   d44d4:	6803      	ldr	r3, [r0, #0]
   d44d6:	695b      	ldr	r3, [r3, #20]
   d44d8:	4798      	blx	r3
   d44da:	f88d 0004 	strb.w	r0, [sp, #4]
		tempLong &= 0x3FFFF; //Zero out all but 18 bits
   d44de:	9b01      	ldr	r3, [sp, #4]
        sense.red[sense.head] = tempLong; //Store this reading into the sense array
   d44e0:	f898 2030 	ldrb.w	r2, [r8, #48]	; 0x30
		tempLong &= 0x3FFFF; //Zero out all but 18 bits
   d44e4:	f3c3 0311 	ubfx	r3, r3, #0, #18
        sense.red[sense.head] = tempLong; //Store this reading into the sense array
   d44e8:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
        if (activeLEDs > 1)
   d44ec:	7963      	ldrb	r3, [r4, #5]
   d44ee:	2b01      	cmp	r3, #1
   d44f0:	d919      	bls.n	d4526 <_ZN8MAX301055checkEv+0xf2>
          temp[2] = _i2cPort->read();
   d44f2:	6820      	ldr	r0, [r4, #0]
   d44f4:	6803      	ldr	r3, [r0, #0]
   d44f6:	695b      	ldr	r3, [r3, #20]
   d44f8:	4798      	blx	r3
   d44fa:	f88d 0006 	strb.w	r0, [sp, #6]
          temp[1] = _i2cPort->read();
   d44fe:	6820      	ldr	r0, [r4, #0]
   d4500:	6803      	ldr	r3, [r0, #0]
   d4502:	695b      	ldr	r3, [r3, #20]
   d4504:	4798      	blx	r3
   d4506:	f88d 0005 	strb.w	r0, [sp, #5]
          temp[0] = _i2cPort->read();
   d450a:	6820      	ldr	r0, [r4, #0]
   d450c:	6803      	ldr	r3, [r0, #0]
   d450e:	695b      	ldr	r3, [r3, #20]
   d4510:	4798      	blx	r3
		  sense.IR[sense.head] = tempLong;
   d4512:	f898 3030 	ldrb.w	r3, [r8, #48]	; 0x30
          temp[0] = _i2cPort->read();
   d4516:	f88d 0004 	strb.w	r0, [sp, #4]
		  tempLong &= 0x3FFFF; //Zero out all but 18 bits
   d451a:	9a01      	ldr	r2, [sp, #4]
		  sense.IR[sense.head] = tempLong;
   d451c:	3304      	adds	r3, #4
		  tempLong &= 0x3FFFF; //Zero out all but 18 bits
   d451e:	f3c2 0211 	ubfx	r2, r2, #0, #18
		  sense.IR[sense.head] = tempLong;
   d4522:	f848 2023 	str.w	r2, [r8, r3, lsl #2]
        if (activeLEDs > 2)
   d4526:	7963      	ldrb	r3, [r4, #5]
   d4528:	2b02      	cmp	r3, #2
   d452a:	d919      	bls.n	d4560 <_ZN8MAX301055checkEv+0x12c>
          temp[2] = _i2cPort->read();
   d452c:	6820      	ldr	r0, [r4, #0]
   d452e:	6803      	ldr	r3, [r0, #0]
   d4530:	695b      	ldr	r3, [r3, #20]
   d4532:	4798      	blx	r3
   d4534:	f88d 0006 	strb.w	r0, [sp, #6]
          temp[1] = _i2cPort->read();
   d4538:	6820      	ldr	r0, [r4, #0]
   d453a:	6803      	ldr	r3, [r0, #0]
   d453c:	695b      	ldr	r3, [r3, #20]
   d453e:	4798      	blx	r3
   d4540:	f88d 0005 	strb.w	r0, [sp, #5]
          temp[0] = _i2cPort->read();
   d4544:	6820      	ldr	r0, [r4, #0]
   d4546:	6803      	ldr	r3, [r0, #0]
   d4548:	695b      	ldr	r3, [r3, #20]
   d454a:	4798      	blx	r3
          sense.green[sense.head] = tempLong;
   d454c:	f898 3030 	ldrb.w	r3, [r8, #48]	; 0x30
          temp[0] = _i2cPort->read();
   d4550:	f88d 0004 	strb.w	r0, [sp, #4]
		  tempLong &= 0x3FFFF; //Zero out all but 18 bits
   d4554:	9a01      	ldr	r2, [sp, #4]
          sense.green[sense.head] = tempLong;
   d4556:	3308      	adds	r3, #8
		  tempLong &= 0x3FFFF; //Zero out all but 18 bits
   d4558:	f3c2 0211 	ubfx	r2, r2, #0, #18
          sense.green[sense.head] = tempLong;
   d455c:	f848 2023 	str.w	r2, [r8, r3, lsl #2]
        toGet -= activeLEDs * 3;
   d4560:	7963      	ldrb	r3, [r4, #5]
   d4562:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
   d4566:	441d      	add	r5, r3
      while (toGet > 0)
   d4568:	e79c      	b.n	d44a4 <_ZN8MAX301055checkEv+0x70>
  int numberOfSamples = 0;
   d456a:	2600      	movs	r6, #0
}
   d456c:	b2b0      	uxth	r0, r6
   d456e:	b003      	add	sp, #12
   d4570:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d4574:	2003e254 	.word	0x2003e254

000d4578 <_ZN8MAX301059safeCheckEh>:
{
   d4578:	b570      	push	{r4, r5, r6, lr}
   d457a:	4605      	mov	r5, r0
   d457c:	460e      	mov	r6, r1

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d457e:	f000 fbc3 	bl	d4d08 <HAL_Timer_Get_Milli_Seconds>
   d4582:	4604      	mov	r4, r0
   d4584:	f000 fbc0 	bl	d4d08 <HAL_Timer_Get_Milli_Seconds>
	if(millis() - markTime > maxTimeToCheck) return(false);
   d4588:	1b00      	subs	r0, r0, r4
   d458a:	42b0      	cmp	r0, r6
   d458c:	d808      	bhi.n	d45a0 <_ZN8MAX301059safeCheckEh+0x28>
	if(check() == true) //We found new data!
   d458e:	4628      	mov	r0, r5
   d4590:	f7ff ff50 	bl	d4434 <_ZN8MAX301055checkEv>
   d4594:	2801      	cmp	r0, #1
   d4596:	d004      	beq.n	d45a2 <_ZN8MAX301059safeCheckEh+0x2a>
	delay(1);
   d4598:	2001      	movs	r0, #1
   d459a:	f000 fe33 	bl	d5204 <delay>
	if(millis() - markTime > maxTimeToCheck) return(false);
   d459e:	e7f1      	b.n	d4584 <_ZN8MAX301059safeCheckEh+0xc>
   d45a0:	2000      	movs	r0, #0
}
   d45a2:	bd70      	pop	{r4, r5, r6, pc}

000d45a4 <_ZN8MAX301056getRedEv>:
{
   d45a4:	b508      	push	{r3, lr}
  if(safeCheck(250))
   d45a6:	21fa      	movs	r1, #250	; 0xfa
   d45a8:	f7ff ffe6 	bl	d4578 <_ZN8MAX301059safeCheckEh>
   d45ac:	b120      	cbz	r0, d45b8 <_ZN8MAX301056getRedEv+0x14>
    return (sense.red[sense.head]);
   d45ae:	4b03      	ldr	r3, [pc, #12]	; (d45bc <_ZN8MAX301056getRedEv+0x18>)
   d45b0:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
   d45b4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
}
   d45b8:	bd08      	pop	{r3, pc}
   d45ba:	bf00      	nop
   d45bc:	2003e254 	.word	0x2003e254

000d45c0 <_ZN8MAX301055getIREv>:
{
   d45c0:	b508      	push	{r3, lr}
  if(safeCheck(250))
   d45c2:	21fa      	movs	r1, #250	; 0xfa
   d45c4:	f7ff ffd8 	bl	d4578 <_ZN8MAX301059safeCheckEh>
   d45c8:	b128      	cbz	r0, d45d6 <_ZN8MAX301055getIREv+0x16>
    return (sense.IR[sense.head]);
   d45ca:	4a03      	ldr	r2, [pc, #12]	; (d45d8 <_ZN8MAX301055getIREv+0x18>)
   d45cc:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
   d45d0:	3304      	adds	r3, #4
   d45d2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
}
   d45d6:	bd08      	pop	{r3, pc}
   d45d8:	2003e254 	.word	0x2003e254

000d45dc <_ZN8MAX3010510readPartIDEv>:
  return readRegister8(_i2caddr, MAX30105_PARTID);
   d45dc:	7901      	ldrb	r1, [r0, #4]
   d45de:	22ff      	movs	r2, #255	; 0xff
   d45e0:	f7ff bef4 	b.w	d43cc <_ZN8MAX3010513readRegister8Ehh>

000d45e4 <_ZN8MAX3010514readRevisionIDEv>:
void MAX30105::readRevisionID() {
   d45e4:	b510      	push	{r4, lr}
  revisionID = readRegister8(_i2caddr, MAX30105_REVISIONID);
   d45e6:	22fe      	movs	r2, #254	; 0xfe
   d45e8:	7901      	ldrb	r1, [r0, #4]
void MAX30105::readRevisionID() {
   d45ea:	4604      	mov	r4, r0
  revisionID = readRegister8(_i2caddr, MAX30105_REVISIONID);
   d45ec:	f7ff feee 	bl	d43cc <_ZN8MAX3010513readRegister8Ehh>
   d45f0:	71a0      	strb	r0, [r4, #6]
}
   d45f2:	bd10      	pop	{r4, pc}

000d45f4 <_ZN8MAX301055beginER7TwoWiremh>:
boolean MAX30105::begin(TwoWire &wirePort, uint32_t i2cSpeed, uint8_t i2caddr) {
   d45f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d45f6:	4604      	mov	r4, r0
   d45f8:	4608      	mov	r0, r1
  _i2cPort = &wirePort; //Grab which port the user wants us to use
   d45fa:	6021      	str	r1, [r4, #0]
boolean MAX30105::begin(TwoWire &wirePort, uint32_t i2cSpeed, uint8_t i2caddr) {
   d45fc:	461d      	mov	r5, r3
   d45fe:	9201      	str	r2, [sp, #4]
  _i2cPort->begin();
   d4600:	f001 f858 	bl	d56b4 <_ZN7TwoWire5beginEv>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   d4604:	9901      	ldr	r1, [sp, #4]
   d4606:	6820      	ldr	r0, [r4, #0]
   d4608:	f001 f850 	bl	d56ac <_ZN7TwoWire8setSpeedEm>
  _i2caddr = i2caddr;
   d460c:	7125      	strb	r5, [r4, #4]
  if (!readPartID() == MAX_30105_EXPECTEDPARTID) {
   d460e:	4620      	mov	r0, r4
   d4610:	f7ff ffe4 	bl	d45dc <_ZN8MAX3010510readPartIDEv>
  readRevisionID();
   d4614:	4620      	mov	r0, r4
   d4616:	f7ff ffe5 	bl	d45e4 <_ZN8MAX3010514readRevisionIDEv>
}
   d461a:	2001      	movs	r0, #1
   d461c:	b003      	add	sp, #12
   d461e:	bd30      	pop	{r4, r5, pc}

000d4620 <_ZN8MAX3010514writeRegister8Ehhh>:

void MAX30105::writeRegister8(uint8_t address, uint8_t reg, uint8_t value) {
   d4620:	b570      	push	{r4, r5, r6, lr}
   d4622:	4604      	mov	r4, r0
  _i2cPort->beginTransmission(address);
   d4624:	6800      	ldr	r0, [r0, #0]
void MAX30105::writeRegister8(uint8_t address, uint8_t reg, uint8_t value) {
   d4626:	4616      	mov	r6, r2
   d4628:	461d      	mov	r5, r3
  _i2cPort->beginTransmission(address);
   d462a:	f001 f875 	bl	d5718 <_ZN7TwoWire17beginTransmissionEh>
  _i2cPort->write(reg);
   d462e:	6820      	ldr	r0, [r4, #0]
   d4630:	6803      	ldr	r3, [r0, #0]
   d4632:	4631      	mov	r1, r6
   d4634:	689b      	ldr	r3, [r3, #8]
   d4636:	4798      	blx	r3
  _i2cPort->write(value);
   d4638:	6820      	ldr	r0, [r4, #0]
   d463a:	6803      	ldr	r3, [r0, #0]
   d463c:	4629      	mov	r1, r5
   d463e:	689b      	ldr	r3, [r3, #8]
   d4640:	4798      	blx	r3
  _i2cPort->endTransmission();
   d4642:	6820      	ldr	r0, [r4, #0]
}
   d4644:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  _i2cPort->endTransmission();
   d4648:	f001 b871 	b.w	d572e <_ZN7TwoWire15endTransmissionEv>

000d464c <_ZN8MAX3010520setPulseAmplitudeRedEh>:
void MAX30105::setPulseAmplitudeRed(uint8_t amplitude) {
   d464c:	460b      	mov	r3, r1
  writeRegister8(_i2caddr, MAX30105_LED1_PULSEAMP, amplitude);
   d464e:	220c      	movs	r2, #12
   d4650:	7901      	ldrb	r1, [r0, #4]
   d4652:	f7ff bfe5 	b.w	d4620 <_ZN8MAX3010514writeRegister8Ehhh>

000d4656 <_ZN8MAX3010519setPulseAmplitudeIREh>:
void MAX30105::setPulseAmplitudeIR(uint8_t amplitude) {
   d4656:	460b      	mov	r3, r1
  writeRegister8(_i2caddr, MAX30105_LED2_PULSEAMP, amplitude);
   d4658:	220d      	movs	r2, #13
   d465a:	7901      	ldrb	r1, [r0, #4]
   d465c:	f7ff bfe0 	b.w	d4620 <_ZN8MAX3010514writeRegister8Ehhh>

000d4660 <_ZN8MAX3010522setPulseAmplitudeGreenEh>:
void MAX30105::setPulseAmplitudeGreen(uint8_t amplitude) {
   d4660:	460b      	mov	r3, r1
  writeRegister8(_i2caddr, MAX30105_LED3_PULSEAMP, amplitude);
   d4662:	220e      	movs	r2, #14
   d4664:	7901      	ldrb	r1, [r0, #4]
   d4666:	f7ff bfdb 	b.w	d4620 <_ZN8MAX3010514writeRegister8Ehhh>

000d466a <_ZN8MAX3010526setPulseAmplitudeProximityEh>:
void MAX30105::setPulseAmplitudeProximity(uint8_t amplitude) {
   d466a:	460b      	mov	r3, r1
  writeRegister8(_i2caddr, MAX30105_LED_PROX_AMP, amplitude);
   d466c:	2210      	movs	r2, #16
   d466e:	7901      	ldrb	r1, [r0, #4]
   d4670:	f7ff bfd6 	b.w	d4620 <_ZN8MAX3010514writeRegister8Ehhh>

000d4674 <_ZN8MAX301059clearFIFOEv>:
void MAX30105::clearFIFO(void) {
   d4674:	b510      	push	{r4, lr}
   d4676:	4604      	mov	r4, r0
  writeRegister8(_i2caddr, MAX30105_FIFOWRITEPTR, 0);
   d4678:	7901      	ldrb	r1, [r0, #4]
   d467a:	2300      	movs	r3, #0
   d467c:	2204      	movs	r2, #4
   d467e:	f7ff ffcf 	bl	d4620 <_ZN8MAX3010514writeRegister8Ehhh>
  writeRegister8(_i2caddr, MAX30105_FIFOOVERFLOW, 0);
   d4682:	7921      	ldrb	r1, [r4, #4]
   d4684:	4620      	mov	r0, r4
   d4686:	2300      	movs	r3, #0
   d4688:	2205      	movs	r2, #5
   d468a:	f7ff ffc9 	bl	d4620 <_ZN8MAX3010514writeRegister8Ehhh>
  writeRegister8(_i2caddr, MAX30105_FIFOREADPTR, 0);
   d468e:	7921      	ldrb	r1, [r4, #4]
   d4690:	4620      	mov	r0, r4
   d4692:	2300      	movs	r3, #0
}
   d4694:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  writeRegister8(_i2caddr, MAX30105_FIFOREADPTR, 0);
   d4698:	2206      	movs	r2, #6
   d469a:	f7ff bfc1 	b.w	d4620 <_ZN8MAX3010514writeRegister8Ehhh>

000d469e <_ZN8MAX301057bitMaskEhhh>:
{
   d469e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d46a2:	460d      	mov	r5, r1
   d46a4:	4617      	mov	r7, r2
  uint8_t originalContents = readRegister8(_i2caddr, reg);
   d46a6:	460a      	mov	r2, r1
   d46a8:	7901      	ldrb	r1, [r0, #4]
{
   d46aa:	4604      	mov	r4, r0
   d46ac:	461e      	mov	r6, r3
  uint8_t originalContents = readRegister8(_i2caddr, reg);
   d46ae:	f7ff fe8d 	bl	d43cc <_ZN8MAX3010513readRegister8Ehh>
  originalContents = originalContents & mask;
   d46b2:	ea00 0307 	and.w	r3, r0, r7
  writeRegister8(_i2caddr, reg, originalContents | thing);
   d46b6:	7921      	ldrb	r1, [r4, #4]
   d46b8:	4333      	orrs	r3, r6
   d46ba:	462a      	mov	r2, r5
   d46bc:	4620      	mov	r0, r4
}
   d46be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  writeRegister8(_i2caddr, reg, originalContents | thing);
   d46c2:	f7ff bfad 	b.w	d4620 <_ZN8MAX3010514writeRegister8Ehhh>

000d46c6 <_ZN8MAX301059softResetEv>:
void MAX30105::softReset(void) {
   d46c6:	b538      	push	{r3, r4, r5, lr}
  bitMask(MAX30105_MODECONFIG, MAX30105_RESET_MASK, MAX30105_RESET);
   d46c8:	22bf      	movs	r2, #191	; 0xbf
   d46ca:	2340      	movs	r3, #64	; 0x40
   d46cc:	2109      	movs	r1, #9
void MAX30105::softReset(void) {
   d46ce:	4604      	mov	r4, r0
  bitMask(MAX30105_MODECONFIG, MAX30105_RESET_MASK, MAX30105_RESET);
   d46d0:	f7ff ffe5 	bl	d469e <_ZN8MAX301057bitMaskEhhh>
   d46d4:	f000 fb18 	bl	d4d08 <HAL_Timer_Get_Milli_Seconds>
   d46d8:	4605      	mov	r5, r0
   d46da:	f000 fb15 	bl	d4d08 <HAL_Timer_Get_Milli_Seconds>
  while (millis() - startTime < 100)
   d46de:	1b40      	subs	r0, r0, r5
   d46e0:	2863      	cmp	r0, #99	; 0x63
   d46e2:	d80a      	bhi.n	d46fa <_ZN8MAX301059softResetEv+0x34>
    uint8_t response = readRegister8(_i2caddr, MAX30105_MODECONFIG);
   d46e4:	7921      	ldrb	r1, [r4, #4]
   d46e6:	2209      	movs	r2, #9
   d46e8:	4620      	mov	r0, r4
   d46ea:	f7ff fe6f 	bl	d43cc <_ZN8MAX3010513readRegister8Ehh>
    if ((response & MAX30105_RESET) == 0) break; //We're done!
   d46ee:	0643      	lsls	r3, r0, #25
   d46f0:	d503      	bpl.n	d46fa <_ZN8MAX301059softResetEv+0x34>
    delay(1); //Let's not over burden the I2C bus
   d46f2:	2001      	movs	r0, #1
   d46f4:	f000 fd86 	bl	d5204 <delay>
  while (millis() - startTime < 100)
   d46f8:	e7ef      	b.n	d46da <_ZN8MAX301059softResetEv+0x14>
}
   d46fa:	bd38      	pop	{r3, r4, r5, pc}

000d46fc <_ZN8MAX3010510setLEDModeEh>:
void MAX30105::setLEDMode(uint8_t mode) {
   d46fc:	460b      	mov	r3, r1
  bitMask(MAX30105_MODECONFIG, MAX30105_MODE_MASK, mode);
   d46fe:	22f8      	movs	r2, #248	; 0xf8
   d4700:	2109      	movs	r1, #9
   d4702:	f7ff bfcc 	b.w	d469e <_ZN8MAX301057bitMaskEhhh>

000d4706 <_ZN8MAX3010511setADCRangeEh>:
void MAX30105::setADCRange(uint8_t adcRange) {
   d4706:	460b      	mov	r3, r1
  bitMask(MAX30105_PARTICLECONFIG, MAX30105_ADCRANGE_MASK, adcRange);
   d4708:	229f      	movs	r2, #159	; 0x9f
   d470a:	210a      	movs	r1, #10
   d470c:	f7ff bfc7 	b.w	d469e <_ZN8MAX301057bitMaskEhhh>

000d4710 <_ZN8MAX3010513setSampleRateEh>:
void MAX30105::setSampleRate(uint8_t sampleRate) {
   d4710:	460b      	mov	r3, r1
  bitMask(MAX30105_PARTICLECONFIG, MAX30105_SAMPLERATE_MASK, sampleRate);
   d4712:	22e3      	movs	r2, #227	; 0xe3
   d4714:	210a      	movs	r1, #10
   d4716:	f7ff bfc2 	b.w	d469e <_ZN8MAX301057bitMaskEhhh>

000d471a <_ZN8MAX3010513setPulseWidthEh>:
void MAX30105::setPulseWidth(uint8_t pulseWidth) {
   d471a:	460b      	mov	r3, r1
  bitMask(MAX30105_PARTICLECONFIG, MAX30105_PULSEWIDTH_MASK, pulseWidth);
   d471c:	22fc      	movs	r2, #252	; 0xfc
   d471e:	210a      	movs	r1, #10
   d4720:	f7ff bfbd 	b.w	d469e <_ZN8MAX301057bitMaskEhhh>

000d4724 <_ZN8MAX3010514setFIFOAverageEh>:
void MAX30105::setFIFOAverage(uint8_t numberOfSamples) {
   d4724:	460b      	mov	r3, r1
  bitMask(MAX30105_FIFOCONFIG, MAX30105_SAMPLEAVG_MASK, numberOfSamples);
   d4726:	221f      	movs	r2, #31
   d4728:	2108      	movs	r1, #8
   d472a:	f7ff bfb8 	b.w	d469e <_ZN8MAX301057bitMaskEhhh>

000d472e <_ZN8MAX3010518enableFIFORolloverEv>:
  bitMask(MAX30105_FIFOCONFIG, MAX30105_ROLLOVER_MASK, MAX30105_ROLLOVER_ENABLE);
   d472e:	2310      	movs	r3, #16
   d4730:	22ef      	movs	r2, #239	; 0xef
   d4732:	2108      	movs	r1, #8
   d4734:	f7ff bfb3 	b.w	d469e <_ZN8MAX301057bitMaskEhhh>

000d4738 <_ZN8MAX3010510enableSlotEhh>:
  switch (slotNumber) {
   d4738:	3901      	subs	r1, #1
void MAX30105::enableSlot(uint8_t slotNumber, uint8_t device) {
   d473a:	4613      	mov	r3, r2
   d473c:	2903      	cmp	r1, #3
   d473e:	d814      	bhi.n	d476a <_ZN8MAX3010510enableSlotEhh+0x32>
   d4740:	e8df f001 	tbb	[pc, r1]
   d4744:	0e0b0602 	.word	0x0e0b0602
      bitMask(MAX30105_MULTILEDCONFIG1, MAX30105_SLOT1_MASK, device);
   d4748:	22f8      	movs	r2, #248	; 0xf8
      bitMask(MAX30105_MULTILEDCONFIG1, MAX30105_SLOT2_MASK, device << 4);
   d474a:	2111      	movs	r1, #17
      bitMask(MAX30105_MULTILEDCONFIG2, MAX30105_SLOT4_MASK, device << 4);
   d474c:	f7ff bfa7 	b.w	d469e <_ZN8MAX301057bitMaskEhhh>
      bitMask(MAX30105_MULTILEDCONFIG1, MAX30105_SLOT2_MASK, device << 4);
   d4750:	011b      	lsls	r3, r3, #4
   d4752:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   d4756:	228f      	movs	r2, #143	; 0x8f
   d4758:	e7f7      	b.n	d474a <_ZN8MAX3010510enableSlotEhh+0x12>
      bitMask(MAX30105_MULTILEDCONFIG2, MAX30105_SLOT3_MASK, device);
   d475a:	22f8      	movs	r2, #248	; 0xf8
      bitMask(MAX30105_MULTILEDCONFIG2, MAX30105_SLOT4_MASK, device << 4);
   d475c:	2112      	movs	r1, #18
   d475e:	e7f5      	b.n	d474c <_ZN8MAX3010510enableSlotEhh+0x14>
   d4760:	011b      	lsls	r3, r3, #4
   d4762:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   d4766:	228f      	movs	r2, #143	; 0x8f
   d4768:	e7f8      	b.n	d475c <_ZN8MAX3010510enableSlotEhh+0x24>
}
   d476a:	4770      	bx	lr

000d476c <_ZN8MAX301055setupEhhhiii>:
void MAX30105::setup(byte powerLevel, byte sampleAverage, byte ledMode, int sampleRate, int pulseWidth, int adcRange) {
   d476c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d4770:	4615      	mov	r5, r2
   d4772:	e9dd 7908 	ldrd	r7, r9, [sp, #32]
   d4776:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
   d477a:	4604      	mov	r4, r0
   d477c:	4688      	mov	r8, r1
   d477e:	461e      	mov	r6, r3
  softReset(); //Reset all configuration, threshold, and data registers to POR values
   d4780:	f7ff ffa1 	bl	d46c6 <_ZN8MAX301059softResetEv>
  if (sampleAverage == 1) setFIFOAverage(MAX30105_SAMPLEAVG_1); //No averaging per FIFO record
   d4784:	2d01      	cmp	r5, #1
   d4786:	d14a      	bne.n	d481e <_ZN8MAX301055setupEhhhiii+0xb2>
   d4788:	2100      	movs	r1, #0
  else if (sampleAverage == 32) setFIFOAverage(MAX30105_SAMPLEAVG_32);
   d478a:	4620      	mov	r0, r4
   d478c:	f7ff ffca 	bl	d4724 <_ZN8MAX3010514setFIFOAverageEh>
  enableFIFORollover(); //Allow FIFO to wrap/roll over
   d4790:	4620      	mov	r0, r4
   d4792:	f7ff ffcc 	bl	d472e <_ZN8MAX3010518enableFIFORolloverEv>
  if (ledMode == 3) setLEDMode(MAX30105_MODE_MULTILED); //Watch all three LED channels
   d4796:	2e03      	cmp	r6, #3
   d4798:	d155      	bne.n	d4846 <_ZN8MAX301055setupEhhhiii+0xda>
   d479a:	2107      	movs	r1, #7
  else setLEDMode(MAX30105_MODE_REDONLY); //Red only
   d479c:	4620      	mov	r0, r4
   d479e:	f7ff ffad 	bl	d46fc <_ZN8MAX3010510setLEDModeEh>
  if(adcRange < 4096) setADCRange(MAX30105_ADCRANGE_2048); //7.81pA per LSB
   d47a2:	f5ba 5f80 	cmp.w	sl, #4096	; 0x1000
  activeLEDs = ledMode; //Used to control how many bytes to read from FIFO buffer
   d47a6:	7166      	strb	r6, [r4, #5]
  if(adcRange < 4096) setADCRange(MAX30105_ADCRANGE_2048); //7.81pA per LSB
   d47a8:	da52      	bge.n	d4850 <_ZN8MAX301055setupEhhhiii+0xe4>
   d47aa:	2100      	movs	r1, #0
  else if(adcRange == 16384) setADCRange(MAX30105_ADCRANGE_16384); //62.5pA per LSB
   d47ac:	4620      	mov	r0, r4
   d47ae:	f7ff ffaa 	bl	d4706 <_ZN8MAX3010511setADCRangeEh>
  if (sampleRate < 100) setSampleRate(MAX30105_SAMPLERATE_50); //Take 50 samples per second
   d47b2:	2f63      	cmp	r7, #99	; 0x63
   d47b4:	dc59      	bgt.n	d486a <_ZN8MAX301055setupEhhhiii+0xfe>
   d47b6:	2100      	movs	r1, #0
  else if (sampleRate == 3200) setSampleRate(MAX30105_SAMPLERATE_3200);
   d47b8:	4620      	mov	r0, r4
   d47ba:	f7ff ffa9 	bl	d4710 <_ZN8MAX3010513setSampleRateEh>
  if (pulseWidth < 118) setPulseWidth(MAX30105_PULSEWIDTH_69); //Page 26, Gets us 15 bit resolution
   d47be:	f1b9 0f75 	cmp.w	r9, #117	; 0x75
   d47c2:	dc72      	bgt.n	d48aa <_ZN8MAX301055setupEhhhiii+0x13e>
   d47c4:	2100      	movs	r1, #0
  else if (pulseWidth == 411) setPulseWidth(MAX30105_PULSEWIDTH_411); //18 bit resolution
   d47c6:	4620      	mov	r0, r4
   d47c8:	f7ff ffa7 	bl	d471a <_ZN8MAX3010513setPulseWidthEh>
  setPulseAmplitudeRed(powerLevel);
   d47cc:	4641      	mov	r1, r8
   d47ce:	4620      	mov	r0, r4
   d47d0:	f7ff ff3c 	bl	d464c <_ZN8MAX3010520setPulseAmplitudeRedEh>
  setPulseAmplitudeIR(powerLevel);
   d47d4:	4641      	mov	r1, r8
   d47d6:	4620      	mov	r0, r4
   d47d8:	f7ff ff3d 	bl	d4656 <_ZN8MAX3010519setPulseAmplitudeIREh>
  setPulseAmplitudeGreen(powerLevel);
   d47dc:	4641      	mov	r1, r8
   d47de:	4620      	mov	r0, r4
   d47e0:	f7ff ff3e 	bl	d4660 <_ZN8MAX3010522setPulseAmplitudeGreenEh>
  setPulseAmplitudeProximity(powerLevel);
   d47e4:	4641      	mov	r1, r8
   d47e6:	4620      	mov	r0, r4
   d47e8:	f7ff ff3f 	bl	d466a <_ZN8MAX3010526setPulseAmplitudeProximityEh>
  enableSlot(1, SLOT_RED_LED);
   d47ec:	2201      	movs	r2, #1
   d47ee:	4611      	mov	r1, r2
   d47f0:	4620      	mov	r0, r4
   d47f2:	f7ff ffa1 	bl	d4738 <_ZN8MAX3010510enableSlotEhh>
  if (ledMode > 1) enableSlot(2, SLOT_IR_LED);
   d47f6:	2e01      	cmp	r6, #1
   d47f8:	d90c      	bls.n	d4814 <_ZN8MAX301055setupEhhhiii+0xa8>
      bitMask(MAX30105_MULTILEDCONFIG1, MAX30105_SLOT2_MASK, device << 4);
   d47fa:	2320      	movs	r3, #32
   d47fc:	228f      	movs	r2, #143	; 0x8f
   d47fe:	2111      	movs	r1, #17
   d4800:	4620      	mov	r0, r4
   d4802:	f7ff ff4c 	bl	d469e <_ZN8MAX301057bitMaskEhhh>
  if (ledMode > 2) enableSlot(3, SLOT_GREEN_LED);
   d4806:	2e02      	cmp	r6, #2
   d4808:	d004      	beq.n	d4814 <_ZN8MAX301055setupEhhhiii+0xa8>
   d480a:	2203      	movs	r2, #3
   d480c:	4611      	mov	r1, r2
   d480e:	4620      	mov	r0, r4
   d4810:	f7ff ff92 	bl	d4738 <_ZN8MAX3010510enableSlotEhh>
  clearFIFO(); //Reset the FIFO before we begin checking the sensor
   d4814:	4620      	mov	r0, r4
}
   d4816:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  clearFIFO(); //Reset the FIFO before we begin checking the sensor
   d481a:	f7ff bf2b 	b.w	d4674 <_ZN8MAX301059clearFIFOEv>
  else if (sampleAverage == 2) setFIFOAverage(MAX30105_SAMPLEAVG_2);
   d481e:	2d02      	cmp	r5, #2
   d4820:	d101      	bne.n	d4826 <_ZN8MAX301055setupEhhhiii+0xba>
   d4822:	2120      	movs	r1, #32
   d4824:	e7b1      	b.n	d478a <_ZN8MAX301055setupEhhhiii+0x1e>
  else if (sampleAverage == 4) setFIFOAverage(MAX30105_SAMPLEAVG_4);
   d4826:	2d04      	cmp	r5, #4
   d4828:	d101      	bne.n	d482e <_ZN8MAX301055setupEhhhiii+0xc2>
   d482a:	2140      	movs	r1, #64	; 0x40
   d482c:	e7ad      	b.n	d478a <_ZN8MAX301055setupEhhhiii+0x1e>
  else if (sampleAverage == 8) setFIFOAverage(MAX30105_SAMPLEAVG_8);
   d482e:	2d08      	cmp	r5, #8
   d4830:	d101      	bne.n	d4836 <_ZN8MAX301055setupEhhhiii+0xca>
   d4832:	2160      	movs	r1, #96	; 0x60
   d4834:	e7a9      	b.n	d478a <_ZN8MAX301055setupEhhhiii+0x1e>
  else if (sampleAverage == 16) setFIFOAverage(MAX30105_SAMPLEAVG_16);
   d4836:	2d10      	cmp	r5, #16
   d4838:	d101      	bne.n	d483e <_ZN8MAX301055setupEhhhiii+0xd2>
   d483a:	2180      	movs	r1, #128	; 0x80
   d483c:	e7a5      	b.n	d478a <_ZN8MAX301055setupEhhhiii+0x1e>
  else if (sampleAverage == 32) setFIFOAverage(MAX30105_SAMPLEAVG_32);
   d483e:	2d20      	cmp	r5, #32
   d4840:	d1f3      	bne.n	d482a <_ZN8MAX301055setupEhhhiii+0xbe>
   d4842:	21a0      	movs	r1, #160	; 0xa0
   d4844:	e7a1      	b.n	d478a <_ZN8MAX301055setupEhhhiii+0x1e>
  else if (ledMode == 2) setLEDMode(MAX30105_MODE_REDIRONLY); //Red and IR
   d4846:	2e02      	cmp	r6, #2
   d4848:	bf0c      	ite	eq
   d484a:	2103      	moveq	r1, #3
  else setLEDMode(MAX30105_MODE_REDONLY); //Red only
   d484c:	2102      	movne	r1, #2
   d484e:	e7a5      	b.n	d479c <_ZN8MAX301055setupEhhhiii+0x30>
  else if(adcRange < 8192) setADCRange(MAX30105_ADCRANGE_4096); //15.63pA per LSB
   d4850:	f5ba 5f00 	cmp.w	sl, #8192	; 0x2000
   d4854:	da01      	bge.n	d485a <_ZN8MAX301055setupEhhhiii+0xee>
   d4856:	2120      	movs	r1, #32
   d4858:	e7a8      	b.n	d47ac <_ZN8MAX301055setupEhhhiii+0x40>
  else if(adcRange < 16384) setADCRange(MAX30105_ADCRANGE_8192); //31.25pA per LSB
   d485a:	f5ba 4f80 	cmp.w	sl, #16384	; 0x4000
   d485e:	da01      	bge.n	d4864 <_ZN8MAX301055setupEhhhiii+0xf8>
   d4860:	2140      	movs	r1, #64	; 0x40
   d4862:	e7a3      	b.n	d47ac <_ZN8MAX301055setupEhhhiii+0x40>
  else if(adcRange == 16384) setADCRange(MAX30105_ADCRANGE_16384); //62.5pA per LSB
   d4864:	d1a1      	bne.n	d47aa <_ZN8MAX301055setupEhhhiii+0x3e>
   d4866:	2160      	movs	r1, #96	; 0x60
   d4868:	e7a0      	b.n	d47ac <_ZN8MAX301055setupEhhhiii+0x40>
  else if (sampleRate < 200) setSampleRate(MAX30105_SAMPLERATE_100);
   d486a:	2fc7      	cmp	r7, #199	; 0xc7
   d486c:	dc01      	bgt.n	d4872 <_ZN8MAX301055setupEhhhiii+0x106>
   d486e:	2104      	movs	r1, #4
   d4870:	e7a2      	b.n	d47b8 <_ZN8MAX301055setupEhhhiii+0x4c>
  else if (sampleRate < 400) setSampleRate(MAX30105_SAMPLERATE_200);
   d4872:	f5b7 7fc8 	cmp.w	r7, #400	; 0x190
   d4876:	da01      	bge.n	d487c <_ZN8MAX301055setupEhhhiii+0x110>
   d4878:	2108      	movs	r1, #8
   d487a:	e79d      	b.n	d47b8 <_ZN8MAX301055setupEhhhiii+0x4c>
  else if (sampleRate < 800) setSampleRate(MAX30105_SAMPLERATE_400);
   d487c:	f5b7 7f48 	cmp.w	r7, #800	; 0x320
   d4880:	da01      	bge.n	d4886 <_ZN8MAX301055setupEhhhiii+0x11a>
   d4882:	210c      	movs	r1, #12
   d4884:	e798      	b.n	d47b8 <_ZN8MAX301055setupEhhhiii+0x4c>
  else if (sampleRate < 1000) setSampleRate(MAX30105_SAMPLERATE_800);
   d4886:	f5b7 7f7a 	cmp.w	r7, #1000	; 0x3e8
   d488a:	da01      	bge.n	d4890 <_ZN8MAX301055setupEhhhiii+0x124>
   d488c:	2110      	movs	r1, #16
   d488e:	e793      	b.n	d47b8 <_ZN8MAX301055setupEhhhiii+0x4c>
  else if (sampleRate < 1600) setSampleRate(MAX30105_SAMPLERATE_1000);
   d4890:	f5b7 6fc8 	cmp.w	r7, #1600	; 0x640
   d4894:	da01      	bge.n	d489a <_ZN8MAX301055setupEhhhiii+0x12e>
   d4896:	2114      	movs	r1, #20
   d4898:	e78e      	b.n	d47b8 <_ZN8MAX301055setupEhhhiii+0x4c>
  else if (sampleRate < 3200) setSampleRate(MAX30105_SAMPLERATE_1600);
   d489a:	f5b7 6f48 	cmp.w	r7, #3200	; 0xc80
   d489e:	da01      	bge.n	d48a4 <_ZN8MAX301055setupEhhhiii+0x138>
   d48a0:	2118      	movs	r1, #24
   d48a2:	e789      	b.n	d47b8 <_ZN8MAX301055setupEhhhiii+0x4c>
  else if (sampleRate == 3200) setSampleRate(MAX30105_SAMPLERATE_3200);
   d48a4:	d187      	bne.n	d47b6 <_ZN8MAX301055setupEhhhiii+0x4a>
   d48a6:	211c      	movs	r1, #28
   d48a8:	e786      	b.n	d47b8 <_ZN8MAX301055setupEhhhiii+0x4c>
  else if (pulseWidth < 215) setPulseWidth(MAX30105_PULSEWIDTH_118); //16 bit resolution
   d48aa:	f1b9 0fd6 	cmp.w	r9, #214	; 0xd6
   d48ae:	dc01      	bgt.n	d48b4 <_ZN8MAX301055setupEhhhiii+0x148>
   d48b0:	2101      	movs	r1, #1
   d48b2:	e788      	b.n	d47c6 <_ZN8MAX301055setupEhhhiii+0x5a>
  else if (pulseWidth < 411) setPulseWidth(MAX30105_PULSEWIDTH_215); //17 bit resolution
   d48b4:	f5b9 7fcd 	cmp.w	r9, #410	; 0x19a
   d48b8:	dc01      	bgt.n	d48be <_ZN8MAX301055setupEhhhiii+0x152>
   d48ba:	2102      	movs	r1, #2
   d48bc:	e783      	b.n	d47c6 <_ZN8MAX301055setupEhhhiii+0x5a>
  else if (pulseWidth == 411) setPulseWidth(MAX30105_PULSEWIDTH_411); //18 bit resolution
   d48be:	f240 139b 	movw	r3, #411	; 0x19b
   d48c2:	4599      	cmp	r9, r3
   d48c4:	f47f af7e 	bne.w	d47c4 <_ZN8MAX301055setupEhhhiii+0x58>
   d48c8:	2103      	movs	r1, #3
   d48ca:	e77c      	b.n	d47c6 <_ZN8MAX301055setupEhhhiii+0x5a>

000d48cc <_Z28maxim_peaks_above_min_heightPlS_S_ll>:
* \par          Details
*               Find all peaks above MIN_HEIGHT
*
* \retval       None
*/
{
   d48cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  int32_t i = 1, n_width;
  *n_npks = 0;
   d48d0:	2400      	movs	r4, #0
   d48d2:	600c      	str	r4, [r1, #0]
  
  while (i < n_size-1){
   d48d4:	f103 38ff 	add.w	r8, r3, #4294967295
  int32_t i = 1, n_width;
   d48d8:	2401      	movs	r4, #1
  while (i < n_size-1){
   d48da:	45a0      	cmp	r8, r4
   d48dc:	dd27      	ble.n	d492e <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x62>
    if (pn_x[i] > n_min_height && pn_x[i] > pn_x[i-1]){      // find left edge of potential peaks
   d48de:	9d06      	ldr	r5, [sp, #24]
   d48e0:	f852 c024 	ldr.w	ip, [r2, r4, lsl #2]
   d48e4:	45ac      	cmp	ip, r5
   d48e6:	ea4f 0684 	mov.w	r6, r4, lsl #2
   d48ea:	f104 0501 	add.w	r5, r4, #1
   d48ee:	dd1c      	ble.n	d492a <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x5e>
   d48f0:	4416      	add	r6, r2
   d48f2:	f856 6c04 	ldr.w	r6, [r6, #-4]
   d48f6:	45b4      	cmp	ip, r6
   d48f8:	dd17      	ble.n	d492a <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x5e>
   d48fa:	462e      	mov	r6, r5
      n_width = 1;
      while (i+n_width < n_size && pn_x[i] == pn_x[i+n_width])  // find flat peaks
   d48fc:	429e      	cmp	r6, r3
   d48fe:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
   d4902:	eba6 0e04 	sub.w	lr, r6, r4
   d4906:	4635      	mov	r5, r6
   d4908:	d003      	beq.n	d4912 <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x46>
   d490a:	45bc      	cmp	ip, r7
   d490c:	f106 0601 	add.w	r6, r6, #1
   d4910:	d0f4      	beq.n	d48fc <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x30>
        n_width++;
      if (pn_x[i] > pn_x[i+n_width] && (*n_npks) < 15 ){      // find right edge of peaks
   d4912:	45bc      	cmp	ip, r7
   d4914:	dd09      	ble.n	d492a <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x5e>
   d4916:	680e      	ldr	r6, [r1, #0]
   d4918:	2e0e      	cmp	r6, #14
   d491a:	dc06      	bgt.n	d492a <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x5e>
        pn_locs[(*n_npks)++] = i;    
   d491c:	1c75      	adds	r5, r6, #1
   d491e:	600d      	str	r5, [r1, #0]
        // for flat peaks, peak location is left edge
        i += n_width+1;
   d4920:	f10e 0501 	add.w	r5, lr, #1
        pn_locs[(*n_npks)++] = i;    
   d4924:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
        i += n_width+1;
   d4928:	4425      	add	r5, r4
{
   d492a:	462c      	mov	r4, r5
   d492c:	e7d5      	b.n	d48da <_Z28maxim_peaks_above_min_heightPlS_S_ll+0xe>
        i += n_width;
    }
    else
      i++;
  }
}
   d492e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4932 <_Z17maxim_sort_ascendPll>:
* \par          Details
*               Sort array in ascending order (insertion sort algorithm)
*
* \retval       None
*/
{
   d4932:	b5f0      	push	{r4, r5, r6, r7, lr}
  int32_t i, j, n_temp;
  for (i = 1; i < n_size; i++) {
   d4934:	2301      	movs	r3, #1
   d4936:	4604      	mov	r4, r0
   d4938:	428b      	cmp	r3, r1
   d493a:	da0f      	bge.n	d495c <_Z17maxim_sort_ascendPll+0x2a>
    n_temp = pn_x[i];
   d493c:	f854 6f04 	ldr.w	r6, [r4, #4]!
   d4940:	461a      	mov	r2, r3
   d4942:	4625      	mov	r5, r4
    for (j = i; j > 0 && n_temp < pn_x[j-1]; j--)
   d4944:	f855 7c04 	ldr.w	r7, [r5, #-4]
   d4948:	42b7      	cmp	r7, r6
   d494a:	dd03      	ble.n	d4954 <_Z17maxim_sort_ascendPll+0x22>
   d494c:	3a01      	subs	r2, #1
        pn_x[j] = pn_x[j-1];
   d494e:	f845 7904 	str.w	r7, [r5], #-4
    for (j = i; j > 0 && n_temp < pn_x[j-1]; j--)
   d4952:	d1f7      	bne.n	d4944 <_Z17maxim_sort_ascendPll+0x12>
    pn_x[j] = n_temp;
   d4954:	f840 6022 	str.w	r6, [r0, r2, lsl #2]
  for (i = 1; i < n_size; i++) {
   d4958:	3301      	adds	r3, #1
   d495a:	e7ed      	b.n	d4938 <_Z17maxim_sort_ascendPll+0x6>
  }
}
   d495c:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d495e <_Z26maxim_sort_indices_descendPlS_l>:
* \par          Details
*               Sort indices according to descending order (insertion sort algorithm)
*
* \retval       None
*/ 
{
   d495e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  int32_t i, j, n_temp;
  for (i = 1; i < n_size; i++) {
   d4962:	2301      	movs	r3, #1
{
   d4964:	4690      	mov	r8, r2
   d4966:	460d      	mov	r5, r1
  for (i = 1; i < n_size; i++) {
   d4968:	4543      	cmp	r3, r8
   d496a:	da16      	bge.n	d499a <_Z26maxim_sort_indices_descendPlS_l+0x3c>
    n_temp = pn_indx[i];
   d496c:	f855 6f04 	ldr.w	r6, [r5, #4]!
    for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j-1]]; j--)
   d4970:	461c      	mov	r4, r3
   d4972:	eb00 0986 	add.w	r9, r0, r6, lsl #2
   d4976:	46ac      	mov	ip, r5
   d4978:	f8d9 2000 	ldr.w	r2, [r9]
   d497c:	f85c 7c04 	ldr.w	r7, [ip, #-4]
   d4980:	4696      	mov	lr, r2
   d4982:	f850 2027 	ldr.w	r2, [r0, r7, lsl #2]
   d4986:	4596      	cmp	lr, r2
   d4988:	dd03      	ble.n	d4992 <_Z26maxim_sort_indices_descendPlS_l+0x34>
   d498a:	3c01      	subs	r4, #1
      pn_indx[j] = pn_indx[j-1];
   d498c:	f84c 7904 	str.w	r7, [ip], #-4
    for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j-1]]; j--)
   d4990:	d1f2      	bne.n	d4978 <_Z26maxim_sort_indices_descendPlS_l+0x1a>
    pn_indx[j] = n_temp;
   d4992:	f841 6024 	str.w	r6, [r1, r4, lsl #2]
  for (i = 1; i < n_size; i++) {
   d4996:	3301      	adds	r3, #1
   d4998:	e7e6      	b.n	d4968 <_Z26maxim_sort_indices_descendPlS_l+0xa>
  }
}
   d499a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d499e <_Z24maxim_remove_close_peaksPlS_S_l>:
{
   d499e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d49a2:	4604      	mov	r4, r0
   d49a4:	461e      	mov	r6, r3
   d49a6:	4610      	mov	r0, r2
   d49a8:	460d      	mov	r5, r1
  maxim_sort_indices_descend( pn_x, pn_locs, *pn_npks );
   d49aa:	680a      	ldr	r2, [r1, #0]
   d49ac:	4621      	mov	r1, r4
   d49ae:	f7ff ffd6 	bl	d495e <_Z26maxim_sort_indices_descendPlS_l>
  for ( i = -1; i < *pn_npks; i++ ){
   d49b2:	1f27      	subs	r7, r4, #4
  maxim_sort_indices_descend( pn_x, pn_locs, *pn_npks );
   d49b4:	f04f 32ff 	mov.w	r2, #4294967295
      if ( n_dist > n_min_distance || n_dist < -n_min_distance )
   d49b8:	f1c6 0800 	rsb	r8, r6, #0
  for ( i = -1; i < *pn_npks; i++ ){
   d49bc:	6829      	ldr	r1, [r5, #0]
   d49be:	4291      	cmp	r1, r2
   d49c0:	4694      	mov	ip, r2
   d49c2:	dd20      	ble.n	d4a06 <_Z24maxim_remove_close_peaksPlS_S_l+0x68>
    *pn_npks = i+1;
   d49c4:	3201      	adds	r2, #1
   d49c6:	4610      	mov	r0, r2
   d49c8:	602a      	str	r2, [r5, #0]
    for ( j = i+1; j < n_old_npks; j++ ){
   d49ca:	4281      	cmp	r1, r0
   d49cc:	d101      	bne.n	d49d2 <_Z24maxim_remove_close_peaksPlS_S_l+0x34>
   d49ce:	3704      	adds	r7, #4
   d49d0:	e7f4      	b.n	d49bc <_Z24maxim_remove_close_peaksPlS_S_l+0x1e>
      n_dist =  pn_locs[j] - ( i == -1 ? -1 : pn_locs[i] ); // lag-zero peak of autocorr is at index -1
   d49d2:	f1bc 3fff 	cmp.w	ip, #4294967295
   d49d6:	bf18      	it	ne
   d49d8:	f8d7 e000 	ldrne.w	lr, [r7]
   d49dc:	f854 3020 	ldr.w	r3, [r4, r0, lsl #2]
   d49e0:	bf08      	it	eq
   d49e2:	46e6      	moveq	lr, ip
   d49e4:	eba3 030e 	sub.w	r3, r3, lr
      if ( n_dist > n_min_distance || n_dist < -n_min_distance )
   d49e8:	42b3      	cmp	r3, r6
   d49ea:	dc01      	bgt.n	d49f0 <_Z24maxim_remove_close_peaksPlS_S_l+0x52>
   d49ec:	4598      	cmp	r8, r3
   d49ee:	dd08      	ble.n	d4a02 <_Z24maxim_remove_close_peaksPlS_S_l+0x64>
        pn_locs[(*pn_npks)++] = pn_locs[j];
   d49f0:	f8d5 e000 	ldr.w	lr, [r5]
   d49f4:	f10e 0301 	add.w	r3, lr, #1
   d49f8:	602b      	str	r3, [r5, #0]
   d49fa:	f854 3020 	ldr.w	r3, [r4, r0, lsl #2]
   d49fe:	f844 302e 	str.w	r3, [r4, lr, lsl #2]
    for ( j = i+1; j < n_old_npks; j++ ){
   d4a02:	3001      	adds	r0, #1
   d4a04:	e7e1      	b.n	d49ca <_Z24maxim_remove_close_peaksPlS_S_l+0x2c>
  maxim_sort_ascend( pn_locs, *pn_npks );
   d4a06:	4620      	mov	r0, r4
}
   d4a08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  maxim_sort_ascend( pn_locs, *pn_npks );
   d4a0c:	f7ff bf91 	b.w	d4932 <_Z17maxim_sort_ascendPll>

000d4a10 <_Z16maxim_find_peaksPlS_S_llll>:
{
   d4a10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  maxim_peaks_above_min_height( pn_locs, n_npks, pn_x, n_size, n_min_height );
   d4a12:	9f08      	ldr	r7, [sp, #32]
   d4a14:	9700      	str	r7, [sp, #0]
{
   d4a16:	460c      	mov	r4, r1
  maxim_peaks_above_min_height( pn_locs, n_npks, pn_x, n_size, n_min_height );
   d4a18:	f7ff ff58 	bl	d48cc <_Z28maxim_peaks_above_min_heightPlS_S_ll>
  maxim_remove_close_peaks( pn_locs, n_npks, pn_x, n_min_distance );
   d4a1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d4a1e:	f7ff ffbe 	bl	d499e <_Z24maxim_remove_close_peaksPlS_S_l>
  *n_npks = min( *n_npks, n_max_num );
   d4a22:	6822      	ldr	r2, [r4, #0]
   d4a24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d4a26:	429a      	cmp	r2, r3
   d4a28:	bfd4      	ite	le
   d4a2a:	6022      	strle	r2, [r4, #0]
   d4a2c:	6023      	strgt	r3, [r4, #0]
}
   d4a2e:	b003      	add	sp, #12
   d4a30:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d4a34 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_>:
{
   d4a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4a38:	4690      	mov	r8, r2
  for (k=0 ; k<n_ir_buffer_length ; k++ ) un_ir_mean += pun_ir_buffer[k] ;
   d4a3a:	2200      	movs	r2, #0
{
   d4a3c:	469b      	mov	fp, r3
   d4a3e:	b09f      	sub	sp, #124	; 0x7c
   d4a40:	4605      	mov	r5, r0
   d4a42:	460c      	mov	r4, r1
  un_ir_mean =0; 
   d4a44:	4613      	mov	r3, r2
  for (k=0 ; k<n_ir_buffer_length ; k++ ) un_ir_mean += pun_ir_buffer[k] ;
   d4a46:	42a2      	cmp	r2, r4
   d4a48:	da04      	bge.n	d4a54 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x20>
   d4a4a:	f855 1022 	ldr.w	r1, [r5, r2, lsl #2]
   d4a4e:	3201      	adds	r2, #1
   d4a50:	440b      	add	r3, r1
   d4a52:	e7f8      	b.n	d4a46 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x12>
  un_ir_mean =un_ir_mean/n_ir_buffer_length ;
   d4a54:	f8df 9230 	ldr.w	r9, [pc, #560]	; d4c88 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x254>
   d4a58:	fbb3 f3f4 	udiv	r3, r3, r4
   d4a5c:	4648      	mov	r0, r9
  for (k=0 ; k<n_ir_buffer_length ; k++ )  
   d4a5e:	2200      	movs	r2, #0
   d4a60:	42a2      	cmp	r2, r4
   d4a62:	da06      	bge.n	d4a72 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x3e>
    an_x[k] = -1*(pun_ir_buffer[k] - un_ir_mean) ; 
   d4a64:	f855 1022 	ldr.w	r1, [r5, r2, lsl #2]
   d4a68:	1a59      	subs	r1, r3, r1
   d4a6a:	f840 1b04 	str.w	r1, [r0], #4
  for (k=0 ; k<n_ir_buffer_length ; k++ )  
   d4a6e:	3201      	adds	r2, #1
   d4a70:	e7f6      	b.n	d4a60 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x2c>
   d4a72:	4a85      	ldr	r2, [pc, #532]	; (d4c88 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x254>)
  for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++){
   d4a74:	2100      	movs	r1, #0
    an_x[k]=( an_x[k]+an_x[k+1]+ an_x[k+2]+ an_x[k+3])/(int)4;        
   d4a76:	6813      	ldr	r3, [r2, #0]
   d4a78:	f852 0f04 	ldr.w	r0, [r2, #4]!
   d4a7c:	4403      	add	r3, r0
   d4a7e:	6850      	ldr	r0, [r2, #4]
   d4a80:	4403      	add	r3, r0
   d4a82:	6890      	ldr	r0, [r2, #8]
   d4a84:	181b      	adds	r3, r3, r0
   d4a86:	bf48      	it	mi
   d4a88:	3303      	addmi	r3, #3
   d4a8a:	3101      	adds	r1, #1
   d4a8c:	109b      	asrs	r3, r3, #2
  for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++){
   d4a8e:	2960      	cmp	r1, #96	; 0x60
    an_x[k]=( an_x[k]+an_x[k+1]+ an_x[k+2]+ an_x[k+3])/(int)4;        
   d4a90:	f842 3c04 	str.w	r3, [r2, #-4]
  for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++){
   d4a94:	d1ef      	bne.n	d4a76 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x42>
  n_th1=0; 
   d4a96:	2300      	movs	r3, #0
   d4a98:	497b      	ldr	r1, [pc, #492]	; (d4c88 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x254>)
  for ( k=0 ; k<BUFFER_SIZE ;k++){
   d4a9a:	461a      	mov	r2, r3
    n_th1 +=  an_x[k];
   d4a9c:	f851 0b04 	ldr.w	r0, [r1], #4
  for ( k=0 ; k<BUFFER_SIZE ;k++){
   d4aa0:	3201      	adds	r2, #1
   d4aa2:	2a64      	cmp	r2, #100	; 0x64
    n_th1 +=  an_x[k];
   d4aa4:	4403      	add	r3, r0
  for ( k=0 ; k<BUFFER_SIZE ;k++){
   d4aa6:	d1f9      	bne.n	d4a9c <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x68>
  if( n_th1<30) n_th1=30; // min allowed
   d4aa8:	f640 31b7 	movw	r1, #2999	; 0xbb7
   d4aac:	428b      	cmp	r3, r1
   d4aae:	dd4b      	ble.n	d4b48 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x114>
  n_th1=  n_th1/ ( BUFFER_SIZE);
   d4ab0:	fb93 f3f2 	sdiv	r3, r3, r2
   d4ab4:	2b3c      	cmp	r3, #60	; 0x3c
   d4ab6:	bfa8      	it	ge
   d4ab8:	233c      	movge	r3, #60	; 0x3c
  for ( k=0 ; k<15;k++) an_ir_valley_locs[k]=0;
   d4aba:	ae0f      	add	r6, sp, #60	; 0x3c
   d4abc:	2200      	movs	r2, #0
  if( n_th1<30) n_th1=30; // min allowed
   d4abe:	4631      	mov	r1, r6
  for ( k=0 ; k<15;k++) an_ir_valley_locs[k]=0;
   d4ac0:	4692      	mov	sl, r2
   d4ac2:	3201      	adds	r2, #1
   d4ac4:	2a0f      	cmp	r2, #15
   d4ac6:	f841 ab04 	str.w	sl, [r1], #4
   d4aca:	d1fa      	bne.n	d4ac2 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x8e>
  maxim_find_peaks( an_ir_valley_locs, &n_npks, an_x, BUFFER_SIZE, n_th1, 4, 15 );//peak_height, peak_distance, max_num_peaks 
   d4acc:	9202      	str	r2, [sp, #8]
   d4ace:	2204      	movs	r2, #4
   d4ad0:	e9cd 3200 	strd	r3, r2, [sp]
   d4ad4:	a909      	add	r1, sp, #36	; 0x24
   d4ad6:	2364      	movs	r3, #100	; 0x64
   d4ad8:	4a6b      	ldr	r2, [pc, #428]	; (d4c88 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x254>)
   d4ada:	4630      	mov	r0, r6
   d4adc:	f7ff ff98 	bl	d4a10 <_Z16maxim_find_peaksPlS_S_llll>
  if (n_npks>=2){
   d4ae0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d4ae2:	2b01      	cmp	r3, #1
   d4ae4:	dd32      	ble.n	d4b4c <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x118>
   d4ae6:	46b6      	mov	lr, r6
  n_peak_interval_sum =0;
   d4ae8:	2200      	movs	r2, #0
    for (k=1; k<n_npks; k++) n_peak_interval_sum += (an_ir_valley_locs[k] -an_ir_valley_locs[k -1] ) ;
   d4aea:	2001      	movs	r0, #1
   d4aec:	4671      	mov	r1, lr
   d4aee:	f8de c004 	ldr.w	ip, [lr, #4]
   d4af2:	6809      	ldr	r1, [r1, #0]
   d4af4:	3001      	adds	r0, #1
   d4af6:	ebac 0c01 	sub.w	ip, ip, r1
   d4afa:	4283      	cmp	r3, r0
   d4afc:	f10e 0e04 	add.w	lr, lr, #4
   d4b00:	4462      	add	r2, ip
   d4b02:	d1f3      	bne.n	d4aec <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0xb8>
    n_peak_interval_sum =n_peak_interval_sum/(n_npks-1);
   d4b04:	1e59      	subs	r1, r3, #1
   d4b06:	fb92 f2f1 	sdiv	r2, r2, r1
    *pn_heart_rate =(int32_t)( (FS*60)/ n_peak_interval_sum );
   d4b0a:	f240 51dc 	movw	r1, #1500	; 0x5dc
   d4b0e:	fb91 f2f2 	sdiv	r2, r1, r2
   d4b12:	9929      	ldr	r1, [sp, #164]	; 0xa4
   d4b14:	600a      	str	r2, [r1, #0]
    *pch_hr_valid  = 1;
   d4b16:	992a      	ldr	r1, [sp, #168]	; 0xa8
   d4b18:	2201      	movs	r2, #1
   d4b1a:	700a      	strb	r2, [r1, #0]
   d4b1c:	485b      	ldr	r0, [pc, #364]	; (d4c8c <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x258>)
    for (k=1; k<n_npks; k++) n_peak_interval_sum += (an_ir_valley_locs[k] -an_ir_valley_locs[k -1] ) ;
   d4b1e:	2200      	movs	r2, #0
  for (k=0 ; k<n_ir_buffer_length ; k++ )  {
   d4b20:	42a2      	cmp	r2, r4
   d4b22:	db1a      	blt.n	d4b5a <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x126>
  for(k=0; k< 5; k++) an_ratio[k]=0;
   d4b24:	2200      	movs	r2, #0
   d4b26:	e9cd 220a 	strd	r2, r2, [sp, #40]	; 0x28
   d4b2a:	e9cd 220c 	strd	r2, r2, [sp, #48]	; 0x30
   d4b2e:	920e      	str	r2, [sp, #56]	; 0x38
    if (an_ir_valley_locs[k] > BUFFER_SIZE ){
   d4b30:	a80f      	add	r0, sp, #60	; 0x3c
  for (k=0; k< n_exact_ir_valley_locs_count; k++){
   d4b32:	4293      	cmp	r3, r2
   d4b34:	dd1d      	ble.n	d4b72 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x13e>
    if (an_ir_valley_locs[k] > BUFFER_SIZE ){
   d4b36:	f850 1022 	ldr.w	r1, [r0, r2, lsl #2]
   d4b3a:	2964      	cmp	r1, #100	; 0x64
   d4b3c:	dd17      	ble.n	d4b6e <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x13a>
    *pn_spo2 =  -999 ; // do not use SPO2 since signal an_ratio is out of range
   d4b3e:	4b54      	ldr	r3, [pc, #336]	; (d4c90 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x25c>)
   d4b40:	f8cb 3000 	str.w	r3, [fp]
    *pch_spo2_valid  = 0; 
   d4b44:	2300      	movs	r3, #0
   d4b46:	e094      	b.n	d4c72 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x23e>
  if( n_th1<30) n_th1=30; // min allowed
   d4b48:	231e      	movs	r3, #30
   d4b4a:	e7b6      	b.n	d4aba <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x86>
    *pn_heart_rate = -999; // unable to calculate because # of peaks are too small
   d4b4c:	9929      	ldr	r1, [sp, #164]	; 0xa4
   d4b4e:	4a50      	ldr	r2, [pc, #320]	; (d4c90 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x25c>)
   d4b50:	600a      	str	r2, [r1, #0]
    *pch_hr_valid  = 0;
   d4b52:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
   d4b54:	f882 a000 	strb.w	sl, [r2]
   d4b58:	e7e0      	b.n	d4b1c <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0xe8>
      an_x[k] =  pun_ir_buffer[k] ; 
   d4b5a:	f855 1022 	ldr.w	r1, [r5, r2, lsl #2]
   d4b5e:	f849 1b04 	str.w	r1, [r9], #4
      an_y[k] =  pun_red_buffer[k] ; 
   d4b62:	f858 1022 	ldr.w	r1, [r8, r2, lsl #2]
   d4b66:	f840 1b04 	str.w	r1, [r0], #4
  for (k=0 ; k<n_ir_buffer_length ; k++ )  {
   d4b6a:	3201      	adds	r2, #1
   d4b6c:	e7d8      	b.n	d4b20 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0xec>
  for (k=0; k< n_exact_ir_valley_locs_count; k++){
   d4b6e:	3201      	adds	r2, #1
   d4b70:	e7df      	b.n	d4b32 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0xfe>
  n_i_ratio_count = 0; 
   d4b72:	2100      	movs	r1, #0
  for (k=0; k< n_exact_ir_valley_locs_count-1; k++){
   d4b74:	3b01      	subs	r3, #1
   d4b76:	4844      	ldr	r0, [pc, #272]	; (d4c88 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x254>)
          if (an_y[i]> n_y_dc_max) {n_y_dc_max =an_y[i]; n_y_dc_max_idx=i;}
   d4b78:	f8df c110 	ldr.w	ip, [pc, #272]	; d4c8c <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x258>
  for (k=0; k< n_exact_ir_valley_locs_count-1; k++){
   d4b7c:	9307      	str	r3, [sp, #28]
   d4b7e:	4688      	mov	r8, r1
   d4b80:	9b07      	ldr	r3, [sp, #28]
   d4b82:	4543      	cmp	r3, r8
   d4b84:	dd59      	ble.n	d4c3a <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x206>
    if (an_ir_valley_locs[k+1]-an_ir_valley_locs[k] >3){
   d4b86:	f8d6 e004 	ldr.w	lr, [r6, #4]
   d4b8a:	f856 3b04 	ldr.w	r3, [r6], #4
   d4b8e:	ebae 0903 	sub.w	r9, lr, r3
   d4b92:	f1b9 0f03 	cmp.w	r9, #3
   d4b96:	f108 0801 	add.w	r8, r8, #1
   d4b9a:	ddf1      	ble.n	d4b80 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x14c>
    n_x_dc_max= -16777216; 
   d4b9c:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
        for (i=an_ir_valley_locs[k]; i< an_ir_valley_locs[k+1]; i++){
   d4ba0:	461d      	mov	r5, r3
    n_y_dc_max= -16777216 ; 
   d4ba2:	9205      	str	r2, [sp, #20]
        for (i=an_ir_valley_locs[k]; i< an_ir_valley_locs[k+1]; i++){
   d4ba4:	45ae      	cmp	lr, r5
   d4ba6:	dd10      	ble.n	d4bca <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x196>
          if (an_x[i]> n_x_dc_max) {n_x_dc_max =an_x[i]; n_x_dc_max_idx=i;}
   d4ba8:	f850 a025 	ldr.w	sl, [r0, r5, lsl #2]
          if (an_y[i]> n_y_dc_max) {n_y_dc_max =an_y[i]; n_y_dc_max_idx=i;}
   d4bac:	9c05      	ldr	r4, [sp, #20]
          if (an_x[i]> n_x_dc_max) {n_x_dc_max =an_x[i]; n_x_dc_max_idx=i;}
   d4bae:	4592      	cmp	sl, r2
   d4bb0:	bfc8      	it	gt
   d4bb2:	4652      	movgt	r2, sl
          if (an_y[i]> n_y_dc_max) {n_y_dc_max =an_y[i]; n_y_dc_max_idx=i;}
   d4bb4:	f85c a025 	ldr.w	sl, [ip, r5, lsl #2]
          if (an_x[i]> n_x_dc_max) {n_x_dc_max =an_x[i]; n_x_dc_max_idx=i;}
   d4bb8:	bfc8      	it	gt
   d4bba:	9506      	strgt	r5, [sp, #24]
          if (an_y[i]> n_y_dc_max) {n_y_dc_max =an_y[i]; n_y_dc_max_idx=i;}
   d4bbc:	45a2      	cmp	sl, r4
   d4bbe:	bfc4      	itt	gt
   d4bc0:	462f      	movgt	r7, r5
   d4bc2:	f8cd a014 	strgt.w	sl, [sp, #20]
        for (i=an_ir_valley_locs[k]; i< an_ir_valley_locs[k+1]; i++){
   d4bc6:	3501      	adds	r5, #1
   d4bc8:	e7ec      	b.n	d4ba4 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x170>
      n_x_ac= (an_x[an_ir_valley_locs[k+1]] - an_x[an_ir_valley_locs[k] ] )*(n_x_dc_max_idx -an_ir_valley_locs[k]); // ir
   d4bca:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
   d4bce:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
   d4bd2:	eba4 0a05 	sub.w	sl, r4, r5
   d4bd6:	9d06      	ldr	r5, [sp, #24]
      n_denom= ( n_x_ac *n_y_dc_max)>>7;
   d4bd8:	9c05      	ldr	r4, [sp, #20]
      n_x_ac= (an_x[an_ir_valley_locs[k+1]] - an_x[an_ir_valley_locs[k] ] )*(n_x_dc_max_idx -an_ir_valley_locs[k]); // ir
   d4bda:	1aed      	subs	r5, r5, r3
   d4bdc:	fb05 f50a 	mul.w	r5, r5, sl
      n_x_ac=  an_x[an_ir_valley_locs[k]] + n_x_ac/ (an_ir_valley_locs[k+1] - an_ir_valley_locs[k]); 
   d4be0:	fb95 faf9 	sdiv	sl, r5, r9
   d4be4:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
   d4be8:	44aa      	add	sl, r5
      n_x_ac=  an_x[n_y_dc_max_idx] - n_x_ac;      // subracting linear DC compoenents from raw 
   d4bea:	f850 5027 	ldr.w	r5, [r0, r7, lsl #2]
   d4bee:	eba5 0a0a 	sub.w	sl, r5, sl
      n_denom= ( n_x_ac *n_y_dc_max)>>7;
   d4bf2:	fb04 f40a 	mul.w	r4, r4, sl
   d4bf6:	11e4      	asrs	r4, r4, #7
      if (n_denom>0  && n_i_ratio_count <5 &&  n_nume != 0)
   d4bf8:	2c00      	cmp	r4, #0
   d4bfa:	ddc1      	ble.n	d4b80 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x14c>
   d4bfc:	2904      	cmp	r1, #4
   d4bfe:	dcbf      	bgt.n	d4b80 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x14c>
      n_y_ac= (an_y[an_ir_valley_locs[k+1]] - an_y[an_ir_valley_locs[k] ] )*(n_y_dc_max_idx -an_ir_valley_locs[k]); //red
   d4c00:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
   d4c04:	f85c e02e 	ldr.w	lr, [ip, lr, lsl #2]
   d4c08:	1afb      	subs	r3, r7, r3
   d4c0a:	ebae 0e05 	sub.w	lr, lr, r5
   d4c0e:	fb03 f30e 	mul.w	r3, r3, lr
      n_y_ac=  an_y[an_ir_valley_locs[k]] + n_y_ac/ (an_ir_valley_locs[k+1] - an_ir_valley_locs[k])  ; 
   d4c12:	fb93 f3f9 	sdiv	r3, r3, r9
   d4c16:	442b      	add	r3, r5
      n_y_ac=  an_y[n_y_dc_max_idx] - n_y_ac;    // subracting linear DC compoenents from raw 
   d4c18:	f85c 5027 	ldr.w	r5, [ip, r7, lsl #2]
   d4c1c:	1aed      	subs	r5, r5, r3
      n_nume=( n_y_ac *n_x_dc_max)>>7 ; //prepare X100 to preserve floating value
   d4c1e:	436a      	muls	r2, r5
      if (n_denom>0  && n_i_ratio_count <5 &&  n_nume != 0)
   d4c20:	11d2      	asrs	r2, r2, #7
   d4c22:	d0ad      	beq.n	d4b80 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x14c>
        an_ratio[n_i_ratio_count]= (n_nume*100)/n_denom ; //formular is ( n_y_ac *n_x_dc_max) / ( n_x_ac *n_y_dc_max) ;
   d4c24:	ab1e      	add	r3, sp, #120	; 0x78
   d4c26:	eb03 0e81 	add.w	lr, r3, r1, lsl #2
   d4c2a:	2364      	movs	r3, #100	; 0x64
   d4c2c:	435a      	muls	r2, r3
        n_i_ratio_count++;
   d4c2e:	3101      	adds	r1, #1
        an_ratio[n_i_ratio_count]= (n_nume*100)/n_denom ; //formular is ( n_y_ac *n_x_dc_max) / ( n_x_ac *n_y_dc_max) ;
   d4c30:	fb92 f4f4 	sdiv	r4, r2, r4
   d4c34:	f84e 4c50 	str.w	r4, [lr, #-80]
        n_i_ratio_count++;
   d4c38:	e7a2      	b.n	d4b80 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x14c>
  maxim_sort_ascend(an_ratio, n_i_ratio_count);
   d4c3a:	a80a      	add	r0, sp, #40	; 0x28
   d4c3c:	f7ff fe79 	bl	d4932 <_Z17maxim_sort_ascendPll>
  n_middle_idx= n_i_ratio_count/2;
   d4c40:	104a      	asrs	r2, r1, #1
  if (n_middle_idx >1)
   d4c42:	2903      	cmp	r1, #3
   d4c44:	ea4f 0382 	mov.w	r3, r2, lsl #2
   d4c48:	dd18      	ble.n	d4c7c <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x248>
    n_ratio_average =( an_ratio[n_middle_idx-1] +an_ratio[n_middle_idx])/2; // use median
   d4c4a:	a91e      	add	r1, sp, #120	; 0x78
   d4c4c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
   d4c50:	f851 3c54 	ldr.w	r3, [r1, #-84]
   d4c54:	f851 2c50 	ldr.w	r2, [r1, #-80]
   d4c58:	4413      	add	r3, r2
   d4c5a:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
   d4c5e:	105b      	asrs	r3, r3, #1
  if( n_ratio_average>2 && n_ratio_average <184){
   d4c60:	1eda      	subs	r2, r3, #3
   d4c62:	2ab4      	cmp	r2, #180	; 0xb4
   d4c64:	f63f af6b 	bhi.w	d4b3e <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x10a>
    n_spo2_calc= uch_spo2_table[n_ratio_average] ;
   d4c68:	4a0a      	ldr	r2, [pc, #40]	; (d4c94 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x260>)
   d4c6a:	5cd3      	ldrb	r3, [r2, r3]
   d4c6c:	f8cb 3000 	str.w	r3, [fp]
    *pch_spo2_valid  = 1;//  float_SPO2 =  -45.060*n_ratio_average* n_ratio_average/10000 + 30.354 *n_ratio_average/100 + 94.845 ;  // for comparison with table
   d4c70:	2301      	movs	r3, #1
    *pch_spo2_valid  = 0; 
   d4c72:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   d4c74:	7013      	strb	r3, [r2, #0]
}
   d4c76:	b01f      	add	sp, #124	; 0x7c
   d4c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    n_ratio_average = an_ratio[n_middle_idx ];
   d4c7c:	aa1e      	add	r2, sp, #120	; 0x78
   d4c7e:	4413      	add	r3, r2
   d4c80:	f853 3c50 	ldr.w	r3, [r3, #-80]
   d4c84:	e7ec      	b.n	d4c60 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x22c>
   d4c86:	bf00      	nop
   d4c88:	2003e288 	.word	0x2003e288
   d4c8c:	2003e418 	.word	0x2003e418
   d4c90:	fffffc19 	.word	0xfffffc19
   d4c94:	000d5c5c 	.word	0x000d5c5c

000d4c98 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4c98:	b508      	push	{r3, lr}
   d4c9a:	4b02      	ldr	r3, [pc, #8]	; (d4ca4 <netdb_freeaddrinfo+0xc>)
   d4c9c:	681b      	ldr	r3, [r3, #0]
   d4c9e:	689b      	ldr	r3, [r3, #8]
   d4ca0:	9301      	str	r3, [sp, #4]
   d4ca2:	bd08      	pop	{r3, pc}
   d4ca4:	00030268 	.word	0x00030268

000d4ca8 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4ca8:	b508      	push	{r3, lr}
   d4caa:	4b02      	ldr	r3, [pc, #8]	; (d4cb4 <netdb_getaddrinfo+0xc>)
   d4cac:	681b      	ldr	r3, [r3, #0]
   d4cae:	68db      	ldr	r3, [r3, #12]
   d4cb0:	9301      	str	r3, [sp, #4]
   d4cb2:	bd08      	pop	{r3, pc}
   d4cb4:	00030268 	.word	0x00030268

000d4cb8 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4cb8:	b508      	push	{r3, lr}
   d4cba:	4b02      	ldr	r3, [pc, #8]	; (d4cc4 <HAL_Pin_Mode+0xc>)
   d4cbc:	681b      	ldr	r3, [r3, #0]
   d4cbe:	689b      	ldr	r3, [r3, #8]
   d4cc0:	9301      	str	r3, [sp, #4]
   d4cc2:	bd08      	pop	{r3, pc}
   d4cc4:	0003022c 	.word	0x0003022c

000d4cc8 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4cc8:	b508      	push	{r3, lr}
   d4cca:	4b02      	ldr	r3, [pc, #8]	; (d4cd4 <HAL_Get_Pin_Mode+0xc>)
   d4ccc:	681b      	ldr	r3, [r3, #0]
   d4cce:	68db      	ldr	r3, [r3, #12]
   d4cd0:	9301      	str	r3, [sp, #4]
   d4cd2:	bd08      	pop	{r3, pc}
   d4cd4:	0003022c 	.word	0x0003022c

000d4cd8 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d4cd8:	b508      	push	{r3, lr}
   d4cda:	4b02      	ldr	r3, [pc, #8]	; (d4ce4 <HAL_GPIO_Write+0xc>)
   d4cdc:	681b      	ldr	r3, [r3, #0]
   d4cde:	691b      	ldr	r3, [r3, #16]
   d4ce0:	9301      	str	r3, [sp, #4]
   d4ce2:	bd08      	pop	{r3, pc}
   d4ce4:	0003022c 	.word	0x0003022c

000d4ce8 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d4ce8:	b508      	push	{r3, lr}
   d4cea:	4b02      	ldr	r3, [pc, #8]	; (d4cf4 <HAL_GPIO_Read+0xc>)
   d4cec:	681b      	ldr	r3, [r3, #0]
   d4cee:	695b      	ldr	r3, [r3, #20]
   d4cf0:	9301      	str	r3, [sp, #4]
   d4cf2:	bd08      	pop	{r3, pc}
   d4cf4:	0003022c 	.word	0x0003022c

000d4cf8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4cf8:	b508      	push	{r3, lr}
   d4cfa:	4b02      	ldr	r3, [pc, #8]	; (d4d04 <HAL_RNG_GetRandomNumber+0xc>)
   d4cfc:	681b      	ldr	r3, [r3, #0]
   d4cfe:	685b      	ldr	r3, [r3, #4]
   d4d00:	9301      	str	r3, [sp, #4]
   d4d02:	bd08      	pop	{r3, pc}
   d4d04:	00030218 	.word	0x00030218

000d4d08 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4d08:	b508      	push	{r3, lr}
   d4d0a:	4b02      	ldr	r3, [pc, #8]	; (d4d14 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4d0c:	681b      	ldr	r3, [r3, #0]
   d4d0e:	695b      	ldr	r3, [r3, #20]
   d4d10:	9301      	str	r3, [sp, #4]
   d4d12:	bd08      	pop	{r3, pc}
   d4d14:	00030218 	.word	0x00030218

000d4d18 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4d18:	b508      	push	{r3, lr}
   d4d1a:	4b02      	ldr	r3, [pc, #8]	; (d4d24 <os_mutex_recursive_create+0xc>)
   d4d1c:	681b      	ldr	r3, [r3, #0]
   d4d1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4d20:	9301      	str	r3, [sp, #4]
   d4d22:	bd08      	pop	{r3, pc}
   d4d24:	00030248 	.word	0x00030248

000d4d28 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4d28:	b508      	push	{r3, lr}
   d4d2a:	4b02      	ldr	r3, [pc, #8]	; (d4d34 <inet_inet_ntop+0xc>)
   d4d2c:	681b      	ldr	r3, [r3, #0]
   d4d2e:	695b      	ldr	r3, [r3, #20]
   d4d30:	9301      	str	r3, [sp, #4]
   d4d32:	bd08      	pop	{r3, pc}
   d4d34:	00030264 	.word	0x00030264

000d4d38 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d4d38:	b508      	push	{r3, lr}
   d4d3a:	4b02      	ldr	r3, [pc, #8]	; (d4d44 <hal_usart_init+0xc>)
   d4d3c:	681b      	ldr	r3, [r3, #0]
   d4d3e:	681b      	ldr	r3, [r3, #0]
   d4d40:	9301      	str	r3, [sp, #4]
   d4d42:	bd08      	pop	{r3, pc}
   d4d44:	0003023c 	.word	0x0003023c

000d4d48 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d4d48:	b508      	push	{r3, lr}
   d4d4a:	4b02      	ldr	r3, [pc, #8]	; (d4d54 <hal_usart_write+0xc>)
   d4d4c:	681b      	ldr	r3, [r3, #0]
   d4d4e:	68db      	ldr	r3, [r3, #12]
   d4d50:	9301      	str	r3, [sp, #4]
   d4d52:	bd08      	pop	{r3, pc}
   d4d54:	0003023c 	.word	0x0003023c

000d4d58 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d4d58:	b508      	push	{r3, lr}
   d4d5a:	4b02      	ldr	r3, [pc, #8]	; (d4d64 <hal_usart_available+0xc>)
   d4d5c:	681b      	ldr	r3, [r3, #0]
   d4d5e:	691b      	ldr	r3, [r3, #16]
   d4d60:	9301      	str	r3, [sp, #4]
   d4d62:	bd08      	pop	{r3, pc}
   d4d64:	0003023c 	.word	0x0003023c

000d4d68 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d4d68:	b508      	push	{r3, lr}
   d4d6a:	4b02      	ldr	r3, [pc, #8]	; (d4d74 <hal_usart_read+0xc>)
   d4d6c:	681b      	ldr	r3, [r3, #0]
   d4d6e:	695b      	ldr	r3, [r3, #20]
   d4d70:	9301      	str	r3, [sp, #4]
   d4d72:	bd08      	pop	{r3, pc}
   d4d74:	0003023c 	.word	0x0003023c

000d4d78 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d4d78:	b508      	push	{r3, lr}
   d4d7a:	4b02      	ldr	r3, [pc, #8]	; (d4d84 <hal_usart_peek+0xc>)
   d4d7c:	681b      	ldr	r3, [r3, #0]
   d4d7e:	699b      	ldr	r3, [r3, #24]
   d4d80:	9301      	str	r3, [sp, #4]
   d4d82:	bd08      	pop	{r3, pc}
   d4d84:	0003023c 	.word	0x0003023c

000d4d88 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d4d88:	b508      	push	{r3, lr}
   d4d8a:	4b02      	ldr	r3, [pc, #8]	; (d4d94 <hal_usart_flush+0xc>)
   d4d8c:	681b      	ldr	r3, [r3, #0]
   d4d8e:	69db      	ldr	r3, [r3, #28]
   d4d90:	9301      	str	r3, [sp, #4]
   d4d92:	bd08      	pop	{r3, pc}
   d4d94:	0003023c 	.word	0x0003023c

000d4d98 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d4d98:	b508      	push	{r3, lr}
   d4d9a:	4b02      	ldr	r3, [pc, #8]	; (d4da4 <hal_usart_is_enabled+0xc>)
   d4d9c:	681b      	ldr	r3, [r3, #0]
   d4d9e:	6a1b      	ldr	r3, [r3, #32]
   d4da0:	9301      	str	r3, [sp, #4]
   d4da2:	bd08      	pop	{r3, pc}
   d4da4:	0003023c 	.word	0x0003023c

000d4da8 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d4da8:	b508      	push	{r3, lr}
   d4daa:	4b02      	ldr	r3, [pc, #8]	; (d4db4 <hal_usart_available_data_for_write+0xc>)
   d4dac:	681b      	ldr	r3, [r3, #0]
   d4dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4db0:	9301      	str	r3, [sp, #4]
   d4db2:	bd08      	pop	{r3, pc}
   d4db4:	0003023c 	.word	0x0003023c

000d4db8 <hal_i2c_set_speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   d4db8:	b508      	push	{r3, lr}
   d4dba:	4b02      	ldr	r3, [pc, #8]	; (d4dc4 <hal_i2c_set_speed+0xc>)
   d4dbc:	681b      	ldr	r3, [r3, #0]
   d4dbe:	681b      	ldr	r3, [r3, #0]
   d4dc0:	9301      	str	r3, [sp, #4]
   d4dc2:	bd08      	pop	{r3, pc}
   d4dc4:	00030228 	.word	0x00030228

000d4dc8 <hal_i2c_begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d4dc8:	b508      	push	{r3, lr}
   d4dca:	4b02      	ldr	r3, [pc, #8]	; (d4dd4 <hal_i2c_begin+0xc>)
   d4dcc:	681b      	ldr	r3, [r3, #0]
   d4dce:	68db      	ldr	r3, [r3, #12]
   d4dd0:	9301      	str	r3, [sp, #4]
   d4dd2:	bd08      	pop	{r3, pc}
   d4dd4:	00030228 	.word	0x00030228

000d4dd8 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d4dd8:	b508      	push	{r3, lr}
   d4dda:	4b02      	ldr	r3, [pc, #8]	; (d4de4 <hal_i2c_begin_transmission+0xc>)
   d4ddc:	681b      	ldr	r3, [r3, #0]
   d4dde:	699b      	ldr	r3, [r3, #24]
   d4de0:	9301      	str	r3, [sp, #4]
   d4de2:	bd08      	pop	{r3, pc}
   d4de4:	00030228 	.word	0x00030228

000d4de8 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d4de8:	b508      	push	{r3, lr}
   d4dea:	4b02      	ldr	r3, [pc, #8]	; (d4df4 <hal_i2c_end_transmission+0xc>)
   d4dec:	681b      	ldr	r3, [r3, #0]
   d4dee:	69db      	ldr	r3, [r3, #28]
   d4df0:	9301      	str	r3, [sp, #4]
   d4df2:	bd08      	pop	{r3, pc}
   d4df4:	00030228 	.word	0x00030228

000d4df8 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d4df8:	b508      	push	{r3, lr}
   d4dfa:	4b02      	ldr	r3, [pc, #8]	; (d4e04 <hal_i2c_write+0xc>)
   d4dfc:	681b      	ldr	r3, [r3, #0]
   d4dfe:	6a1b      	ldr	r3, [r3, #32]
   d4e00:	9301      	str	r3, [sp, #4]
   d4e02:	bd08      	pop	{r3, pc}
   d4e04:	00030228 	.word	0x00030228

000d4e08 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d4e08:	b508      	push	{r3, lr}
   d4e0a:	4b02      	ldr	r3, [pc, #8]	; (d4e14 <hal_i2c_available+0xc>)
   d4e0c:	681b      	ldr	r3, [r3, #0]
   d4e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4e10:	9301      	str	r3, [sp, #4]
   d4e12:	bd08      	pop	{r3, pc}
   d4e14:	00030228 	.word	0x00030228

000d4e18 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d4e18:	b508      	push	{r3, lr}
   d4e1a:	4b02      	ldr	r3, [pc, #8]	; (d4e24 <hal_i2c_read+0xc>)
   d4e1c:	681b      	ldr	r3, [r3, #0]
   d4e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4e20:	9301      	str	r3, [sp, #4]
   d4e22:	bd08      	pop	{r3, pc}
   d4e24:	00030228 	.word	0x00030228

000d4e28 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d4e28:	b508      	push	{r3, lr}
   d4e2a:	4b02      	ldr	r3, [pc, #8]	; (d4e34 <hal_i2c_peek+0xc>)
   d4e2c:	681b      	ldr	r3, [r3, #0]
   d4e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4e30:	9301      	str	r3, [sp, #4]
   d4e32:	bd08      	pop	{r3, pc}
   d4e34:	00030228 	.word	0x00030228

000d4e38 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d4e38:	b508      	push	{r3, lr}
   d4e3a:	4b02      	ldr	r3, [pc, #8]	; (d4e44 <hal_i2c_flush+0xc>)
   d4e3c:	681b      	ldr	r3, [r3, #0]
   d4e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4e40:	9301      	str	r3, [sp, #4]
   d4e42:	bd08      	pop	{r3, pc}
   d4e44:	00030228 	.word	0x00030228

000d4e48 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d4e48:	b508      	push	{r3, lr}
   d4e4a:	4b02      	ldr	r3, [pc, #8]	; (d4e54 <hal_i2c_is_enabled+0xc>)
   d4e4c:	681b      	ldr	r3, [r3, #0]
   d4e4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4e50:	9301      	str	r3, [sp, #4]
   d4e52:	bd08      	pop	{r3, pc}
   d4e54:	00030228 	.word	0x00030228

000d4e58 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d4e58:	b508      	push	{r3, lr}
   d4e5a:	4b02      	ldr	r3, [pc, #8]	; (d4e64 <hal_i2c_init+0xc>)
   d4e5c:	681b      	ldr	r3, [r3, #0]
   d4e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4e60:	9301      	str	r3, [sp, #4]
   d4e62:	bd08      	pop	{r3, pc}
   d4e64:	00030228 	.word	0x00030228

000d4e68 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d4e68:	b508      	push	{r3, lr}
   d4e6a:	4b02      	ldr	r3, [pc, #8]	; (d4e74 <hal_i2c_request_ex+0xc>)
   d4e6c:	681b      	ldr	r3, [r3, #0]
   d4e6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4e70:	9301      	str	r3, [sp, #4]
   d4e72:	bd08      	pop	{r3, pc}
   d4e74:	00030228 	.word	0x00030228

000d4e78 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d4e78:	b508      	push	{r3, lr}
   d4e7a:	4b02      	ldr	r3, [pc, #8]	; (d4e84 <hal_spi_init+0xc>)
   d4e7c:	681b      	ldr	r3, [r3, #0]
   d4e7e:	69db      	ldr	r3, [r3, #28]
   d4e80:	9301      	str	r3, [sp, #4]
   d4e82:	bd08      	pop	{r3, pc}
   d4e84:	00030230 	.word	0x00030230

000d4e88 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d4e88:	b508      	push	{r3, lr}
   d4e8a:	4b02      	ldr	r3, [pc, #8]	; (d4e94 <hal_spi_is_enabled+0xc>)
   d4e8c:	681b      	ldr	r3, [r3, #0]
   d4e8e:	6a1b      	ldr	r3, [r3, #32]
   d4e90:	9301      	str	r3, [sp, #4]
   d4e92:	bd08      	pop	{r3, pc}
   d4e94:	00030230 	.word	0x00030230

000d4e98 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4e98:	b508      	push	{r3, lr}
   d4e9a:	4b02      	ldr	r3, [pc, #8]	; (d4ea4 <HAL_USB_USART_Init+0xc>)
   d4e9c:	681b      	ldr	r3, [r3, #0]
   d4e9e:	681b      	ldr	r3, [r3, #0]
   d4ea0:	9301      	str	r3, [sp, #4]
   d4ea2:	bd08      	pop	{r3, pc}
   d4ea4:	0003024c 	.word	0x0003024c

000d4ea8 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4ea8:	b508      	push	{r3, lr}
   d4eaa:	4b02      	ldr	r3, [pc, #8]	; (d4eb4 <HAL_USB_USART_Begin+0xc>)
   d4eac:	681b      	ldr	r3, [r3, #0]
   d4eae:	685b      	ldr	r3, [r3, #4]
   d4eb0:	9301      	str	r3, [sp, #4]
   d4eb2:	bd08      	pop	{r3, pc}
   d4eb4:	0003024c 	.word	0x0003024c

000d4eb8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4eb8:	b508      	push	{r3, lr}
   d4eba:	4b02      	ldr	r3, [pc, #8]	; (d4ec4 <HAL_USB_USART_Available_Data+0xc>)
   d4ebc:	681b      	ldr	r3, [r3, #0]
   d4ebe:	691b      	ldr	r3, [r3, #16]
   d4ec0:	9301      	str	r3, [sp, #4]
   d4ec2:	bd08      	pop	{r3, pc}
   d4ec4:	0003024c 	.word	0x0003024c

000d4ec8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4ec8:	b508      	push	{r3, lr}
   d4eca:	4b02      	ldr	r3, [pc, #8]	; (d4ed4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4ecc:	681b      	ldr	r3, [r3, #0]
   d4ece:	695b      	ldr	r3, [r3, #20]
   d4ed0:	9301      	str	r3, [sp, #4]
   d4ed2:	bd08      	pop	{r3, pc}
   d4ed4:	0003024c 	.word	0x0003024c

000d4ed8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4ed8:	b508      	push	{r3, lr}
   d4eda:	4b02      	ldr	r3, [pc, #8]	; (d4ee4 <HAL_USB_USART_Receive_Data+0xc>)
   d4edc:	681b      	ldr	r3, [r3, #0]
   d4ede:	699b      	ldr	r3, [r3, #24]
   d4ee0:	9301      	str	r3, [sp, #4]
   d4ee2:	bd08      	pop	{r3, pc}
   d4ee4:	0003024c 	.word	0x0003024c

000d4ee8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4ee8:	b508      	push	{r3, lr}
   d4eea:	4b02      	ldr	r3, [pc, #8]	; (d4ef4 <HAL_USB_USART_Send_Data+0xc>)
   d4eec:	681b      	ldr	r3, [r3, #0]
   d4eee:	69db      	ldr	r3, [r3, #28]
   d4ef0:	9301      	str	r3, [sp, #4]
   d4ef2:	bd08      	pop	{r3, pc}
   d4ef4:	0003024c 	.word	0x0003024c

000d4ef8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4ef8:	b508      	push	{r3, lr}
   d4efa:	4b02      	ldr	r3, [pc, #8]	; (d4f04 <HAL_USB_USART_Flush_Data+0xc>)
   d4efc:	681b      	ldr	r3, [r3, #0]
   d4efe:	6a1b      	ldr	r3, [r3, #32]
   d4f00:	9301      	str	r3, [sp, #4]
   d4f02:	bd08      	pop	{r3, pc}
   d4f04:	0003024c 	.word	0x0003024c

000d4f08 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4f08:	b508      	push	{r3, lr}
   d4f0a:	4b02      	ldr	r3, [pc, #8]	; (d4f14 <set_system_mode+0xc>)
   d4f0c:	681b      	ldr	r3, [r3, #0]
   d4f0e:	685b      	ldr	r3, [r3, #4]
   d4f10:	9301      	str	r3, [sp, #4]
   d4f12:	bd08      	pop	{r3, pc}
   d4f14:	00030220 	.word	0x00030220

000d4f18 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4f18:	b508      	push	{r3, lr}
   d4f1a:	4b02      	ldr	r3, [pc, #8]	; (d4f24 <system_delay_ms+0xc>)
   d4f1c:	681b      	ldr	r3, [r3, #0]
   d4f1e:	695b      	ldr	r3, [r3, #20]
   d4f20:	9301      	str	r3, [sp, #4]
   d4f22:	bd08      	pop	{r3, pc}
   d4f24:	00030220 	.word	0x00030220

000d4f28 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4f28:	b508      	push	{r3, lr}
   d4f2a:	4b03      	ldr	r3, [pc, #12]	; (d4f38 <system_ctrl_set_app_request_handler+0x10>)
   d4f2c:	681b      	ldr	r3, [r3, #0]
   d4f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4f32:	9301      	str	r3, [sp, #4]
   d4f34:	bd08      	pop	{r3, pc}
   d4f36:	0000      	.short	0x0000
   d4f38:	00030220 	.word	0x00030220

000d4f3c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4f3c:	b508      	push	{r3, lr}
   d4f3e:	4b03      	ldr	r3, [pc, #12]	; (d4f4c <system_ctrl_set_result+0x10>)
   d4f40:	681b      	ldr	r3, [r3, #0]
   d4f42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4f46:	9301      	str	r3, [sp, #4]
   d4f48:	bd08      	pop	{r3, pc}
   d4f4a:	0000      	.short	0x0000
   d4f4c:	00030220 	.word	0x00030220

000d4f50 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4f50:	b508      	push	{r3, lr}
   d4f52:	4b02      	ldr	r3, [pc, #8]	; (d4f5c <network_connect+0xc>)
   d4f54:	681b      	ldr	r3, [r3, #0]
   d4f56:	685b      	ldr	r3, [r3, #4]
   d4f58:	9301      	str	r3, [sp, #4]
   d4f5a:	bd08      	pop	{r3, pc}
   d4f5c:	00030240 	.word	0x00030240

000d4f60 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4f60:	b508      	push	{r3, lr}
   d4f62:	4b02      	ldr	r3, [pc, #8]	; (d4f6c <network_connecting+0xc>)
   d4f64:	681b      	ldr	r3, [r3, #0]
   d4f66:	689b      	ldr	r3, [r3, #8]
   d4f68:	9301      	str	r3, [sp, #4]
   d4f6a:	bd08      	pop	{r3, pc}
   d4f6c:	00030240 	.word	0x00030240

000d4f70 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4f70:	b508      	push	{r3, lr}
   d4f72:	4b02      	ldr	r3, [pc, #8]	; (d4f7c <network_disconnect+0xc>)
   d4f74:	681b      	ldr	r3, [r3, #0]
   d4f76:	68db      	ldr	r3, [r3, #12]
   d4f78:	9301      	str	r3, [sp, #4]
   d4f7a:	bd08      	pop	{r3, pc}
   d4f7c:	00030240 	.word	0x00030240

000d4f80 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4f80:	b508      	push	{r3, lr}
   d4f82:	4b02      	ldr	r3, [pc, #8]	; (d4f8c <network_ready+0xc>)
   d4f84:	681b      	ldr	r3, [r3, #0]
   d4f86:	691b      	ldr	r3, [r3, #16]
   d4f88:	9301      	str	r3, [sp, #4]
   d4f8a:	bd08      	pop	{r3, pc}
   d4f8c:	00030240 	.word	0x00030240

000d4f90 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4f90:	b508      	push	{r3, lr}
   d4f92:	4b02      	ldr	r3, [pc, #8]	; (d4f9c <network_on+0xc>)
   d4f94:	681b      	ldr	r3, [r3, #0]
   d4f96:	695b      	ldr	r3, [r3, #20]
   d4f98:	9301      	str	r3, [sp, #4]
   d4f9a:	bd08      	pop	{r3, pc}
   d4f9c:	00030240 	.word	0x00030240

000d4fa0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4fa0:	b508      	push	{r3, lr}
   d4fa2:	4b02      	ldr	r3, [pc, #8]	; (d4fac <network_off+0xc>)
   d4fa4:	681b      	ldr	r3, [r3, #0]
   d4fa6:	699b      	ldr	r3, [r3, #24]
   d4fa8:	9301      	str	r3, [sp, #4]
   d4faa:	bd08      	pop	{r3, pc}
   d4fac:	00030240 	.word	0x00030240

000d4fb0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4fb0:	b508      	push	{r3, lr}
   d4fb2:	4b02      	ldr	r3, [pc, #8]	; (d4fbc <network_listen+0xc>)
   d4fb4:	681b      	ldr	r3, [r3, #0]
   d4fb6:	69db      	ldr	r3, [r3, #28]
   d4fb8:	9301      	str	r3, [sp, #4]
   d4fba:	bd08      	pop	{r3, pc}
   d4fbc:	00030240 	.word	0x00030240

000d4fc0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4fc0:	b508      	push	{r3, lr}
   d4fc2:	4b02      	ldr	r3, [pc, #8]	; (d4fcc <network_listening+0xc>)
   d4fc4:	681b      	ldr	r3, [r3, #0]
   d4fc6:	6a1b      	ldr	r3, [r3, #32]
   d4fc8:	9301      	str	r3, [sp, #4]
   d4fca:	bd08      	pop	{r3, pc}
   d4fcc:	00030240 	.word	0x00030240

000d4fd0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4fd0:	b508      	push	{r3, lr}
   d4fd2:	4b02      	ldr	r3, [pc, #8]	; (d4fdc <network_set_listen_timeout+0xc>)
   d4fd4:	681b      	ldr	r3, [r3, #0]
   d4fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4fd8:	9301      	str	r3, [sp, #4]
   d4fda:	bd08      	pop	{r3, pc}
   d4fdc:	00030240 	.word	0x00030240

000d4fe0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4fe0:	b508      	push	{r3, lr}
   d4fe2:	4b02      	ldr	r3, [pc, #8]	; (d4fec <network_get_listen_timeout+0xc>)
   d4fe4:	681b      	ldr	r3, [r3, #0]
   d4fe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4fe8:	9301      	str	r3, [sp, #4]
   d4fea:	bd08      	pop	{r3, pc}
   d4fec:	00030240 	.word	0x00030240

000d4ff0 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d4ff0:	b508      	push	{r3, lr}
   d4ff2:	4b02      	ldr	r3, [pc, #8]	; (d4ffc <network_is_on+0xc>)
   d4ff4:	681b      	ldr	r3, [r3, #0]
   d4ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4ff8:	9301      	str	r3, [sp, #4]
   d4ffa:	bd08      	pop	{r3, pc}
   d4ffc:	00030240 	.word	0x00030240

000d5000 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d5000:	b508      	push	{r3, lr}
   d5002:	4b02      	ldr	r3, [pc, #8]	; (d500c <network_is_off+0xc>)
   d5004:	681b      	ldr	r3, [r3, #0]
   d5006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5008:	9301      	str	r3, [sp, #4]
   d500a:	bd08      	pop	{r3, pc}
   d500c:	00030240 	.word	0x00030240

000d5010 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5010:	b508      	push	{r3, lr}
   d5012:	4b02      	ldr	r3, [pc, #8]	; (d501c <spark_set_random_seed_from_cloud_handler+0xc>)
   d5014:	681b      	ldr	r3, [r3, #0]
   d5016:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5018:	9301      	str	r3, [sp, #4]
   d501a:	bd08      	pop	{r3, pc}
   d501c:	00030244 	.word	0x00030244

000d5020 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5020:	b508      	push	{r3, lr}
   d5022:	4b02      	ldr	r3, [pc, #8]	; (d502c <malloc+0xc>)
   d5024:	681b      	ldr	r3, [r3, #0]
   d5026:	681b      	ldr	r3, [r3, #0]
   d5028:	9301      	str	r3, [sp, #4]
   d502a:	bd08      	pop	{r3, pc}
   d502c:	0003021c 	.word	0x0003021c

000d5030 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5030:	b508      	push	{r3, lr}
   d5032:	4b02      	ldr	r3, [pc, #8]	; (d503c <free+0xc>)
   d5034:	681b      	ldr	r3, [r3, #0]
   d5036:	685b      	ldr	r3, [r3, #4]
   d5038:	9301      	str	r3, [sp, #4]
   d503a:	bd08      	pop	{r3, pc}
   d503c:	0003021c 	.word	0x0003021c

000d5040 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d5040:	b508      	push	{r3, lr}
   d5042:	4b02      	ldr	r3, [pc, #8]	; (d504c <newlib_impure_ptr_callback+0xc>)
   d5044:	681b      	ldr	r3, [r3, #0]
   d5046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5048:	9301      	str	r3, [sp, #4]
   d504a:	bd08      	pop	{r3, pc}
   d504c:	0003021c 	.word	0x0003021c

000d5050 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5050:	2200      	movs	r2, #0
   d5052:	6840      	ldr	r0, [r0, #4]
   d5054:	4611      	mov	r1, r2
   d5056:	f7ff bfb3 	b.w	d4fc0 <network_listening>

000d505a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d505a:	2200      	movs	r2, #0
   d505c:	6840      	ldr	r0, [r0, #4]
   d505e:	4611      	mov	r1, r2
   d5060:	f7ff bfbe 	b.w	d4fe0 <network_get_listen_timeout>

000d5064 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d5064:	6840      	ldr	r0, [r0, #4]
   d5066:	2200      	movs	r2, #0
   d5068:	f7ff bfb2 	b.w	d4fd0 <network_set_listen_timeout>

000d506c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d506c:	6840      	ldr	r0, [r0, #4]
   d506e:	2200      	movs	r2, #0
   d5070:	f081 0101 	eor.w	r1, r1, #1
   d5074:	f7ff bf9c 	b.w	d4fb0 <network_listen>

000d5078 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d5078:	2300      	movs	r3, #0
   d507a:	6840      	ldr	r0, [r0, #4]
   d507c:	461a      	mov	r2, r3
   d507e:	4619      	mov	r1, r3
   d5080:	f7ff bf8e 	b.w	d4fa0 <network_off>

000d5084 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d5084:	2300      	movs	r3, #0
   d5086:	6840      	ldr	r0, [r0, #4]
   d5088:	461a      	mov	r2, r3
   d508a:	4619      	mov	r1, r3
   d508c:	f7ff bf80 	b.w	d4f90 <network_on>

000d5090 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5090:	2200      	movs	r2, #0
   d5092:	6840      	ldr	r0, [r0, #4]
   d5094:	4611      	mov	r1, r2
   d5096:	f7ff bf73 	b.w	d4f80 <network_ready>

000d509a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d509a:	2200      	movs	r2, #0
   d509c:	6840      	ldr	r0, [r0, #4]
   d509e:	4611      	mov	r1, r2
   d50a0:	f7ff bf5e 	b.w	d4f60 <network_connecting>

000d50a4 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d50a4:	6840      	ldr	r0, [r0, #4]
   d50a6:	2200      	movs	r2, #0
   d50a8:	2102      	movs	r1, #2
   d50aa:	f7ff bf61 	b.w	d4f70 <network_disconnect>

000d50ae <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d50ae:	2300      	movs	r3, #0
   d50b0:	6840      	ldr	r0, [r0, #4]
   d50b2:	461a      	mov	r2, r3
   d50b4:	f7ff bf4c 	b.w	d4f50 <network_connect>

000d50b8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d50b8:	4b02      	ldr	r3, [pc, #8]	; (d50c4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d50ba:	2203      	movs	r2, #3
   d50bc:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d50be:	4a02      	ldr	r2, [pc, #8]	; (d50c8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d50c0:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d50c2:	4770      	bx	lr
   d50c4:	2003e5a8 	.word	0x2003e5a8
   d50c8:	000d5d1c 	.word	0x000d5d1c

000d50cc <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d50cc:	b510      	push	{r4, lr}
   d50ce:	4604      	mov	r4, r0
   d50d0:	4608      	mov	r0, r1
{
    _spi = spi;
   d50d2:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d50d4:	f7ff fed0 	bl	d4e78 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d50d8:	2300      	movs	r3, #0
   d50da:	6063      	str	r3, [r4, #4]
}
   d50dc:	4620      	mov	r0, r4
   d50de:	bd10      	pop	{r4, pc}

000d50e0 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d50e0:	4b05      	ldr	r3, [pc, #20]	; (d50f8 <_GLOBAL__sub_I_System+0x18>)
   d50e2:	2202      	movs	r2, #2
   d50e4:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d50e6:	4b05      	ldr	r3, [pc, #20]	; (d50fc <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   d50e8:	4a05      	ldr	r2, [pc, #20]	; (d5100 <_GLOBAL__sub_I_System+0x20>)
   d50ea:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   d50ec:	2000      	movs	r0, #0
   d50ee:	6018      	str	r0, [r3, #0]
   d50f0:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
   d50f2:	7198      	strb	r0, [r3, #6]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d50f4:	f7ff bf08 	b.w	d4f08 <set_system_mode>
   d50f8:	2003e5bc 	.word	0x2003e5bc
   d50fc:	2003e5b0 	.word	0x2003e5b0
   d5100:	ffff0000 	.word	0xffff0000

000d5104 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5104:	4802      	ldr	r0, [pc, #8]	; (d5110 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d5106:	2300      	movs	r3, #0
   d5108:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d510a:	f7ff be05 	b.w	d4d18 <os_mutex_recursive_create>
   d510e:	bf00      	nop
   d5110:	2003e5c0 	.word	0x2003e5c0

000d5114 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5116:	4606      	mov	r6, r0
   d5118:	460d      	mov	r5, r1
  size_t n = 0;
   d511a:	188f      	adds	r7, r1, r2
   d511c:	2400      	movs	r4, #0
  while (size--) {
   d511e:	42bd      	cmp	r5, r7
   d5120:	d00c      	beq.n	d513c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5122:	6833      	ldr	r3, [r6, #0]
   d5124:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5128:	689b      	ldr	r3, [r3, #8]
   d512a:	4630      	mov	r0, r6
   d512c:	4798      	blx	r3
     if (chunk>=0)
   d512e:	1e03      	subs	r3, r0, #0
   d5130:	db01      	blt.n	d5136 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5132:	441c      	add	r4, r3
  while (size--) {
   d5134:	e7f3      	b.n	d511e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5136:	2c00      	cmp	r4, #0
   d5138:	bf08      	it	eq
   d513a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d513c:	4620      	mov	r0, r4
   d513e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5140 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5140:	b513      	push	{r0, r1, r4, lr}
   d5142:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d5144:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d5146:	b159      	cbz	r1, d5160 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d5148:	9101      	str	r1, [sp, #4]
   d514a:	f000 fcdd 	bl	d5b08 <strlen>
   d514e:	6823      	ldr	r3, [r4, #0]
   d5150:	9901      	ldr	r1, [sp, #4]
   d5152:	68db      	ldr	r3, [r3, #12]
   d5154:	4602      	mov	r2, r0
   d5156:	4620      	mov	r0, r4
    }
   d5158:	b002      	add	sp, #8
   d515a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d515e:	4718      	bx	r3
    }
   d5160:	b002      	add	sp, #8
   d5162:	bd10      	pop	{r4, pc}

000d5164 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5164:	6803      	ldr	r3, [r0, #0]
   d5166:	689b      	ldr	r3, [r3, #8]
   d5168:	4718      	bx	r3

000d516a <_ZN5Print5printEPK19__FlashStringHelper>:
 {
   return x.printTo(*this);
 }

size_t Print::print(const __FlashStringHelper* str)
{
   d516a:	b508      	push	{r3, lr}
  return write(str);
   d516c:	f7ff ffe8 	bl	d5140 <_ZN5Print5writeEPKc>
  return print(reinterpret_cast<const char*>(str));
}
   d5170:	bd08      	pop	{r3, pc}

000d5172 <_ZN5Print7printlnEv>:

size_t Print::println(void)
{
   d5172:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d5174:	210d      	movs	r1, #13
{
   d5176:	4605      	mov	r5, r0
  size_t n = print('\r');
   d5178:	f7ff fff4 	bl	d5164 <_ZN5Print5printEc>
  n += print('\n');
   d517c:	210a      	movs	r1, #10
  size_t n = print('\r');
   d517e:	4604      	mov	r4, r0
  n += print('\n');
   d5180:	4628      	mov	r0, r5
   d5182:	f7ff ffef 	bl	d5164 <_ZN5Print5printEc>
  return n;
}
   d5186:	4420      	add	r0, r4
   d5188:	bd38      	pop	{r3, r4, r5, pc}

000d518a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d518a:	b538      	push	{r3, r4, r5, lr}
   d518c:	4605      	mov	r5, r0
  return write(str);
   d518e:	f7ff ffd7 	bl	d5140 <_ZN5Print5writeEPKc>
   d5192:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d5194:	4628      	mov	r0, r5
   d5196:	f7ff ffec 	bl	d5172 <_ZN5Print7printlnEv>
  return n;
}
   d519a:	4420      	add	r0, r4
   d519c:	bd38      	pop	{r3, r4, r5, pc}

000d519e <_ZN5Print7printlnEPK19__FlashStringHelper>:
   return n;
 }

size_t Print::println(const __FlashStringHelper* str)
{
  return println(reinterpret_cast<const char*>(str));
   d519e:	f7ff bff4 	b.w	d518a <_ZN5Print7printlnEPKc>

000d51a2 <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d51a2:	b530      	push	{r4, r5, lr}
   d51a4:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d51a6:	2300      	movs	r3, #0
   d51a8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d51ac:	2a01      	cmp	r2, #1
   d51ae:	bf98      	it	ls
   d51b0:	220a      	movls	r2, #10
   d51b2:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d51b4:	460d      	mov	r5, r1
   d51b6:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d51ba:	fb01 5312 	mls	r3, r1, r2, r5
   d51be:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d51c2:	2b09      	cmp	r3, #9
   d51c4:	bf94      	ite	ls
   d51c6:	3330      	addls	r3, #48	; 0x30
   d51c8:	3337      	addhi	r3, #55	; 0x37
   d51ca:	b2db      	uxtb	r3, r3
  } while(n);
   d51cc:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d51ce:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d51d2:	d9ef      	bls.n	d51b4 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d51d4:	4621      	mov	r1, r4
   d51d6:	f7ff ffb3 	bl	d5140 <_ZN5Print5writeEPKc>
}
   d51da:	b00b      	add	sp, #44	; 0x2c
   d51dc:	bd30      	pop	{r4, r5, pc}
	...

000d51e0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d51e0:	4b01      	ldr	r3, [pc, #4]	; (d51e8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d51e2:	4a02      	ldr	r2, [pc, #8]	; (d51ec <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d51e4:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d51e6:	4770      	bx	lr
   d51e8:	2003e5c4 	.word	0x2003e5c4
   d51ec:	000d5d50 	.word	0x000d5d50

000d51f0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d51f0:	4b02      	ldr	r3, [pc, #8]	; (d51fc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d51f2:	681a      	ldr	r2, [r3, #0]
   d51f4:	4b02      	ldr	r3, [pc, #8]	; (d5200 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d51f6:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d51f8:	4770      	bx	lr
   d51fa:	bf00      	nop
   d51fc:	2003deb0 	.word	0x2003deb0
   d5200:	2003e5c8 	.word	0x2003e5c8

000d5204 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d5204:	2100      	movs	r1, #0
   d5206:	f7ff be87 	b.w	d4f18 <system_delay_ms>
	...

000d520c <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   d520c:	4b01      	ldr	r3, [pc, #4]	; (d5214 <_GLOBAL__sub_I_RGB+0x8>)
   d520e:	2200      	movs	r2, #0
   d5210:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   d5212:	4770      	bx	lr
   d5214:	2003e5cc 	.word	0x2003e5cc

000d5218 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d5218:	4b01      	ldr	r3, [pc, #4]	; (d5220 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d521a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d521c:	4770      	bx	lr
   d521e:	bf00      	nop
   d5220:	2003deb4 	.word	0x2003deb4

000d5224 <serialEventRun>:
{
   d5224:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d5226:	4b0b      	ldr	r3, [pc, #44]	; (d5254 <serialEventRun+0x30>)
   d5228:	b143      	cbz	r3, d523c <serialEventRun+0x18>
   d522a:	f000 f961 	bl	d54f0 <_Z16_fetch_usbserialv>
   d522e:	6803      	ldr	r3, [r0, #0]
   d5230:	691b      	ldr	r3, [r3, #16]
   d5232:	4798      	blx	r3
   d5234:	2800      	cmp	r0, #0
   d5236:	dd01      	ble.n	d523c <serialEventRun+0x18>
        serialEvent();
   d5238:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d523c:	4b06      	ldr	r3, [pc, #24]	; (d5258 <serialEventRun+0x34>)
   d523e:	b143      	cbz	r3, d5252 <serialEventRun+0x2e>
   d5240:	f000 f9d0 	bl	d55e4 <_Z22__fetch_global_Serial1v>
   d5244:	6803      	ldr	r3, [r0, #0]
   d5246:	691b      	ldr	r3, [r3, #16]
   d5248:	4798      	blx	r3
   d524a:	2800      	cmp	r0, #0
   d524c:	dd01      	ble.n	d5252 <serialEventRun+0x2e>
        serialEvent1();
   d524e:	f3af 8000 	nop.w
}
   d5252:	bd08      	pop	{r3, pc}
	...

000d525c <_post_loop>:
{
   d525c:	b508      	push	{r3, lr}
	serialEventRun();
   d525e:	f7ff ffe1 	bl	d5224 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5262:	f7ff fd51 	bl	d4d08 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d5266:	4b01      	ldr	r3, [pc, #4]	; (d526c <_post_loop+0x10>)
   d5268:	6018      	str	r0, [r3, #0]
}
   d526a:	bd08      	pop	{r3, pc}
   d526c:	2003e738 	.word	0x2003e738

000d5270 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d5270:	4805      	ldr	r0, [pc, #20]	; (d5288 <_Z33system_initialize_user_backup_ramv+0x18>)
   d5272:	4a06      	ldr	r2, [pc, #24]	; (d528c <_Z33system_initialize_user_backup_ramv+0x1c>)
   d5274:	4906      	ldr	r1, [pc, #24]	; (d5290 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   d5276:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d5278:	1a12      	subs	r2, r2, r0
   d527a:	f000 fc0b 	bl	d5a94 <memcpy>
    __backup_sram_signature = signature;
   d527e:	4b05      	ldr	r3, [pc, #20]	; (d5294 <_Z33system_initialize_user_backup_ramv+0x24>)
   d5280:	4a05      	ldr	r2, [pc, #20]	; (d5298 <_Z33system_initialize_user_backup_ramv+0x28>)
   d5282:	601a      	str	r2, [r3, #0]
}
   d5284:	bd08      	pop	{r3, pc}
   d5286:	bf00      	nop
   d5288:	2003f400 	.word	0x2003f400
   d528c:	2003f404 	.word	0x2003f404
   d5290:	000d5eb0 	.word	0x000d5eb0
   d5294:	2003f400 	.word	0x2003f400
   d5298:	9a271c1e 	.word	0x9a271c1e

000d529c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d529c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d529e:	2300      	movs	r3, #0
   d52a0:	9300      	str	r3, [sp, #0]
   d52a2:	461a      	mov	r2, r3
   d52a4:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d52a8:	f7ff fe48 	bl	d4f3c <system_ctrl_set_result>
}
   d52ac:	b003      	add	sp, #12
   d52ae:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d52b4 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d52b4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d52b6:	8843      	ldrh	r3, [r0, #2]
   d52b8:	2b0a      	cmp	r3, #10
   d52ba:	d008      	beq.n	d52ce <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d52bc:	2b50      	cmp	r3, #80	; 0x50
   d52be:	d10b      	bne.n	d52d8 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d52c0:	4b09      	ldr	r3, [pc, #36]	; (d52e8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d52c2:	681b      	ldr	r3, [r3, #0]
   d52c4:	b14b      	cbz	r3, d52da <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d52c6:	b003      	add	sp, #12
   d52c8:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d52cc:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d52ce:	f7ff ffe5 	bl	d529c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d52d2:	b003      	add	sp, #12
   d52d4:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d52d8:	2300      	movs	r3, #0
   d52da:	9300      	str	r3, [sp, #0]
   d52dc:	461a      	mov	r2, r3
   d52de:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d52e2:	f7ff fe2b 	bl	d4f3c <system_ctrl_set_result>
}
   d52e6:	e7f4      	b.n	d52d2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d52e8:	2003e5e0 	.word	0x2003e5e0

000d52ec <module_user_init_hook>:
{
   d52ec:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d52ee:	4812      	ldr	r0, [pc, #72]	; (d5338 <module_user_init_hook+0x4c>)
   d52f0:	2100      	movs	r1, #0
   d52f2:	f7ff fea5 	bl	d5040 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   d52f6:	4b11      	ldr	r3, [pc, #68]	; (d533c <module_user_init_hook+0x50>)
   d52f8:	681a      	ldr	r2, [r3, #0]
   d52fa:	4b11      	ldr	r3, [pc, #68]	; (d5340 <module_user_init_hook+0x54>)
   d52fc:	429a      	cmp	r2, r3
   d52fe:	4b11      	ldr	r3, [pc, #68]	; (d5344 <module_user_init_hook+0x58>)
   d5300:	bf0c      	ite	eq
   d5302:	2201      	moveq	r2, #1
   d5304:	2200      	movne	r2, #0
   d5306:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d5308:	d001      	beq.n	d530e <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   d530a:	f7ff ffb1 	bl	d5270 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d530e:	f7ff fcf3 	bl	d4cf8 <HAL_RNG_GetRandomNumber>
   d5312:	4604      	mov	r4, r0
    srand(seed);
   d5314:	f000 fbd4 	bl	d5ac0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5318:	4b0b      	ldr	r3, [pc, #44]	; (d5348 <module_user_init_hook+0x5c>)
   d531a:	b113      	cbz	r3, d5322 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   d531c:	4620      	mov	r0, r4
   d531e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5322:	2100      	movs	r1, #0
   d5324:	4808      	ldr	r0, [pc, #32]	; (d5348 <module_user_init_hook+0x5c>)
   d5326:	f7ff fe73 	bl	d5010 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d532a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d532e:	4807      	ldr	r0, [pc, #28]	; (d534c <module_user_init_hook+0x60>)
   d5330:	2100      	movs	r1, #0
   d5332:	f7ff bdf9 	b.w	d4f28 <system_ctrl_set_app_request_handler>
   d5336:	bf00      	nop
   d5338:	000d5219 	.word	0x000d5219
   d533c:	2003f400 	.word	0x2003f400
   d5340:	9a271c1e 	.word	0x9a271c1e
   d5344:	2003e5dc 	.word	0x2003e5dc
   d5348:	00000000 	.word	0x00000000
   d534c:	000d52b5 	.word	0x000d52b5

000d5350 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5350:	4770      	bx	lr

000d5352 <_ZN9IPAddressD0Ev>:
   d5352:	b510      	push	{r4, lr}
   d5354:	2118      	movs	r1, #24
   d5356:	4604      	mov	r4, r0
   d5358:	f000 fb92 	bl	d5a80 <_ZdlPvj>
   d535c:	4620      	mov	r0, r4
   d535e:	bd10      	pop	{r4, pc}

000d5360 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5360:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5362:	7d03      	ldrb	r3, [r0, #20]
   d5364:	2b06      	cmp	r3, #6
{
   d5366:	b08d      	sub	sp, #52	; 0x34
   d5368:	460e      	mov	r6, r1
   d536a:	f100 0704 	add.w	r7, r0, #4
   d536e:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d5372:	d012      	beq.n	d539a <_ZNK9IPAddress7printToER5Print+0x3a>
   d5374:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d5378:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d537c:	220a      	movs	r2, #10
   d537e:	4630      	mov	r0, r6
   d5380:	f7ff ff0f 	bl	d51a2 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5384:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5386:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d5388:	d019      	beq.n	d53be <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d538a:	2c00      	cmp	r4, #0
   d538c:	d0f4      	beq.n	d5378 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d538e:	212e      	movs	r1, #46	; 0x2e
   d5390:	4630      	mov	r0, r6
   d5392:	f7ff fee7 	bl	d5164 <_ZN5Print5printEc>
   d5396:	4404      	add	r4, r0
   d5398:	e7ee      	b.n	d5378 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d539a:	232f      	movs	r3, #47	; 0x2f
   d539c:	466a      	mov	r2, sp
   d539e:	4639      	mov	r1, r7
   d53a0:	200a      	movs	r0, #10
		buf[0] = 0;
   d53a2:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d53a6:	f7ff fcbf 	bl	d4d28 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d53aa:	4668      	mov	r0, sp
   d53ac:	f000 fbac 	bl	d5b08 <strlen>
   d53b0:	6833      	ldr	r3, [r6, #0]
   d53b2:	4602      	mov	r2, r0
   d53b4:	68db      	ldr	r3, [r3, #12]
   d53b6:	4669      	mov	r1, sp
   d53b8:	4630      	mov	r0, r6
   d53ba:	4798      	blx	r3
   d53bc:	4604      	mov	r4, r0
    }
    return n;
}
   d53be:	4620      	mov	r0, r4
   d53c0:	b00d      	add	sp, #52	; 0x34
   d53c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d53c4 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d53c4:	b510      	push	{r4, lr}
   d53c6:	4b05      	ldr	r3, [pc, #20]	; (d53dc <_ZN9IPAddressC1Ev+0x18>)
   d53c8:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d53ca:	2211      	movs	r2, #17
   d53cc:	f840 3b04 	str.w	r3, [r0], #4
   d53d0:	2100      	movs	r1, #0
   d53d2:	f000 fb6d 	bl	d5ab0 <memset>
}
   d53d6:	4620      	mov	r0, r4
   d53d8:	bd10      	pop	{r4, pc}
   d53da:	bf00      	nop
   d53dc:	000d5d78 	.word	0x000d5d78

000d53e0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d53e0:	4603      	mov	r3, r0
   d53e2:	4a07      	ldr	r2, [pc, #28]	; (d5400 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d53e4:	b510      	push	{r4, lr}
   d53e6:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d53ea:	f101 0210 	add.w	r2, r1, #16
   d53ee:	f851 4b04 	ldr.w	r4, [r1], #4
   d53f2:	f843 4b04 	str.w	r4, [r3], #4
   d53f6:	4291      	cmp	r1, r2
   d53f8:	d1f9      	bne.n	d53ee <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d53fa:	780a      	ldrb	r2, [r1, #0]
   d53fc:	701a      	strb	r2, [r3, #0]
}
   d53fe:	bd10      	pop	{r4, pc}
   d5400:	000d5d78 	.word	0x000d5d78

000d5404 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d5404:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5406:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d540a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d540e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d5412:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d5416:	2304      	movs	r3, #4
   d5418:	6041      	str	r1, [r0, #4]
   d541a:	7503      	strb	r3, [r0, #20]
}
   d541c:	bd10      	pop	{r4, pc}

000d541e <_ZN9IPAddressaSEPKh>:
{
   d541e:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5420:	78cb      	ldrb	r3, [r1, #3]
   d5422:	9300      	str	r3, [sp, #0]
   d5424:	788b      	ldrb	r3, [r1, #2]
   d5426:	784a      	ldrb	r2, [r1, #1]
   d5428:	7809      	ldrb	r1, [r1, #0]
   d542a:	f7ff ffeb 	bl	d5404 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d542e:	b002      	add	sp, #8
   d5430:	bd10      	pop	{r4, pc}

000d5432 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5432:	7441      	strb	r1, [r0, #17]
}
   d5434:	4770      	bx	lr

000d5436 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5436:	4770      	bx	lr

000d5438 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5438:	4770      	bx	lr

000d543a <_ZN9USBSerial4readEv>:
{
   d543a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d543c:	2100      	movs	r1, #0
   d543e:	7c00      	ldrb	r0, [r0, #16]
   d5440:	f7ff fd4a 	bl	d4ed8 <HAL_USB_USART_Receive_Data>
}
   d5444:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5448:	bd08      	pop	{r3, pc}

000d544a <_ZN9USBSerial4peekEv>:
{
   d544a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d544c:	2101      	movs	r1, #1
   d544e:	7c00      	ldrb	r0, [r0, #16]
   d5450:	f7ff fd42 	bl	d4ed8 <HAL_USB_USART_Receive_Data>
}
   d5454:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5458:	bd08      	pop	{r3, pc}

000d545a <_ZN9USBSerial17availableForWriteEv>:
{
   d545a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d545c:	7c00      	ldrb	r0, [r0, #16]
   d545e:	f7ff fd33 	bl	d4ec8 <HAL_USB_USART_Available_Data_For_Write>
}
   d5462:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5466:	bd08      	pop	{r3, pc}

000d5468 <_ZN9USBSerial9availableEv>:
{
   d5468:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d546a:	7c00      	ldrb	r0, [r0, #16]
   d546c:	f7ff fd24 	bl	d4eb8 <HAL_USB_USART_Available_Data>
}
   d5470:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5474:	bd08      	pop	{r3, pc}

000d5476 <_ZN9USBSerial5writeEh>:
{
   d5476:	b513      	push	{r0, r1, r4, lr}
   d5478:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d547a:	7c00      	ldrb	r0, [r0, #16]
{
   d547c:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d547e:	f7ff fd23 	bl	d4ec8 <HAL_USB_USART_Available_Data_For_Write>
   d5482:	2800      	cmp	r0, #0
   d5484:	9901      	ldr	r1, [sp, #4]
   d5486:	dc01      	bgt.n	d548c <_ZN9USBSerial5writeEh+0x16>
   d5488:	7c60      	ldrb	r0, [r4, #17]
   d548a:	b120      	cbz	r0, d5496 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d548c:	7c20      	ldrb	r0, [r4, #16]
   d548e:	f7ff fd2b 	bl	d4ee8 <HAL_USB_USART_Send_Data>
   d5492:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d5496:	b002      	add	sp, #8
   d5498:	bd10      	pop	{r4, pc}

000d549a <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d549a:	7c00      	ldrb	r0, [r0, #16]
   d549c:	f7ff bd2c 	b.w	d4ef8 <HAL_USB_USART_Flush_Data>

000d54a0 <_ZN9USBSerialD0Ev>:
   d54a0:	b510      	push	{r4, lr}
   d54a2:	2114      	movs	r1, #20
   d54a4:	4604      	mov	r4, r0
   d54a6:	f000 faeb 	bl	d5a80 <_ZdlPvj>
   d54aa:	4620      	mov	r0, r4
   d54ac:	bd10      	pop	{r4, pc}
	...

000d54b0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d54b0:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d54b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d54b6:	4604      	mov	r4, r0
   d54b8:	4608      	mov	r0, r1
   d54ba:	2100      	movs	r1, #0
   d54bc:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d54c0:	4b04      	ldr	r3, [pc, #16]	; (d54d4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d54c2:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d54c4:	2301      	movs	r3, #1
  _serial = serial;
   d54c6:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d54c8:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d54ca:	4611      	mov	r1, r2
   d54cc:	f7ff fce4 	bl	d4e98 <HAL_USB_USART_Init>
}
   d54d0:	4620      	mov	r0, r4
   d54d2:	bd10      	pop	{r4, pc}
   d54d4:	000d5d8c 	.word	0x000d5d8c

000d54d8 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d54d8:	7c00      	ldrb	r0, [r0, #16]
   d54da:	2200      	movs	r2, #0
   d54dc:	f7ff bce4 	b.w	d4ea8 <HAL_USB_USART_Begin>

000d54e0 <_Z19acquireSerialBufferv>:
{
   d54e0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d54e2:	2214      	movs	r2, #20
{
   d54e4:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d54e6:	2100      	movs	r1, #0
   d54e8:	f000 fae2 	bl	d5ab0 <memset>
}
   d54ec:	4620      	mov	r0, r4
   d54ee:	bd10      	pop	{r4, pc}

000d54f0 <_Z16_fetch_usbserialv>:
{
   d54f0:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d54f2:	4c0f      	ldr	r4, [pc, #60]	; (d5530 <_Z16_fetch_usbserialv+0x40>)
{
   d54f4:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d54f6:	a803      	add	r0, sp, #12
   d54f8:	f7ff fff2 	bl	d54e0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d54fc:	7821      	ldrb	r1, [r4, #0]
   d54fe:	f3bf 8f5b 	dmb	ish
   d5502:	f011 0101 	ands.w	r1, r1, #1
   d5506:	d10f      	bne.n	d5528 <_Z16_fetch_usbserialv+0x38>
   d5508:	4620      	mov	r0, r4
   d550a:	9101      	str	r1, [sp, #4]
   d550c:	f7fe fdc5 	bl	d409a <__cxa_guard_acquire>
   d5510:	9901      	ldr	r1, [sp, #4]
   d5512:	b148      	cbz	r0, d5528 <_Z16_fetch_usbserialv+0x38>
   d5514:	aa03      	add	r2, sp, #12
   d5516:	4807      	ldr	r0, [pc, #28]	; (d5534 <_Z16_fetch_usbserialv+0x44>)
   d5518:	f7ff ffca 	bl	d54b0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d551c:	4620      	mov	r0, r4
   d551e:	f7fe fdc1 	bl	d40a4 <__cxa_guard_release>
   d5522:	4805      	ldr	r0, [pc, #20]	; (d5538 <_Z16_fetch_usbserialv+0x48>)
   d5524:	f000 fab0 	bl	d5a88 <atexit>
	return _usbserial;
}
   d5528:	4802      	ldr	r0, [pc, #8]	; (d5534 <_Z16_fetch_usbserialv+0x44>)
   d552a:	b008      	add	sp, #32
   d552c:	bd10      	pop	{r4, pc}
   d552e:	bf00      	nop
   d5530:	2003e5e4 	.word	0x2003e5e4
   d5534:	2003e5e8 	.word	0x2003e5e8
   d5538:	000d5437 	.word	0x000d5437

000d553c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d553c:	4770      	bx	lr

000d553e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d553e:	7441      	strb	r1, [r0, #17]
}
   d5540:	4770      	bx	lr

000d5542 <__tcf_0>:
#endif

USARTSerial& __fetch_global_Serial1()
{
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d5542:	4770      	bx	lr

000d5544 <_ZN11USARTSerial17availableForWriteEv>:
{
   d5544:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d5546:	7c00      	ldrb	r0, [r0, #16]
   d5548:	f7ff fc2e 	bl	d4da8 <hal_usart_available_data_for_write>
}
   d554c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5550:	bd08      	pop	{r3, pc}

000d5552 <_ZN11USARTSerial9availableEv>:
{
   d5552:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d5554:	7c00      	ldrb	r0, [r0, #16]
   d5556:	f7ff fbff 	bl	d4d58 <hal_usart_available>
}
   d555a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d555e:	bd08      	pop	{r3, pc}

000d5560 <_ZN11USARTSerial4peekEv>:
{
   d5560:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d5562:	7c00      	ldrb	r0, [r0, #16]
   d5564:	f7ff fc08 	bl	d4d78 <hal_usart_peek>
}
   d5568:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d556c:	bd08      	pop	{r3, pc}

000d556e <_ZN11USARTSerial4readEv>:
{
   d556e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d5570:	7c00      	ldrb	r0, [r0, #16]
   d5572:	f7ff fbf9 	bl	d4d68 <hal_usart_read>
}
   d5576:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d557a:	bd08      	pop	{r3, pc}

000d557c <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
   d557c:	7c00      	ldrb	r0, [r0, #16]
   d557e:	f7ff bc03 	b.w	d4d88 <hal_usart_flush>

000d5582 <_ZN11USARTSerial5writeEh>:
{
   d5582:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5584:	7c45      	ldrb	r5, [r0, #17]
{
   d5586:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5588:	b12d      	cbz	r5, d5596 <_ZN11USARTSerial5writeEh+0x14>
	  return hal_usart_write(_serial, c);
   d558a:	7c20      	ldrb	r0, [r4, #16]
}
   d558c:	b003      	add	sp, #12
   d558e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d5592:	f7ff bbd9 	b.w	d4d48 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5596:	7c00      	ldrb	r0, [r0, #16]
   d5598:	9101      	str	r1, [sp, #4]
   d559a:	f7ff fc05 	bl	d4da8 <hal_usart_available_data_for_write>
   d559e:	2800      	cmp	r0, #0
   d55a0:	9901      	ldr	r1, [sp, #4]
   d55a2:	dcf2      	bgt.n	d558a <_ZN11USARTSerial5writeEh+0x8>
}
   d55a4:	4628      	mov	r0, r5
   d55a6:	b003      	add	sp, #12
   d55a8:	bd30      	pop	{r4, r5, pc}

000d55aa <_ZN11USARTSerialD0Ev>:
   d55aa:	b510      	push	{r4, lr}
   d55ac:	2114      	movs	r1, #20
   d55ae:	4604      	mov	r4, r0
   d55b0:	f000 fa66 	bl	d5a80 <_ZdlPvj>
   d55b4:	4620      	mov	r0, r4
   d55b6:	bd10      	pop	{r4, pc}

000d55b8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d55b8:	b510      	push	{r4, lr}
   d55ba:	f04f 0c00 	mov.w	ip, #0
   d55be:	4604      	mov	r4, r0
   d55c0:	4608      	mov	r0, r1
   d55c2:	4611      	mov	r1, r2
   d55c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d55c8:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d55cc:	4a04      	ldr	r2, [pc, #16]	; (d55e0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d55ce:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d55d0:	2201      	movs	r2, #1
  _serial = serial;
   d55d2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d55d4:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d55d6:	461a      	mov	r2, r3
   d55d8:	f7ff fbae 	bl	d4d38 <hal_usart_init>
}
   d55dc:	4620      	mov	r0, r4
   d55de:	bd10      	pop	{r4, pc}
   d55e0:	000d5dbc 	.word	0x000d5dbc

000d55e4 <_Z22__fetch_global_Serial1v>:
{
   d55e4:	b513      	push	{r0, r1, r4, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d55e6:	4c0d      	ldr	r4, [pc, #52]	; (d561c <_Z22__fetch_global_Serial1v+0x38>)
   d55e8:	7821      	ldrb	r1, [r4, #0]
   d55ea:	f3bf 8f5b 	dmb	ish
   d55ee:	f011 0101 	ands.w	r1, r1, #1
   d55f2:	d110      	bne.n	d5616 <_Z22__fetch_global_Serial1v+0x32>
   d55f4:	4620      	mov	r0, r4
   d55f6:	9101      	str	r1, [sp, #4]
   d55f8:	f7fe fd4f 	bl	d409a <__cxa_guard_acquire>
   d55fc:	9901      	ldr	r1, [sp, #4]
   d55fe:	b150      	cbz	r0, d5616 <_Z22__fetch_global_Serial1v+0x32>
   d5600:	4b07      	ldr	r3, [pc, #28]	; (d5620 <_Z22__fetch_global_Serial1v+0x3c>)
   d5602:	4a08      	ldr	r2, [pc, #32]	; (d5624 <_Z22__fetch_global_Serial1v+0x40>)
   d5604:	4808      	ldr	r0, [pc, #32]	; (d5628 <_Z22__fetch_global_Serial1v+0x44>)
   d5606:	f7ff ffd7 	bl	d55b8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d560a:	4620      	mov	r0, r4
   d560c:	f7fe fd4a 	bl	d40a4 <__cxa_guard_release>
   d5610:	4806      	ldr	r0, [pc, #24]	; (d562c <_Z22__fetch_global_Serial1v+0x48>)
   d5612:	f000 fa39 	bl	d5a88 <atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5616:	4804      	ldr	r0, [pc, #16]	; (d5628 <_Z22__fetch_global_Serial1v+0x44>)
   d5618:	b002      	add	sp, #8
   d561a:	bd10      	pop	{r4, pc}
   d561c:	2003e5fc 	.word	0x2003e5fc
   d5620:	2003e684 	.word	0x2003e684
   d5624:	2003e600 	.word	0x2003e600
   d5628:	2003e708 	.word	0x2003e708
   d562c:	000d5543 	.word	0x000d5543

000d5630 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d5630:	4770      	bx	lr

000d5632 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d5632:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5634:	4606      	mov	r6, r0
   d5636:	4615      	mov	r5, r2
   d5638:	460c      	mov	r4, r1
   d563a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d563c:	42bc      	cmp	r4, r7
   d563e:	d006      	beq.n	d564e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5640:	6833      	ldr	r3, [r6, #0]
   d5642:	f814 1b01 	ldrb.w	r1, [r4], #1
   d5646:	689b      	ldr	r3, [r3, #8]
   d5648:	4630      	mov	r0, r6
   d564a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d564c:	e7f6      	b.n	d563c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d564e:	4628      	mov	r0, r5
   d5650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5652 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d5652:	7c00      	ldrb	r0, [r0, #16]
   d5654:	2200      	movs	r2, #0
   d5656:	f7ff bbcf 	b.w	d4df8 <hal_i2c_write>

000d565a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d565a:	7c00      	ldrb	r0, [r0, #16]
   d565c:	2100      	movs	r1, #0
   d565e:	f7ff bbd3 	b.w	d4e08 <hal_i2c_available>

000d5662 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d5662:	7c00      	ldrb	r0, [r0, #16]
   d5664:	2100      	movs	r1, #0
   d5666:	f7ff bbd7 	b.w	d4e18 <hal_i2c_read>

000d566a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d566a:	7c00      	ldrb	r0, [r0, #16]
   d566c:	2100      	movs	r1, #0
   d566e:	f7ff bbdb 	b.w	d4e28 <hal_i2c_peek>

000d5672 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d5672:	7c00      	ldrb	r0, [r0, #16]
   d5674:	2100      	movs	r1, #0
   d5676:	f7ff bbdf 	b.w	d4e38 <hal_i2c_flush>

000d567a <_ZN7TwoWireD0Ev>:
   d567a:	b510      	push	{r4, lr}
   d567c:	2114      	movs	r1, #20
   d567e:	4604      	mov	r4, r0
   d5680:	f000 f9fe 	bl	d5a80 <_ZdlPvj>
   d5684:	4620      	mov	r0, r4
   d5686:	bd10      	pop	{r4, pc}

000d5688 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d5688:	b510      	push	{r4, lr}
   d568a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d568e:	4604      	mov	r4, r0
   d5690:	4608      	mov	r0, r1
   d5692:	2100      	movs	r1, #0
   d5694:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d5698:	4b03      	ldr	r3, [pc, #12]	; (d56a8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d569a:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d569c:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d569e:	4611      	mov	r1, r2
   d56a0:	f7ff fbda 	bl	d4e58 <hal_i2c_init>
}
   d56a4:	4620      	mov	r0, r4
   d56a6:	bd10      	pop	{r4, pc}
   d56a8:	000d5dec 	.word	0x000d5dec

000d56ac <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   d56ac:	7c00      	ldrb	r0, [r0, #16]
   d56ae:	2200      	movs	r2, #0
   d56b0:	f7ff bb82 	b.w	d4db8 <hal_i2c_set_speed>

000d56b4 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d56b4:	2300      	movs	r3, #0
   d56b6:	7c00      	ldrb	r0, [r0, #16]
   d56b8:	461a      	mov	r2, r3
   d56ba:	4619      	mov	r1, r3
   d56bc:	f7ff bb84 	b.w	d4dc8 <hal_i2c_begin>

000d56c0 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d56c0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d56c2:	2200      	movs	r2, #0
   d56c4:	2314      	movs	r3, #20
   d56c6:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d56ca:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d56ce:	780b      	ldrb	r3, [r1, #0]
   d56d0:	f88d 3008 	strb.w	r3, [sp, #8]
   d56d4:	684b      	ldr	r3, [r1, #4]
   d56d6:	9303      	str	r3, [sp, #12]
   d56d8:	68cb      	ldr	r3, [r1, #12]
   d56da:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d56dc:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d56de:	7a0b      	ldrb	r3, [r1, #8]
   d56e0:	9305      	str	r3, [sp, #20]
   d56e2:	a901      	add	r1, sp, #4
   d56e4:	f7ff fbc0 	bl	d4e68 <hal_i2c_request_ex>
}
   d56e8:	b007      	add	sp, #28
   d56ea:	f85d fb04 	ldr.w	pc, [sp], #4

000d56ee <_ZN7TwoWire11requestFromEhjh>:
{
   d56ee:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d56f0:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d56f2:	f88d 1000 	strb.w	r1, [sp]
   d56f6:	f04f 0164 	mov.w	r1, #100	; 0x64
   d56fa:	9103      	str	r1, [sp, #12]
   d56fc:	bf18      	it	ne
   d56fe:	2301      	movne	r3, #1
   d5700:	4669      	mov	r1, sp
    size_ = size;
   d5702:	9201      	str	r2, [sp, #4]
   d5704:	f88d 3008 	strb.w	r3, [sp, #8]
   d5708:	f7ff ffda 	bl	d56c0 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d570c:	b005      	add	sp, #20
   d570e:	f85d fb04 	ldr.w	pc, [sp], #4

000d5712 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   d5712:	2301      	movs	r3, #1
   d5714:	f7ff bfeb 	b.w	d56ee <_ZN7TwoWire11requestFromEhjh>

000d5718 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d5718:	7c00      	ldrb	r0, [r0, #16]
   d571a:	2200      	movs	r2, #0
   d571c:	f7ff bb5c 	b.w	d4dd8 <hal_i2c_begin_transmission>

000d5720 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d5720:	b2c9      	uxtb	r1, r1
   d5722:	f7ff bff9 	b.w	d5718 <_ZN7TwoWire17beginTransmissionEh>

000d5726 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d5726:	7c00      	ldrb	r0, [r0, #16]
   d5728:	2200      	movs	r2, #0
   d572a:	f7ff bb5d 	b.w	d4de8 <hal_i2c_end_transmission>

000d572e <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d572e:	2101      	movs	r1, #1
   d5730:	f7ff bff9 	b.w	d5726 <_ZN7TwoWire15endTransmissionEh>

000d5734 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d5734:	2200      	movs	r2, #0
   d5736:	6840      	ldr	r0, [r0, #4]
   d5738:	4611      	mov	r1, r2
   d573a:	f7ff bc21 	b.w	d4f80 <network_ready>

000d573e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d573e:	2200      	movs	r2, #0
   d5740:	6840      	ldr	r0, [r0, #4]
   d5742:	4611      	mov	r1, r2
   d5744:	f7ff bc3c 	b.w	d4fc0 <network_listening>

000d5748 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d5748:	2200      	movs	r2, #0
   d574a:	6840      	ldr	r0, [r0, #4]
   d574c:	4611      	mov	r1, r2
   d574e:	f7ff bc47 	b.w	d4fe0 <network_get_listen_timeout>

000d5752 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d5752:	6840      	ldr	r0, [r0, #4]
   d5754:	2200      	movs	r2, #0
   d5756:	f7ff bc3b 	b.w	d4fd0 <network_set_listen_timeout>

000d575a <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d575a:	6840      	ldr	r0, [r0, #4]
   d575c:	2200      	movs	r2, #0
   d575e:	f081 0101 	eor.w	r1, r1, #1
   d5762:	f7ff bc25 	b.w	d4fb0 <network_listen>

000d5766 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d5766:	2300      	movs	r3, #0
   d5768:	6840      	ldr	r0, [r0, #4]
   d576a:	461a      	mov	r2, r3
   d576c:	4619      	mov	r1, r3
   d576e:	f7ff bc17 	b.w	d4fa0 <network_off>

000d5772 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d5772:	2300      	movs	r3, #0
   d5774:	6840      	ldr	r0, [r0, #4]
   d5776:	461a      	mov	r2, r3
   d5778:	4619      	mov	r1, r3
   d577a:	f7ff bc09 	b.w	d4f90 <network_on>

000d577e <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d577e:	2200      	movs	r2, #0
   d5780:	6840      	ldr	r0, [r0, #4]
   d5782:	4611      	mov	r1, r2
   d5784:	f7ff bbec 	b.w	d4f60 <network_connecting>

000d5788 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5788:	6840      	ldr	r0, [r0, #4]
   d578a:	2200      	movs	r2, #0
   d578c:	2102      	movs	r1, #2
   d578e:	f7ff bbef 	b.w	d4f70 <network_disconnect>

000d5792 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d5792:	2300      	movs	r3, #0
   d5794:	6840      	ldr	r0, [r0, #4]
   d5796:	461a      	mov	r2, r3
   d5798:	f7ff bbda 	b.w	d4f50 <network_connect>

000d579c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d579c:	4b02      	ldr	r3, [pc, #8]	; (d57a8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d579e:	2204      	movs	r2, #4
   d57a0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d57a2:	4a02      	ldr	r2, [pc, #8]	; (d57ac <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d57a4:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d57a6:	4770      	bx	lr
   d57a8:	2003e71c 	.word	0x2003e71c
   d57ac:	000d5e14 	.word	0x000d5e14

000d57b0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d57b0:	2300      	movs	r3, #0
   d57b2:	6840      	ldr	r0, [r0, #4]
   d57b4:	461a      	mov	r2, r3
   d57b6:	f7ff bbcb 	b.w	d4f50 <network_connect>

000d57ba <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d57ba:	6840      	ldr	r0, [r0, #4]
   d57bc:	2200      	movs	r2, #0
   d57be:	2102      	movs	r1, #2
   d57c0:	f7ff bbd6 	b.w	d4f70 <network_disconnect>

000d57c4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d57c4:	2200      	movs	r2, #0
   d57c6:	6840      	ldr	r0, [r0, #4]
   d57c8:	4611      	mov	r1, r2
   d57ca:	f7ff bbc9 	b.w	d4f60 <network_connecting>

000d57ce <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d57ce:	2200      	movs	r2, #0
   d57d0:	6840      	ldr	r0, [r0, #4]
   d57d2:	4611      	mov	r1, r2
   d57d4:	f7ff bbd4 	b.w	d4f80 <network_ready>

000d57d8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d57d8:	2300      	movs	r3, #0
   d57da:	6840      	ldr	r0, [r0, #4]
   d57dc:	461a      	mov	r2, r3
   d57de:	4619      	mov	r1, r3
   d57e0:	f7ff bbd6 	b.w	d4f90 <network_on>

000d57e4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d57e4:	2300      	movs	r3, #0
   d57e6:	6840      	ldr	r0, [r0, #4]
   d57e8:	461a      	mov	r2, r3
   d57ea:	4619      	mov	r1, r3
   d57ec:	f7ff bbd8 	b.w	d4fa0 <network_off>

000d57f0 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d57f0:	6840      	ldr	r0, [r0, #4]
   d57f2:	2100      	movs	r1, #0
   d57f4:	f7ff bbfc 	b.w	d4ff0 <network_is_on>

000d57f8 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d57f8:	6840      	ldr	r0, [r0, #4]
   d57fa:	2100      	movs	r1, #0
   d57fc:	f7ff bc00 	b.w	d5000 <network_is_off>

000d5800 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5800:	6840      	ldr	r0, [r0, #4]
   d5802:	2200      	movs	r2, #0
   d5804:	f081 0101 	eor.w	r1, r1, #1
   d5808:	f7ff bbd2 	b.w	d4fb0 <network_listen>

000d580c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d580c:	6840      	ldr	r0, [r0, #4]
   d580e:	2200      	movs	r2, #0
   d5810:	f7ff bbde 	b.w	d4fd0 <network_set_listen_timeout>

000d5814 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5814:	2200      	movs	r2, #0
   d5816:	6840      	ldr	r0, [r0, #4]
   d5818:	4611      	mov	r1, r2
   d581a:	f7ff bbe1 	b.w	d4fe0 <network_get_listen_timeout>

000d581e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d581e:	2200      	movs	r2, #0
   d5820:	6840      	ldr	r0, [r0, #4]
   d5822:	4611      	mov	r1, r2
   d5824:	f7ff bbcc 	b.w	d4fc0 <network_listening>

000d5828 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5828:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d582c:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d582e:	b095      	sub	sp, #84	; 0x54
   d5830:	4616      	mov	r6, r2
   d5832:	460d      	mov	r5, r1
   d5834:	4607      	mov	r7, r0
    IPAddress addr;
   d5836:	f7ff fdc5 	bl	d53c4 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d583a:	4621      	mov	r1, r4
   d583c:	2218      	movs	r2, #24
   d583e:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d5840:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d5842:	f000 f935 	bl	d5ab0 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d5846:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d5848:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d584c:	4621      	mov	r1, r4
   d584e:	466b      	mov	r3, sp
   d5850:	aa0c      	add	r2, sp, #48	; 0x30
   d5852:	4630      	mov	r0, r6
   d5854:	f7ff fa28 	bl	d4ca8 <netdb_getaddrinfo>
    if (!r) {
   d5858:	4604      	mov	r4, r0
   d585a:	2800      	cmp	r0, #0
   d585c:	d146      	bne.n	d58ec <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d585e:	4602      	mov	r2, r0
   d5860:	2101      	movs	r1, #1
   d5862:	6868      	ldr	r0, [r5, #4]
   d5864:	f7ff fb8c 	bl	d4f80 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5868:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d586a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d586c:	4622      	mov	r2, r4
   d586e:	6868      	ldr	r0, [r5, #4]
   d5870:	f7ff fb86 	bl	d4f80 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5874:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5876:	4681      	mov	r9, r0
        bool ok = false;
   d5878:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d587a:	2e00      	cmp	r6, #0
   d587c:	d036      	beq.n	d58ec <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d587e:	2900      	cmp	r1, #0
   d5880:	d134      	bne.n	d58ec <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d5882:	6873      	ldr	r3, [r6, #4]
   d5884:	2b02      	cmp	r3, #2
   d5886:	d003      	beq.n	d5890 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d5888:	2b0a      	cmp	r3, #10
   d588a:	d00b      	beq.n	d58a4 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d588c:	69f6      	ldr	r6, [r6, #28]
   d588e:	e7f4      	b.n	d587a <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d5890:	f1b8 0f00 	cmp.w	r8, #0
   d5894:	d004      	beq.n	d58a0 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5896:	6971      	ldr	r1, [r6, #20]
   d5898:	4638      	mov	r0, r7
   d589a:	3104      	adds	r1, #4
   d589c:	f7ff fdbf 	bl	d541e <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d58a0:	4641      	mov	r1, r8
   d58a2:	e7f3      	b.n	d588c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d58a4:	f1b9 0f00 	cmp.w	r9, #0
   d58a8:	d101      	bne.n	d58ae <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d58aa:	4649      	mov	r1, r9
   d58ac:	e7ee      	b.n	d588c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d58ae:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d58b0:	2210      	movs	r2, #16
   d58b2:	a801      	add	r0, sp, #4
   d58b4:	f000 f8fc 	bl	d5ab0 <memset>
                    a.v = 6;
   d58b8:	2306      	movs	r3, #6
   d58ba:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d58be:	ad01      	add	r5, sp, #4
   d58c0:	f104 0308 	add.w	r3, r4, #8
   d58c4:	3418      	adds	r4, #24
   d58c6:	6818      	ldr	r0, [r3, #0]
   d58c8:	6859      	ldr	r1, [r3, #4]
   d58ca:	462a      	mov	r2, r5
   d58cc:	c203      	stmia	r2!, {r0, r1}
   d58ce:	3308      	adds	r3, #8
   d58d0:	42a3      	cmp	r3, r4
   d58d2:	4615      	mov	r5, r2
   d58d4:	d1f7      	bne.n	d58c6 <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d58d6:	a901      	add	r1, sp, #4
   d58d8:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d58da:	ad07      	add	r5, sp, #28
   d58dc:	f7ff fd80 	bl	d53e0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d58e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d58e2:	1d3c      	adds	r4, r7, #4
   d58e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d58e6:	682b      	ldr	r3, [r5, #0]
   d58e8:	7023      	strb	r3, [r4, #0]
   d58ea:	e7de      	b.n	d58aa <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d58ec:	9800      	ldr	r0, [sp, #0]
   d58ee:	f7ff f9d3 	bl	d4c98 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d58f2:	4638      	mov	r0, r7
   d58f4:	b015      	add	sp, #84	; 0x54
   d58f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d58fc <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d58fc:	4b02      	ldr	r3, [pc, #8]	; (d5908 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d58fe:	4a03      	ldr	r2, [pc, #12]	; (d590c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5900:	601a      	str	r2, [r3, #0]
   d5902:	2200      	movs	r2, #0
   d5904:	605a      	str	r2, [r3, #4]

} // spark
   d5906:	4770      	bx	lr
   d5908:	2003e724 	.word	0x2003e724
   d590c:	000d5e50 	.word	0x000d5e50

000d5910 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d5910:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d5912:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d5914:	d902      	bls.n	d591c <pinAvailable+0xc>
    return false;
   d5916:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d5918:	b002      	add	sp, #8
   d591a:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d591c:	f1a0 030b 	sub.w	r3, r0, #11
   d5920:	2b02      	cmp	r3, #2
   d5922:	d81a      	bhi.n	d595a <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d5924:	4c17      	ldr	r4, [pc, #92]	; (d5984 <pinAvailable+0x74>)
   d5926:	7821      	ldrb	r1, [r4, #0]
   d5928:	f3bf 8f5b 	dmb	ish
   d592c:	f011 0101 	ands.w	r1, r1, #1
   d5930:	d10b      	bne.n	d594a <pinAvailable+0x3a>
   d5932:	4620      	mov	r0, r4
   d5934:	9101      	str	r1, [sp, #4]
   d5936:	f7fe fbb0 	bl	d409a <__cxa_guard_acquire>
   d593a:	9901      	ldr	r1, [sp, #4]
   d593c:	b128      	cbz	r0, d594a <pinAvailable+0x3a>
   d593e:	4812      	ldr	r0, [pc, #72]	; (d5988 <pinAvailable+0x78>)
   d5940:	f7ff fbc4 	bl	d50cc <_ZN8SPIClassC1E19hal_spi_interface_t>
   d5944:	4620      	mov	r0, r4
   d5946:	f7fe fbad 	bl	d40a4 <__cxa_guard_release>
   d594a:	4b0f      	ldr	r3, [pc, #60]	; (d5988 <pinAvailable+0x78>)
   d594c:	7818      	ldrb	r0, [r3, #0]
   d594e:	f7ff fa9b 	bl	d4e88 <hal_spi_is_enabled>
   d5952:	2800      	cmp	r0, #0
   d5954:	d1df      	bne.n	d5916 <pinAvailable+0x6>
  return true; // 'pin' is available
   d5956:	2001      	movs	r0, #1
   d5958:	e7de      	b.n	d5918 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d595a:	2801      	cmp	r0, #1
   d595c:	d809      	bhi.n	d5972 <pinAvailable+0x62>
   d595e:	f000 f86b 	bl	d5a38 <_Z19__fetch_global_Wirev>
   d5962:	2100      	movs	r1, #0
   d5964:	7c00      	ldrb	r0, [r0, #16]
   d5966:	f7ff fa6f 	bl	d4e48 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d596a:	f080 0001 	eor.w	r0, r0, #1
   d596e:	b2c0      	uxtb	r0, r0
   d5970:	e7d2      	b.n	d5918 <pinAvailable+0x8>
   d5972:	3809      	subs	r0, #9
   d5974:	2801      	cmp	r0, #1
   d5976:	d8ee      	bhi.n	d5956 <pinAvailable+0x46>
   d5978:	f7ff fe34 	bl	d55e4 <_Z22__fetch_global_Serial1v>
   d597c:	7c00      	ldrb	r0, [r0, #16]
   d597e:	f7ff fa0b 	bl	d4d98 <hal_usart_is_enabled>
   d5982:	e7f2      	b.n	d596a <pinAvailable+0x5a>
   d5984:	2003e72c 	.word	0x2003e72c
   d5988:	2003e730 	.word	0x2003e730

000d598c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d598c:	2823      	cmp	r0, #35	; 0x23
{
   d598e:	b538      	push	{r3, r4, r5, lr}
   d5990:	4604      	mov	r4, r0
   d5992:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5994:	d80a      	bhi.n	d59ac <pinMode+0x20>
   d5996:	29ff      	cmp	r1, #255	; 0xff
   d5998:	d008      	beq.n	d59ac <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d599a:	f7ff ffb9 	bl	d5910 <pinAvailable>
   d599e:	b128      	cbz	r0, d59ac <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d59a0:	4629      	mov	r1, r5
   d59a2:	4620      	mov	r0, r4
}
   d59a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d59a8:	f7ff b986 	b.w	d4cb8 <HAL_Pin_Mode>
}
   d59ac:	bd38      	pop	{r3, r4, r5, pc}

000d59ae <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d59ae:	b538      	push	{r3, r4, r5, lr}
   d59b0:	4604      	mov	r4, r0
   d59b2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d59b4:	f7ff f988 	bl	d4cc8 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d59b8:	28ff      	cmp	r0, #255	; 0xff
   d59ba:	d010      	beq.n	d59de <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d59bc:	2806      	cmp	r0, #6
   d59be:	d804      	bhi.n	d59ca <digitalWrite+0x1c>
   d59c0:	234d      	movs	r3, #77	; 0x4d
   d59c2:	fa23 f000 	lsr.w	r0, r3, r0
   d59c6:	07c3      	lsls	r3, r0, #31
   d59c8:	d409      	bmi.n	d59de <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d59ca:	4620      	mov	r0, r4
   d59cc:	f7ff ffa0 	bl	d5910 <pinAvailable>
   d59d0:	b128      	cbz	r0, d59de <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d59d2:	4629      	mov	r1, r5
   d59d4:	4620      	mov	r0, r4
}
   d59d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d59da:	f7ff b97d 	b.w	d4cd8 <HAL_GPIO_Write>
}
   d59de:	bd38      	pop	{r3, r4, r5, pc}

000d59e0 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d59e0:	b510      	push	{r4, lr}
   d59e2:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d59e4:	f7ff f970 	bl	d4cc8 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   d59e8:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   d59ea:	b2db      	uxtb	r3, r3
   d59ec:	2b01      	cmp	r3, #1
   d59ee:	d908      	bls.n	d5a02 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d59f0:	4620      	mov	r0, r4
   d59f2:	f7ff ff8d 	bl	d5910 <pinAvailable>
   d59f6:	b120      	cbz	r0, d5a02 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d59f8:	4620      	mov	r0, r4
}
   d59fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   d59fe:	f7ff b973 	b.w	d4ce8 <HAL_GPIO_Read>
}
   d5a02:	2000      	movs	r0, #0
   d5a04:	bd10      	pop	{r4, pc}

000d5a06 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5a06:	4770      	bx	lr

000d5a08 <_Z17acquireWireBufferv>:
{
   d5a08:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d5a0a:	2300      	movs	r3, #0
   d5a0c:	2520      	movs	r5, #32
   d5a0e:	8043      	strh	r3, [r0, #2]
   d5a10:	2314      	movs	r3, #20
{
   d5a12:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d5a14:	8003      	strh	r3, [r0, #0]
   d5a16:	6085      	str	r5, [r0, #8]
   d5a18:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d5a1a:	4906      	ldr	r1, [pc, #24]	; (d5a34 <_Z17acquireWireBufferv+0x2c>)
   d5a1c:	4628      	mov	r0, r5
   d5a1e:	f000 f831 	bl	d5a84 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d5a22:	4904      	ldr	r1, [pc, #16]	; (d5a34 <_Z17acquireWireBufferv+0x2c>)
	};
   d5a24:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d5a26:	4628      	mov	r0, r5
   d5a28:	f000 f82c 	bl	d5a84 <_ZnajRKSt9nothrow_t>
	};
   d5a2c:	60e0      	str	r0, [r4, #12]
}
   d5a2e:	4620      	mov	r0, r4
   d5a30:	bd38      	pop	{r3, r4, r5, pc}
   d5a32:	bf00      	nop
   d5a34:	000d5e84 	.word	0x000d5e84

000d5a38 <_Z19__fetch_global_Wirev>:
{
   d5a38:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5a3a:	4d0e      	ldr	r5, [pc, #56]	; (d5a74 <_Z19__fetch_global_Wirev+0x3c>)
   d5a3c:	7829      	ldrb	r1, [r5, #0]
   d5a3e:	f3bf 8f5b 	dmb	ish
   d5a42:	f011 0401 	ands.w	r4, r1, #1
{
   d5a46:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5a48:	d111      	bne.n	d5a6e <_Z19__fetch_global_Wirev+0x36>
   d5a4a:	4628      	mov	r0, r5
   d5a4c:	f7fe fb25 	bl	d409a <__cxa_guard_acquire>
   d5a50:	b168      	cbz	r0, d5a6e <_Z19__fetch_global_Wirev+0x36>
   d5a52:	a801      	add	r0, sp, #4
   d5a54:	f7ff ffd8 	bl	d5a08 <_Z17acquireWireBufferv>
   d5a58:	aa01      	add	r2, sp, #4
   d5a5a:	4621      	mov	r1, r4
   d5a5c:	4806      	ldr	r0, [pc, #24]	; (d5a78 <_Z19__fetch_global_Wirev+0x40>)
   d5a5e:	f7ff fe13 	bl	d5688 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d5a62:	4628      	mov	r0, r5
   d5a64:	f7fe fb1e 	bl	d40a4 <__cxa_guard_release>
   d5a68:	4804      	ldr	r0, [pc, #16]	; (d5a7c <_Z19__fetch_global_Wirev+0x44>)
   d5a6a:	f000 f80d 	bl	d5a88 <atexit>
	return wire;
}
   d5a6e:	4802      	ldr	r0, [pc, #8]	; (d5a78 <_Z19__fetch_global_Wirev+0x40>)
   d5a70:	b007      	add	sp, #28
   d5a72:	bd30      	pop	{r4, r5, pc}
   d5a74:	2003e73c 	.word	0x2003e73c
   d5a78:	2003e740 	.word	0x2003e740
   d5a7c:	000d5a07 	.word	0x000d5a07

000d5a80 <_ZdlPvj>:
   d5a80:	f7fe bb09 	b.w	d4096 <_ZdlPv>

000d5a84 <_ZnajRKSt9nothrow_t>:
   d5a84:	f7fe bb05 	b.w	d4092 <_Znaj>

000d5a88 <atexit>:
   d5a88:	2300      	movs	r3, #0
   d5a8a:	4601      	mov	r1, r0
   d5a8c:	461a      	mov	r2, r3
   d5a8e:	4618      	mov	r0, r3
   d5a90:	f000 b842 	b.w	d5b18 <__register_exitproc>

000d5a94 <memcpy>:
   d5a94:	440a      	add	r2, r1
   d5a96:	4291      	cmp	r1, r2
   d5a98:	f100 33ff 	add.w	r3, r0, #4294967295
   d5a9c:	d100      	bne.n	d5aa0 <memcpy+0xc>
   d5a9e:	4770      	bx	lr
   d5aa0:	b510      	push	{r4, lr}
   d5aa2:	f811 4b01 	ldrb.w	r4, [r1], #1
   d5aa6:	f803 4f01 	strb.w	r4, [r3, #1]!
   d5aaa:	4291      	cmp	r1, r2
   d5aac:	d1f9      	bne.n	d5aa2 <memcpy+0xe>
   d5aae:	bd10      	pop	{r4, pc}

000d5ab0 <memset>:
   d5ab0:	4402      	add	r2, r0
   d5ab2:	4603      	mov	r3, r0
   d5ab4:	4293      	cmp	r3, r2
   d5ab6:	d100      	bne.n	d5aba <memset+0xa>
   d5ab8:	4770      	bx	lr
   d5aba:	f803 1b01 	strb.w	r1, [r3], #1
   d5abe:	e7f9      	b.n	d5ab4 <memset+0x4>

000d5ac0 <srand>:
   d5ac0:	b538      	push	{r3, r4, r5, lr}
   d5ac2:	4b0d      	ldr	r3, [pc, #52]	; (d5af8 <srand+0x38>)
   d5ac4:	681d      	ldr	r5, [r3, #0]
   d5ac6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d5ac8:	4604      	mov	r4, r0
   d5aca:	b97b      	cbnz	r3, d5aec <srand+0x2c>
   d5acc:	2018      	movs	r0, #24
   d5ace:	f7ff faa7 	bl	d5020 <malloc>
   d5ad2:	4a0a      	ldr	r2, [pc, #40]	; (d5afc <srand+0x3c>)
   d5ad4:	4b0a      	ldr	r3, [pc, #40]	; (d5b00 <srand+0x40>)
   d5ad6:	63a8      	str	r0, [r5, #56]	; 0x38
   d5ad8:	e9c0 2300 	strd	r2, r3, [r0]
   d5adc:	4b09      	ldr	r3, [pc, #36]	; (d5b04 <srand+0x44>)
   d5ade:	6083      	str	r3, [r0, #8]
   d5ae0:	230b      	movs	r3, #11
   d5ae2:	8183      	strh	r3, [r0, #12]
   d5ae4:	2201      	movs	r2, #1
   d5ae6:	2300      	movs	r3, #0
   d5ae8:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d5aec:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d5aee:	2200      	movs	r2, #0
   d5af0:	611c      	str	r4, [r3, #16]
   d5af2:	615a      	str	r2, [r3, #20]
   d5af4:	bd38      	pop	{r3, r4, r5, pc}
   d5af6:	bf00      	nop
   d5af8:	2003deb4 	.word	0x2003deb4
   d5afc:	abcd330e 	.word	0xabcd330e
   d5b00:	e66d1234 	.word	0xe66d1234
   d5b04:	0005deec 	.word	0x0005deec

000d5b08 <strlen>:
   d5b08:	4603      	mov	r3, r0
   d5b0a:	f813 2b01 	ldrb.w	r2, [r3], #1
   d5b0e:	2a00      	cmp	r2, #0
   d5b10:	d1fb      	bne.n	d5b0a <strlen+0x2>
   d5b12:	1a18      	subs	r0, r3, r0
   d5b14:	3801      	subs	r0, #1
   d5b16:	4770      	bx	lr

000d5b18 <__register_exitproc>:
   d5b18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d5b1c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; d5bd8 <__register_exitproc+0xc0>
   d5b20:	4606      	mov	r6, r0
   d5b22:	f8d8 0000 	ldr.w	r0, [r8]
   d5b26:	461f      	mov	r7, r3
   d5b28:	460d      	mov	r5, r1
   d5b2a:	4691      	mov	r9, r2
   d5b2c:	f000 f856 	bl	d5bdc <__retarget_lock_acquire_recursive>
   d5b30:	4b25      	ldr	r3, [pc, #148]	; (d5bc8 <__register_exitproc+0xb0>)
   d5b32:	681c      	ldr	r4, [r3, #0]
   d5b34:	b934      	cbnz	r4, d5b44 <__register_exitproc+0x2c>
   d5b36:	4c25      	ldr	r4, [pc, #148]	; (d5bcc <__register_exitproc+0xb4>)
   d5b38:	601c      	str	r4, [r3, #0]
   d5b3a:	4b25      	ldr	r3, [pc, #148]	; (d5bd0 <__register_exitproc+0xb8>)
   d5b3c:	b113      	cbz	r3, d5b44 <__register_exitproc+0x2c>
   d5b3e:	681b      	ldr	r3, [r3, #0]
   d5b40:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   d5b44:	6863      	ldr	r3, [r4, #4]
   d5b46:	2b1f      	cmp	r3, #31
   d5b48:	dd07      	ble.n	d5b5a <__register_exitproc+0x42>
   d5b4a:	f8d8 0000 	ldr.w	r0, [r8]
   d5b4e:	f000 f847 	bl	d5be0 <__retarget_lock_release_recursive>
   d5b52:	f04f 30ff 	mov.w	r0, #4294967295
   d5b56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d5b5a:	b34e      	cbz	r6, d5bb0 <__register_exitproc+0x98>
   d5b5c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   d5b60:	b988      	cbnz	r0, d5b86 <__register_exitproc+0x6e>
   d5b62:	4b1c      	ldr	r3, [pc, #112]	; (d5bd4 <__register_exitproc+0xbc>)
   d5b64:	b923      	cbnz	r3, d5b70 <__register_exitproc+0x58>
   d5b66:	f8d8 0000 	ldr.w	r0, [r8]
   d5b6a:	f000 f838 	bl	d5bde <__retarget_lock_release>
   d5b6e:	e7f0      	b.n	d5b52 <__register_exitproc+0x3a>
   d5b70:	f44f 7084 	mov.w	r0, #264	; 0x108
   d5b74:	f7ff fa54 	bl	d5020 <malloc>
   d5b78:	2800      	cmp	r0, #0
   d5b7a:	d0f4      	beq.n	d5b66 <__register_exitproc+0x4e>
   d5b7c:	2300      	movs	r3, #0
   d5b7e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   d5b82:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   d5b86:	6863      	ldr	r3, [r4, #4]
   d5b88:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   d5b8c:	2201      	movs	r2, #1
   d5b8e:	409a      	lsls	r2, r3
   d5b90:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   d5b94:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   d5b98:	4313      	orrs	r3, r2
   d5b9a:	2e02      	cmp	r6, #2
   d5b9c:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   d5ba0:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   d5ba4:	bf02      	ittt	eq
   d5ba6:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   d5baa:	431a      	orreq	r2, r3
   d5bac:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
   d5bb0:	6863      	ldr	r3, [r4, #4]
   d5bb2:	f8d8 0000 	ldr.w	r0, [r8]
   d5bb6:	1c5a      	adds	r2, r3, #1
   d5bb8:	3302      	adds	r3, #2
   d5bba:	6062      	str	r2, [r4, #4]
   d5bbc:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   d5bc0:	f000 f80e 	bl	d5be0 <__retarget_lock_release_recursive>
   d5bc4:	2000      	movs	r0, #0
   d5bc6:	e7c6      	b.n	d5b56 <__register_exitproc+0x3e>
   d5bc8:	2003e7e0 	.word	0x2003e7e0
   d5bcc:	2003e754 	.word	0x2003e754
   d5bd0:	00000000 	.word	0x00000000
   d5bd4:	000d5021 	.word	0x000d5021
   d5bd8:	2003df18 	.word	0x2003df18

000d5bdc <__retarget_lock_acquire_recursive>:
   d5bdc:	4770      	bx	lr

000d5bde <__retarget_lock_release>:
   d5bde:	4770      	bx	lr

000d5be0 <__retarget_lock_release_recursive>:
   d5be0:	4770      	bx	lr

000d5be2 <link_code_end>:
	...

000d5be4 <dynalib_user>:
   d5be4:	401d 000d 4059 000d 4081 000d 4085 000d     .@..Y@...@...@..
   d5bf4:	0000 0000 414d 3358 3130 3530 7720 7361     ....MAX30105 was
   d5c04:	6e20 746f 6620 756f 646e 202e 6c50 6165      not found. Plea
   d5c14:	6573 6320 6568 6b63 7720 7269 6e69 2f67     se check wiring/
   d5c24:	6f70 6577 2e72 7200 6465 003d 202c 7269     power..red=., ir
   d5c34:	003d 202c 5248 003d 202c 5248 6176 696c     =., HR=., HRvali
   d5c44:	3d64 2c00 5320 4f50 3d32 2c00 5320 4f50     d=., SPO2=., SPO
   d5c54:	5632 6c61 6469 003d                         2Valid=.

000d5c5c <_ZL14uch_spo2_table>:
   d5c5c:	5f5f 605f 6060 6161 6161 6261 6262 6262     ___```aaaaabbbbb
   d5c6c:	6363 6363 6363 6363 6464 6464 6464 6464     ccccccccdddddddd
   d5c7c:	6464 6464 6464 6464 6464 6464 6363 6363     ddddddddddddcccc
   d5c8c:	6363 6363 6262 6262 6262 6161 6161 6060     ccccbbbbbbaaaa``
   d5c9c:	6060 5f5f 5e5f 5e5e 5d5d 5c5d 5c5c 5b5b     ``___^^^]]]\\\[[
   d5cac:	5a5a 5959 5859 5758 5657 5556 5455 5354     ZZYYYXXWWVVUUTTS
   d5cbc:	5252 5151 5050 4e4f 4d4e 4c4c 4a4b 494a     RRQQPPONNMLLKJJI
   d5ccc:	4848 4647 4545 4344 4242 4041 3e3f 3d3e     HHGFEEDCBBA@?>>=
   d5cdc:	3b3c 393a 3838 3637 3435 3233 3031 2e2f     <;:98876543210/.
   d5cec:	2c2d 2a2b 2829 2627 2425 2223 1f21 1d1e     -,+*)('&%$#"!...
   d5cfc:	1b1c 191a 1617 1415 1113 0f10 0c0e 0a0b     ................
   d5d0c:	0709 0506 0203 0001                         ........

000d5d14 <_ZTVN5spark13EthernetClassE>:
	...
   d5d1c:	50af 000d 50a5 000d 509b 000d 5091 000d     .P...P...P...P..
   d5d2c:	5085 000d 5079 000d 57f1 000d 57f9 000d     .P..yP...W...W..
   d5d3c:	506d 000d 5065 000d 505b 000d 5051 000d     mP..eP..[P..QP..
   d5d4c:	5829 000d 7061 0070 5925 252d 2d6d 6425     )X..app.%Y-%m-%d
   d5d5c:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   d5d6c:	6d69 0065                                   ime.

000d5d70 <_ZTV9IPAddress>:
	...
   d5d78:	5361 000d 5351 000d 5353 000d               aS..QS..SS..

000d5d84 <_ZTV9USBSerial>:
	...
   d5d8c:	5439 000d 54a1 000d 5477 000d 5115 000d     9T...T..wT...Q..
   d5d9c:	5469 000d 543b 000d 544b 000d 549b 000d     iT..;T..KT...T..
   d5dac:	545b 000d 5433 000d                         [T..3T..

000d5db4 <_ZTV11USARTSerial>:
	...
   d5dbc:	553d 000d 55ab 000d 5583 000d 5115 000d     =U...U...U...Q..
   d5dcc:	5553 000d 556f 000d 5561 000d 557d 000d     SU..oU..aU..}U..
   d5ddc:	553f 000d 5545 000d                         ?U..EU..

000d5de4 <_ZTV7TwoWire>:
	...
   d5dec:	5631 000d 567b 000d 5653 000d 5633 000d     1V..{V..SV..3V..
   d5dfc:	565b 000d 5663 000d 566b 000d 5673 000d     [V..cV..kV..sV..

000d5e0c <_ZTVN5spark9WiFiClassE>:
	...
   d5e14:	5793 000d 5789 000d 577f 000d 5735 000d     .W...W...W..5W..
   d5e24:	5773 000d 5767 000d 57f1 000d 57f9 000d     sW..gW...W...W..
   d5e34:	575b 000d 5753 000d 5749 000d 573f 000d     [W..SW..IW..?W..
   d5e44:	5829 000d                                   )X..

000d5e48 <_ZTVN5spark12NetworkClassE>:
	...
   d5e50:	57b1 000d 57bb 000d 57c5 000d 57cf 000d     .W...W...W...W..
   d5e60:	57d9 000d 57e5 000d 57f1 000d 57f9 000d     .W...W...W...W..
   d5e70:	5801 000d 580d 000d 5815 000d 581f 000d     .X...X...X...X..
   d5e80:	5829 000d                                   )X..

000d5e84 <_ZSt7nothrow>:
	...

000d5e85 <link_const_variable_data_end>:
   d5e85:	00          	.byte	0x00
	...

000d5e88 <link_constructors_location>:
   d5e88:	000d4389 	.word	0x000d4389
   d5e8c:	000d50b9 	.word	0x000d50b9
   d5e90:	000d50e1 	.word	0x000d50e1
   d5e94:	000d5105 	.word	0x000d5105
   d5e98:	000d51e1 	.word	0x000d51e1
   d5e9c:	000d51f1 	.word	0x000d51f1
   d5ea0:	000d520d 	.word	0x000d520d
   d5ea4:	000d579d 	.word	0x000d579d
   d5ea8:	000d58fd 	.word	0x000d58fd

000d5eac <link_constructors_end>:
   d5eac:	00000000 	.word	0x00000000
