
d:/Coursework/Fall_2022/ECE_513/FinalProject/HeartRateMonitor/ArgonCode/SensorIoT/target/2.2.0/argon/SensorIoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000035f4  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d7610  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000007c  20039fb8  000d7614  00019fb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000047bc  2003a038  2003a038  0002a038  2**3
                  ALLOC
  6 .module_info_suffix 00000028  000d7690  000d7690  00027690  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d76b8  000d76b8  000276b8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0015e5e4  00000000  00000000  000276bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00016fd4  00000000  00000000  00185ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0002b702  00000000  00000000  0019cc74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002798  00000000  00000000  001c8376  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00007598  00000000  00000000  001cab0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003a03f  00000000  00000000  001d20a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00039c3a  00000000  00000000  0020c0e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0010c795  00000000  00000000  00245d1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00006d8c  00000000  00000000  003524b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f003 f881 	bl	d7134 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f003 f889 	bl	d7150 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	20039fb8 	.word	0x20039fb8
   d4048:	000d7614 	.word	0x000d7614
   d404c:	2003a034 	.word	0x2003a034
   d4050:	2003a038 	.word	0x2003a038
   d4054:	2003e7f1 	.word	0x2003e7f1

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
    module_user_init_hook();
   d405e:	f001 fd19 	bl	d5a94 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000d75e8 	.word	0x000d75e8
   d407c:	000d760c 	.word	0x000d760c

000d4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4080:	f000 b844 	b.w	d410c <setup>

000d4084 <module_user_loop>:
}

void module_user_loop() {
   d4084:	b508      	push	{r3, lr}
    loop();
   d4086:	f000 f885 	bl	d4194 <loop>
    _post_loop();
}
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d408e:	f001 bcb9 	b.w	d5a04 <_post_loop>

000d4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4092:	f001 b8ef 	b.w	d5274 <malloc>

000d4096 <_Znaj>:
   d4096:	f001 b8ed 	b.w	d5274 <malloc>

000d409a <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409a:	f001 b8f3 	b.w	d5284 <free>

000d409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409e:	7800      	ldrb	r0, [r0, #0]
   d40a0:	fab0 f080 	clz	r0, r0
   d40a4:	0940      	lsrs	r0, r0, #5
   d40a6:	4770      	bx	lr

000d40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a8:	2301      	movs	r3, #1
   d40aa:	7003      	strb	r3, [r0, #0]
   d40ac:	4770      	bx	lr
	...

000d40b0 <_Z14getConstraintsPKcS0_>:
      }
    }
 }

// handler to receive response from server
 void getConstraints(const char *event, const char *data) {
   d40b0:	b510      	push	{r4, lr}
   d40b2:	460c      	mov	r4, r1
    Serial.println();
   d40b4:	f002 f88c 	bl	d61d0 <_Z16_fetch_usbserialv>
   d40b8:	f001 fac5 	bl	d5646 <_ZN5Print7printlnEv>
    Serial.println(data);
   d40bc:	f002 f888 	bl	d61d0 <_Z16_fetch_usbserialv>
   d40c0:	4621      	mov	r1, r4
   d40c2:	f001 facc 	bl	d565e <_ZN5Print7printlnEPKc>
    startTime = ((int(data[14]) - 48) * 10) + ((int(data[15]) - 48) * 1);
   d40c6:	7ba2      	ldrb	r2, [r4, #14]
   d40c8:	7be3      	ldrb	r3, [r4, #15]
   d40ca:	210a      	movs	r1, #10
   d40cc:	3b30      	subs	r3, #48	; 0x30
   d40ce:	3a30      	subs	r2, #48	; 0x30
   d40d0:	fb01 3202 	mla	r2, r1, r2, r3
   d40d4:	4b0a      	ldr	r3, [pc, #40]	; (d4100 <_Z14getConstraintsPKcS0_+0x50>)
   d40d6:	601a      	str	r2, [r3, #0]
    endTime = ((int(data[29]) - 48) * 10) + ((int(data[30]) - 48) * 1);
   d40d8:	7f62      	ldrb	r2, [r4, #29]
   d40da:	7fa3      	ldrb	r3, [r4, #30]
   d40dc:	3a30      	subs	r2, #48	; 0x30
   d40de:	3b30      	subs	r3, #48	; 0x30
   d40e0:	fb01 3202 	mla	r2, r1, r2, r3
   d40e4:	4b07      	ldr	r3, [pc, #28]	; (d4104 <_Z14getConstraintsPKcS0_+0x54>)
   d40e6:	601a      	str	r2, [r3, #0]
    interval = ((int(data[49]) - 48) * 10) + ((int(data[50]) - 48) * 1);
   d40e8:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
   d40ec:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
   d40f0:	3b30      	subs	r3, #48	; 0x30
   d40f2:	3a30      	subs	r2, #48	; 0x30
   d40f4:	fb01 2303 	mla	r3, r1, r3, r2
   d40f8:	4a03      	ldr	r2, [pc, #12]	; (d4108 <_Z14getConstraintsPKcS0_+0x58>)
   d40fa:	6013      	str	r3, [r2, #0]
   d40fc:	bd10      	pop	{r4, pc}
   d40fe:	bf00      	nop
   d4100:	20039fc4 	.word	0x20039fc4
   d4104:	20039fb8 	.word	0x20039fb8
   d4108:	20039fbc 	.word	0x20039fbc

000d410c <setup>:
 {
   d410c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   Serial.begin(115200); // initialize serial communication at 115200 bits per second:
   d410e:	f002 f85f 	bl	d61d0 <_Z16_fetch_usbserialv>
   d4112:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d4116:	f002 f84f 	bl	d61b8 <_ZN9USBSerial5beginEl>
   pinMode(pulseLED, OUTPUT);
   d411a:	4b19      	ldr	r3, [pc, #100]	; (d4180 <setup+0x74>)
   d411c:	2101      	movs	r1, #1
   d411e:	7818      	ldrb	r0, [r3, #0]
   d4120:	f002 fab8 	bl	d6694 <pinMode>
   pinMode(readLED, OUTPUT);
   d4124:	4b17      	ldr	r3, [pc, #92]	; (d4184 <setup+0x78>)
   d4126:	2101      	movs	r1, #1
   d4128:	7818      	ldrb	r0, [r3, #0]
   d412a:	f002 fab3 	bl	d6694 <pinMode>
   pinMode(GREEN_LED, OUTPUT);
   d412e:	2101      	movs	r1, #1
   d4130:	2005      	movs	r0, #5
   d4132:	f002 faaf 	bl	d6694 <pinMode>
   pinMode(RED_LED, OUTPUT);
   d4136:	2101      	movs	r1, #1
   d4138:	2004      	movs	r0, #4
   d413a:	f002 faab 	bl	d6694 <pinMode>
   if (!particleSensor.begin(Wire, I2C_SPEED_FAST)) //Use default I2C port, 400kHz speed
   d413e:	f002 faff 	bl	d6740 <_Z19__fetch_global_Wirev>
   d4142:	4a11      	ldr	r2, [pc, #68]	; (d4188 <setup+0x7c>)
   d4144:	4601      	mov	r1, r0
   d4146:	2357      	movs	r3, #87	; 0x57
   d4148:	4810      	ldr	r0, [pc, #64]	; (d418c <setup+0x80>)
   d414a:	f000 fb25 	bl	d4798 <_ZN8MAX301055beginER7TwoWiremh>
   d414e:	b928      	cbnz	r0, d415c <setup+0x50>
     Serial.println(F("MAX30105 was not found. Please check wiring/power."));
   d4150:	f002 f83e 	bl	d61d0 <_Z16_fetch_usbserialv>
   d4154:	490e      	ldr	r1, [pc, #56]	; (d4190 <setup+0x84>)
   d4156:	f001 fa8c 	bl	d5672 <_ZN5Print7printlnEPK19__FlashStringHelper>
     while (1);
   d415a:	e7fe      	b.n	d415a <setup+0x4e>
   particleSensor.setup(ledBrightness, sampleAverage, ledMode, sampleRate, pulseWidth, adcRange); //Configure sensor with these settings
   d415c:	f240 139b 	movw	r3, #411	; 0x19b
   d4160:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   d4164:	e9cd 3201 	strd	r3, r2, [sp, #4]
   d4168:	2364      	movs	r3, #100	; 0x64
   d416a:	9300      	str	r3, [sp, #0]
   d416c:	4807      	ldr	r0, [pc, #28]	; (d418c <setup+0x80>)
   d416e:	2302      	movs	r3, #2
   d4170:	2204      	movs	r2, #4
   d4172:	213c      	movs	r1, #60	; 0x3c
   d4174:	f000 fbcc 	bl	d4910 <_ZN8MAX301055setupEhhhiii>
 }
   d4178:	b005      	add	sp, #20
   d417a:	f85d fb04 	ldr.w	pc, [sp], #4
   d417e:	bf00      	nop
   d4180:	20039fc0 	.word	0x20039fc0
   d4184:	20039fc1 	.word	0x20039fc1
   d4188:	00061a80 	.word	0x00061a80
   d418c:	2003e068 	.word	0x2003e068
   d4190:	000d72d4 	.word	0x000d72d4

000d4194 <loop>:
 {
   d4194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4198:	ed2d 8b02 	vpush	{d8}
   d419c:	b091      	sub	sp, #68	; 0x44
    int hour = Time.hour() - 7;
   d419e:	f001 fbd5 	bl	d594c <_ZN9TimeClass4hourEv>
    if (hour >= startTime && hour <= endTime) {
   d41a2:	4abc      	ldr	r2, [pc, #752]	; (d4494 <loop+0x300>)
    if (hour < 0) {
   d41a4:	1fc3      	subs	r3, r0, #7
    if (hour >= startTime && hour <= endTime) {
   d41a6:	6812      	ldr	r2, [r2, #0]
        hour = 24 + hour;
   d41a8:	bf48      	it	mi
   d41aa:	f100 0311 	addmi.w	r3, r0, #17
    if (hour >= startTime && hour <= endTime) {
   d41ae:	429a      	cmp	r2, r3
   d41b0:	f300 80e6 	bgt.w	d4380 <loop+0x1ec>
   d41b4:	4ab8      	ldr	r2, [pc, #736]	; (d4498 <loop+0x304>)
   d41b6:	6812      	ldr	r2, [r2, #0]
   d41b8:	429a      	cmp	r2, r3
   d41ba:	f2c0 80e1 	blt.w	d4380 <loop+0x1ec>
      start = Time.now();
   d41be:	f001 fbb5 	bl	d592c <_ZN9TimeClass3nowEv>
      bufferLength = 100; //buffer length of 100 stores 4 seconds of samples running at 25sps
   d41c2:	4cb6      	ldr	r4, [pc, #728]	; (d449c <loop+0x308>)
      start = Time.now();
   d41c4:	9006      	str	r0, [sp, #24]
      bufferLength = 100; //buffer length of 100 stores 4 seconds of samples running at 25sps
   d41c6:	2364      	movs	r3, #100	; 0x64
   d41c8:	6023      	str	r3, [r4, #0]
      Serial.println("Calibrating");
   d41ca:	f002 f801 	bl	d61d0 <_Z16_fetch_usbserialv>
   d41ce:	49b4      	ldr	r1, [pc, #720]	; (d44a0 <loop+0x30c>)
        while (particleSensor.available() == false) //do we have new data?
   d41d0:	4db4      	ldr	r5, [pc, #720]	; (d44a4 <loop+0x310>)
        redBuffer[i] = particleSensor.getRed();
   d41d2:	f8df 92e8 	ldr.w	r9, [pc, #744]	; d44bc <loop+0x328>
        irBuffer[i] = particleSensor.getIR();
   d41d6:	f8df 82e8 	ldr.w	r8, [pc, #744]	; d44c0 <loop+0x32c>
      Serial.println("Calibrating");
   d41da:	f001 fa40 	bl	d565e <_ZN5Print7printlnEPKc>
   d41de:	2600      	movs	r6, #0
      for (byte i = 0 ; i < bufferLength ; i++) {
   d41e0:	6823      	ldr	r3, [r4, #0]
   d41e2:	b2f7      	uxtb	r7, r6
   d41e4:	429f      	cmp	r7, r3
   d41e6:	da16      	bge.n	d4216 <loop+0x82>
        while (particleSensor.available() == false) //do we have new data?
   d41e8:	4628      	mov	r0, r5
   d41ea:	f000 f9a7 	bl	d453c <_ZN8MAX301059availableEv>
   d41ee:	b918      	cbnz	r0, d41f8 <loop+0x64>
          particleSensor.check(); //Check the sensor for new data
   d41f0:	4628      	mov	r0, r5
   d41f2:	f000 f9f1 	bl	d45d8 <_ZN8MAX301055checkEv>
        while (particleSensor.available() == false) //do we have new data?
   d41f6:	e7f7      	b.n	d41e8 <loop+0x54>
        redBuffer[i] = particleSensor.getRed();
   d41f8:	4628      	mov	r0, r5
   d41fa:	f000 faa5 	bl	d4748 <_ZN8MAX301056getRedEv>
   d41fe:	f849 0027 	str.w	r0, [r9, r7, lsl #2]
        irBuffer[i] = particleSensor.getIR();
   d4202:	4628      	mov	r0, r5
   d4204:	f000 faae 	bl	d4764 <_ZN8MAX301055getIREv>
   d4208:	f848 0027 	str.w	r0, [r8, r7, lsl #2]
        particleSensor.nextSample(); //We're finished with this sample so move to next sample
   d420c:	4628      	mov	r0, r5
   d420e:	f000 f99f 	bl	d4550 <_ZN8MAX3010510nextSampleEv>
      for (byte i = 0 ; i < bufferLength ; i++) {
   d4212:	3601      	adds	r6, #1
   d4214:	e7e4      	b.n	d41e0 <loop+0x4c>
      Serial.println("Calibration done");
   d4216:	f001 ffdb 	bl	d61d0 <_Z16_fetch_usbserialv>
      maxim_heart_rate_and_oxygen_saturation(irBuffer, bufferLength, redBuffer, &spo2, &validSPO2, &heartRate, &validHeartRate);
   d421a:	4fa3      	ldr	r7, [pc, #652]	; (d44a8 <loop+0x314>)
      Serial.println("Calibration done");
   d421c:	49a3      	ldr	r1, [pc, #652]	; (d44ac <loop+0x318>)
      maxim_heart_rate_and_oxygen_saturation(irBuffer, bufferLength, redBuffer, &spo2, &validSPO2, &heartRate, &validHeartRate);
   d421e:	4da4      	ldr	r5, [pc, #656]	; (d44b0 <loop+0x31c>)
   d4220:	4ea4      	ldr	r6, [pc, #656]	; (d44b4 <loop+0x320>)
              heartRateStr = String(heartRate).c_str();
   d4222:	f8df 92d8 	ldr.w	r9, [pc, #728]	; d44fc <loop+0x368>
      Serial.println("Calibration done");
   d4226:	f001 fa1a 	bl	d565e <_ZN5Print7printlnEPKc>
      maxim_heart_rate_and_oxygen_saturation(irBuffer, bufferLength, redBuffer, &spo2, &validSPO2, &heartRate, &validHeartRate);
   d422a:	9702      	str	r7, [sp, #8]
   d422c:	4ba2      	ldr	r3, [pc, #648]	; (d44b8 <loop+0x324>)
   d422e:	4aa3      	ldr	r2, [pc, #652]	; (d44bc <loop+0x328>)
   d4230:	6821      	ldr	r1, [r4, #0]
   d4232:	48a3      	ldr	r0, [pc, #652]	; (d44c0 <loop+0x32c>)
   d4234:	9501      	str	r5, [sp, #4]
   d4236:	9600      	str	r6, [sp, #0]
   d4238:	f000 fcce 	bl	d4bd8 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_>
      while (terminate) { //while loop runs for 20 seconds during which green light is on so user to place finger on sensor
   d423c:	9705      	str	r7, [sp, #20]
            while (particleSensor.available() == false) { //do we have new data? 
   d423e:	4f99      	ldr	r7, [pc, #612]	; (d44a4 <loop+0x310>)
        digitalWrite(GREEN_LED, HIGH);
   d4240:	2101      	movs	r1, #1
   d4242:	2005      	movs	r0, #5
   d4244:	f002 fa37 	bl	d66b6 <digitalWrite>
        digitalWrite(RED_LED, LOW);
   d4248:	2100      	movs	r1, #0
   d424a:	2004      	movs	r0, #4
   d424c:	f002 fa33 	bl	d66b6 <digitalWrite>
        end = Time.now();
   d4250:	f001 fb6c 	bl	d592c <_ZN9TimeClass3nowEv>
        elapsed = end - start;
   d4254:	9b06      	ldr	r3, [sp, #24]
   d4256:	eba0 0803 	sub.w	r8, r0, r3
   d425a:	4640      	mov	r0, r8
   d425c:	f002 fbee 	bl	d6a3c <__aeabi_i2d>
        if (elapsed >= 20.0 /* seconds */) { //after 20 seconds has passed either save data to database or save in onboard memory if not connected
   d4260:	f1b8 0f13 	cmp.w	r8, #19
        elapsed = end - start;
   d4264:	ec41 0b18 	vmov	d8, r0, r1
        if (elapsed >= 20.0 /* seconds */) { //after 20 seconds has passed either save data to database or save in onboard memory if not connected
   d4268:	f340 80ac 	ble.w	d43c4 <loop+0x230>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d426c:	f000 ffda 	bl	d5224 <spark_cloud_flag_connected>
          if (Particle.connected() == true) { //if connected to database send all data to database with POST request
   d4270:	2800      	cmp	r0, #0
   d4272:	f000 808a 	beq.w	d438a <loop+0x1f6>
              String data = String::format("{ \"heartRate\": \"%s\", \"spo2\": \"%s\", \"timeStamp\": \"%s\" }", heartRateStr.c_str(), spo2Str.c_str(), String(Time.now()).c_str());
   d4276:	4b93      	ldr	r3, [pc, #588]	; (d44c4 <loop+0x330>)
   d4278:	f8d9 8000 	ldr.w	r8, [r9]
   d427c:	681b      	ldr	r3, [r3, #0]
   d427e:	9307      	str	r3, [sp, #28]
   d4280:	f001 fb54 	bl	d592c <_ZN9TimeClass3nowEv>
   d4284:	220a      	movs	r2, #10
   d4286:	4601      	mov	r1, r0
   d4288:	a80c      	add	r0, sp, #48	; 0x30
   d428a:	f001 f942 	bl	d5512 <_ZN6StringC1Elh>
   d428e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   d4290:	9b07      	ldr	r3, [sp, #28]
   d4292:	498d      	ldr	r1, [pc, #564]	; (d44c8 <loop+0x334>)
   d4294:	9200      	str	r2, [sp, #0]
   d4296:	a808      	add	r0, sp, #32
   d4298:	4642      	mov	r2, r8
   d429a:	f001 f94d 	bl	d5538 <_ZN6String6formatEPKcz>
   d429e:	a80c      	add	r0, sp, #48	; 0x30
   d42a0:	f001 f8c6 	bl	d5430 <_ZN6StringD1Ev>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d42a4:	4b89      	ldr	r3, [pc, #548]	; (d44cc <loop+0x338>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d42a6:	9a08      	ldr	r2, [sp, #32]
   d42a8:	781b      	ldrb	r3, [r3, #0]
   d42aa:	f88d 3000 	strb.w	r3, [sp]
   d42ae:	4988      	ldr	r1, [pc, #544]	; (d44d0 <loop+0x33c>)
   d42b0:	233c      	movs	r3, #60	; 0x3c
   d42b2:	a80c      	add	r0, sp, #48	; 0x30
   d42b4:	f001 fd46 	bl	d5d44 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d42b8:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   d42bc:	f1b8 0f00 	cmp.w	r8, #0
   d42c0:	d015      	beq.n	d42ee <loop+0x15a>
      if (--_M_use_count == 0)
   d42c2:	f8d8 3004 	ldr.w	r3, [r8, #4]
   d42c6:	3b01      	subs	r3, #1
   d42c8:	f8c8 3004 	str.w	r3, [r8, #4]
   d42cc:	b97b      	cbnz	r3, d42ee <loop+0x15a>
          _M_dispose();
   d42ce:	f8d8 3000 	ldr.w	r3, [r8]
   d42d2:	4640      	mov	r0, r8
   d42d4:	689b      	ldr	r3, [r3, #8]
   d42d6:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d42d8:	f8d8 3008 	ldr.w	r3, [r8, #8]
   d42dc:	3b01      	subs	r3, #1
   d42de:	f8c8 3008 	str.w	r3, [r8, #8]
   d42e2:	b923      	cbnz	r3, d42ee <loop+0x15a>
            _M_destroy();
   d42e4:	f8d8 3000 	ldr.w	r3, [r8]
   d42e8:	4640      	mov	r0, r8
   d42ea:	68db      	ldr	r3, [r3, #12]
   d42ec:	4798      	blx	r3
              Serial.println("\nPublished");
   d42ee:	f001 ff6f 	bl	d61d0 <_Z16_fetch_usbserialv>
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   d42f2:	f04f 0800 	mov.w	r8, #0
   d42f6:	4977      	ldr	r1, [pc, #476]	; (d44d4 <loop+0x340>)
   d42f8:	f001 f9b1 	bl	d565e <_ZN5Print7printlnEPKc>
   d42fc:	2301      	movs	r3, #1
   d42fe:	e9cd 8800 	strd	r8, r8, [sp]
   d4302:	4975      	ldr	r1, [pc, #468]	; (d44d8 <loop+0x344>)
   d4304:	4875      	ldr	r0, [pc, #468]	; (d44dc <loop+0x348>)
   d4306:	4642      	mov	r2, r8
   d4308:	f000 ff9c 	bl	d5244 <spark_subscribe>
              i = 0; //reset index so memory array is populated from 0 index again when offline since all data has been sent to database
   d430c:	4b74      	ldr	r3, [pc, #464]	; (d44e0 <loop+0x34c>)
              String data = String::format("{ \"heartRate\": \"%s\", \"spo2\": \"%s\", \"timeStamp\": \"%s\" }", heartRateStr.c_str(), spo2Str.c_str(), String(Time.now()).c_str());
   d430e:	a808      	add	r0, sp, #32
              i = 0; //reset index so memory array is populated from 0 index again when offline since all data has been sent to database
   d4310:	f8c3 8000 	str.w	r8, [r3]
              String data = String::format("{ \"heartRate\": \"%s\", \"spo2\": \"%s\", \"timeStamp\": \"%s\" }", heartRateStr.c_str(), spo2Str.c_str(), String(Time.now()).c_str());
   d4314:	f001 f88c 	bl	d5430 <_ZN6StringD1Ev>
          Serial.print(F(", HR="));
   d4318:	f001 ff5a 	bl	d61d0 <_Z16_fetch_usbserialv>
   d431c:	4971      	ldr	r1, [pc, #452]	; (d44e4 <loop+0x350>)
   d431e:	f001 f98e 	bl	d563e <_ZN5Print5printEPK19__FlashStringHelper>
          Serial.print(heartRateStr.c_str());
   d4322:	f001 ff55 	bl	d61d0 <_Z16_fetch_usbserialv>
   d4326:	f8d9 1000 	ldr.w	r1, [r9]
   d432a:	f001 f981 	bl	d5630 <_ZN5Print5printEPKc>
          Serial.print(F(", SPO2="));
   d432e:	f001 ff4f 	bl	d61d0 <_Z16_fetch_usbserialv>
   d4332:	496d      	ldr	r1, [pc, #436]	; (d44e8 <loop+0x354>)
   d4334:	f001 f983 	bl	d563e <_ZN5Print5printEPK19__FlashStringHelper>
          Serial.print(heartRateStr.c_str());
   d4338:	f001 ff4a 	bl	d61d0 <_Z16_fetch_usbserialv>
   d433c:	f8d9 1000 	ldr.w	r1, [r9]
   d4340:	f001 f976 	bl	d5630 <_ZN5Print5printEPKc>
          digitalWrite(GREEN_LED, LOW);
   d4344:	2100      	movs	r1, #0
   d4346:	2005      	movs	r0, #5
   d4348:	f002 f9b5 	bl	d66b6 <digitalWrite>
          digitalWrite(RED_LED, HIGH);
   d434c:	2101      	movs	r1, #1
   d434e:	2004      	movs	r0, #4
   d4350:	f002 f9b1 	bl	d66b6 <digitalWrite>
          delay(interval * 60000);
   d4354:	4b65      	ldr	r3, [pc, #404]	; (d44ec <loop+0x358>)
   d4356:	681b      	ldr	r3, [r3, #0]
   d4358:	f64e 2060 	movw	r0, #60000	; 0xea60
   d435c:	4358      	muls	r0, r3
   d435e:	f001 fb0b 	bl	d5978 <delay>
          terminate = 0;
   d4362:	f04f 0800 	mov.w	r8, #0
        Serial.println(elapsed);
   d4366:	f001 ff33 	bl	d61d0 <_Z16_fetch_usbserialv>
   d436a:	eeb0 0a48 	vmov.f32	s0, s16
   d436e:	eef0 0a68 	vmov.f32	s1, s17
   d4372:	2102      	movs	r1, #2
   d4374:	f001 fa66 	bl	d5844 <_ZN5Print7printlnEdi>
      while (terminate) { //while loop runs for 20 seconds during which green light is on so user to place finger on sensor
   d4378:	f1b8 0f00 	cmp.w	r8, #0
   d437c:	f47f af60 	bne.w	d4240 <loop+0xac>
 }
   d4380:	b011      	add	sp, #68	; 0x44
   d4382:	ecbd 8b02 	vpop	{d8}
   d4386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
              memoryHR[i] = heartRate;
   d438a:	f8df b154 	ldr.w	fp, [pc, #340]	; d44e0 <loop+0x34c>
   d438e:	4a58      	ldr	r2, [pc, #352]	; (d44f0 <loop+0x35c>)
   d4390:	f8db 8000 	ldr.w	r8, [fp]
   d4394:	6828      	ldr	r0, [r5, #0]
   d4396:	eb02 03c8 	add.w	r3, r2, r8, lsl #3
   d439a:	9307      	str	r3, [sp, #28]
   d439c:	f002 fb4e 	bl	d6a3c <__aeabi_i2d>
   d43a0:	9b07      	ldr	r3, [sp, #28]
              memorySPO2[i] = spo2;
   d43a2:	4a54      	ldr	r2, [pc, #336]	; (d44f4 <loop+0x360>)
              memoryHR[i] = heartRate;
   d43a4:	e9c3 0100 	strd	r0, r1, [r3]
              memorySPO2[i] = spo2;
   d43a8:	4b43      	ldr	r3, [pc, #268]	; (d44b8 <loop+0x324>)
              memoryHR[i] = heartRate;
   d43aa:	ea4f 0ac8 	mov.w	sl, r8, lsl #3
              memorySPO2[i] = spo2;
   d43ae:	6818      	ldr	r0, [r3, #0]
   d43b0:	4492      	add	sl, r2
   d43b2:	f002 fb43 	bl	d6a3c <__aeabi_i2d>
              i++;
   d43b6:	f108 0301 	add.w	r3, r8, #1
              memorySPO2[i] = spo2;
   d43ba:	e9ca 0100 	strd	r0, r1, [sl]
              i++;
   d43be:	f8cb 3000 	str.w	r3, [fp]
   d43c2:	e7a9      	b.n	d4318 <loop+0x184>
   d43c4:	493d      	ldr	r1, [pc, #244]	; (d44bc <loop+0x328>)
   d43c6:	4a3e      	ldr	r2, [pc, #248]	; (d44c0 <loop+0x32c>)
        if (elapsed >= 20.0 /* seconds */) { //after 20 seconds has passed either save data to database or save in onboard memory if not connected
   d43c8:	234b      	movs	r3, #75	; 0x4b
   d43ca:	468a      	mov	sl, r1
   d43cc:	4693      	mov	fp, r2
            redBuffer[i - 25] = redBuffer[i];
   d43ce:	6e48      	ldr	r0, [r1, #100]	; 0x64
   d43d0:	f841 0b04 	str.w	r0, [r1], #4
            irBuffer[i - 25] = irBuffer[i];
   d43d4:	3b01      	subs	r3, #1
   d43d6:	6e50      	ldr	r0, [r2, #100]	; 0x64
   d43d8:	f842 0b04 	str.w	r0, [r2], #4
          for (byte i = 25; i < 100; i++) {
   d43dc:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d43e0:	d1f5      	bne.n	d43ce <loop+0x23a>
   d43e2:	f04f 084b 	mov.w	r8, #75	; 0x4b
            while (particleSensor.available() == false) { //do we have new data? 
   d43e6:	4638      	mov	r0, r7
   d43e8:	f000 f8a8 	bl	d453c <_ZN8MAX301059availableEv>
   d43ec:	b918      	cbnz	r0, d43f6 <loop+0x262>
              particleSensor.check(); //Check the sensor for new data
   d43ee:	4638      	mov	r0, r7
   d43f0:	f000 f8f2 	bl	d45d8 <_ZN8MAX301055checkEv>
            while (particleSensor.available() == false) { //do we have new data? 
   d43f4:	e7f7      	b.n	d43e6 <loop+0x252>
            digitalWrite(readLED, !digitalRead(readLED)); //Blink onboard LED with every data read
   d43f6:	4b40      	ldr	r3, [pc, #256]	; (d44f8 <loop+0x364>)
   d43f8:	781b      	ldrb	r3, [r3, #0]
   d43fa:	9307      	str	r3, [sp, #28]
   d43fc:	4618      	mov	r0, r3
   d43fe:	f002 f973 	bl	d66e8 <digitalRead>
   d4402:	9b07      	ldr	r3, [sp, #28]
   d4404:	fab0 f180 	clz	r1, r0
   d4408:	0949      	lsrs	r1, r1, #5
   d440a:	4618      	mov	r0, r3
   d440c:	f002 f953 	bl	d66b6 <digitalWrite>
            redBuffer[i] = particleSensor.getRed();
   d4410:	4638      	mov	r0, r7
   d4412:	f000 f999 	bl	d4748 <_ZN8MAX301056getRedEv>
   d4416:	f84a 0028 	str.w	r0, [sl, r8, lsl #2]
            irBuffer[i] = particleSensor.getIR();
   d441a:	4638      	mov	r0, r7
   d441c:	f000 f9a2 	bl	d4764 <_ZN8MAX301055getIREv>
   d4420:	f84b 0028 	str.w	r0, [fp, r8, lsl #2]
            particleSensor.nextSample(); //We're finished with this sample so move to next sample
   d4424:	4638      	mov	r0, r7
   d4426:	f000 f893 	bl	d4550 <_ZN8MAX3010510nextSampleEv>
            if (validHeartRate == 1) {
   d442a:	9b05      	ldr	r3, [sp, #20]
   d442c:	f993 3000 	ldrsb.w	r3, [r3]
   d4430:	2b01      	cmp	r3, #1
   d4432:	d10b      	bne.n	d444c <loop+0x2b8>
              heartRateStr = String(heartRate).c_str();
   d4434:	6829      	ldr	r1, [r5, #0]
   d4436:	220a      	movs	r2, #10
   d4438:	a80c      	add	r0, sp, #48	; 0x30
   d443a:	f001 f86a 	bl	d5512 <_ZN6StringC1Elh>
   d443e:	990c      	ldr	r1, [sp, #48]	; 0x30
   d4440:	4648      	mov	r0, r9
   d4442:	f001 f854 	bl	d54ee <_ZN6StringaSEPKc>
   d4446:	a80c      	add	r0, sp, #48	; 0x30
   d4448:	f000 fff2 	bl	d5430 <_ZN6StringD1Ev>
            if (validSPO2 == 1) {
   d444c:	f996 3000 	ldrsb.w	r3, [r6]
   d4450:	2b01      	cmp	r3, #1
   d4452:	d10c      	bne.n	d446e <loop+0x2da>
              spo2Str = String(spo2).c_str();
   d4454:	4b18      	ldr	r3, [pc, #96]	; (d44b8 <loop+0x324>)
   d4456:	220a      	movs	r2, #10
   d4458:	6819      	ldr	r1, [r3, #0]
   d445a:	a80c      	add	r0, sp, #48	; 0x30
   d445c:	f001 f859 	bl	d5512 <_ZN6StringC1Elh>
   d4460:	990c      	ldr	r1, [sp, #48]	; 0x30
   d4462:	4818      	ldr	r0, [pc, #96]	; (d44c4 <loop+0x330>)
   d4464:	f001 f843 	bl	d54ee <_ZN6StringaSEPKc>
   d4468:	a80c      	add	r0, sp, #48	; 0x30
   d446a:	f000 ffe1 	bl	d5430 <_ZN6StringD1Ev>
          for (byte i = 75; i < 100; i++) {
   d446e:	f108 0801 	add.w	r8, r8, #1
   d4472:	f1b8 0f64 	cmp.w	r8, #100	; 0x64
   d4476:	d1b6      	bne.n	d43e6 <loop+0x252>
          maxim_heart_rate_and_oxygen_saturation(irBuffer, bufferLength, redBuffer, &spo2, &validSPO2, &heartRate, &validHeartRate);
   d4478:	9b05      	ldr	r3, [sp, #20]
   d447a:	4a10      	ldr	r2, [pc, #64]	; (d44bc <loop+0x328>)
   d447c:	6821      	ldr	r1, [r4, #0]
   d447e:	4810      	ldr	r0, [pc, #64]	; (d44c0 <loop+0x32c>)
   d4480:	9600      	str	r6, [sp, #0]
   d4482:	e9cd 5301 	strd	r5, r3, [sp, #4]
   d4486:	4b0c      	ldr	r3, [pc, #48]	; (d44b8 <loop+0x324>)
   d4488:	f000 fba6 	bl	d4bd8 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_>
   d448c:	f04f 0801 	mov.w	r8, #1
   d4490:	e769      	b.n	d4366 <loop+0x1d2>
   d4492:	bf00      	nop
   d4494:	20039fc4 	.word	0x20039fc4
   d4498:	20039fb8 	.word	0x20039fb8
   d449c:	2003a03c 	.word	0x2003a03c
   d44a0:	000d7307 	.word	0x000d7307
   d44a4:	2003e068 	.word	0x2003e068
   d44a8:	2003e214 	.word	0x2003e214
   d44ac:	000d7313 	.word	0x000d7313
   d44b0:	2003a040 	.word	0x2003a040
   d44b4:	2003e215 	.word	0x2003e215
   d44b8:	2003e200 	.word	0x2003e200
   d44bc:	2003e070 	.word	0x2003e070
   d44c0:	2003a058 	.word	0x2003a058
   d44c4:	2003e204 	.word	0x2003e204
   d44c8:	000d7324 	.word	0x000d7324
   d44cc:	2003a038 	.word	0x2003a038
   d44d0:	000d7374 	.word	0x000d7374
   d44d4:	000d735b 	.word	0x000d735b
   d44d8:	000d40b1 	.word	0x000d40b1
   d44dc:	000d7366 	.word	0x000d7366
   d44e0:	2003a054 	.word	0x2003a054
   d44e4:	000d737f 	.word	0x000d737f
   d44e8:	000d7385 	.word	0x000d7385
   d44ec:	20039fbc 	.word	0x20039fbc
   d44f0:	2003a1e8 	.word	0x2003a1e8
   d44f4:	2003c128 	.word	0x2003c128
   d44f8:	20039fc1 	.word	0x20039fc1
   d44fc:	2003a044 	.word	0x2003a044

000d4500 <_GLOBAL__sub_I_particleSensor>:
   d4500:	b508      	push	{r3, lr}
        val_(val) {
   d4502:	4b08      	ldr	r3, [pc, #32]	; (d4524 <_GLOBAL__sub_I_particleSensor+0x24>)
 MAX30105 particleSensor;
   d4504:	4808      	ldr	r0, [pc, #32]	; (d4528 <_GLOBAL__sub_I_particleSensor+0x28>)
   d4506:	2201      	movs	r2, #1
   d4508:	701a      	strb	r2, [r3, #0]
   d450a:	f000 f815 	bl	d4538 <_ZN8MAX30105C1Ev>
 String heartRateStr = "0.00"; //strings to send reading to database
   d450e:	4907      	ldr	r1, [pc, #28]	; (d452c <_GLOBAL__sub_I_particleSensor+0x2c>)
   d4510:	4807      	ldr	r0, [pc, #28]	; (d4530 <_GLOBAL__sub_I_particleSensor+0x30>)
   d4512:	f000 ffd8 	bl	d54c6 <_ZN6StringC1EPKc>
   d4516:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 String spo2Str = "0.00";
   d451a:	4904      	ldr	r1, [pc, #16]	; (d452c <_GLOBAL__sub_I_particleSensor+0x2c>)
   d451c:	4805      	ldr	r0, [pc, #20]	; (d4534 <_GLOBAL__sub_I_particleSensor+0x34>)
   d451e:	f000 bfd2 	b.w	d54c6 <_ZN6StringC1EPKc>
   d4522:	bf00      	nop
   d4524:	2003a038 	.word	0x2003a038
   d4528:	2003e068 	.word	0x2003e068
   d452c:	000d738d 	.word	0x000d738d
   d4530:	2003a044 	.word	0x2003a044
   d4534:	2003e204 	.word	0x2003e204

000d4538 <_ZN8MAX30105C1Ev>:
  byte tail;
} sense; //This is our circular buffer of readings from the sensor

MAX30105::MAX30105() {
  // Constructor
}
   d4538:	4770      	bx	lr
	...

000d453c <_ZN8MAX301059availableEv>:
//

//Tell caller how many samples are available
uint8_t MAX30105::available(void)
{
  uint8_t numberOfSamples = sense.head - sense.tail;
   d453c:	4b03      	ldr	r3, [pc, #12]	; (d454c <_ZN8MAX301059availableEv+0x10>)
   d453e:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
   d4542:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
   d4546:	1ac0      	subs	r0, r0, r3
  if (numberOfSamples < 0) numberOfSamples += STORAGE_SIZE;

  return (numberOfSamples);
}
   d4548:	b2c0      	uxtb	r0, r0
   d454a:	4770      	bx	lr
   d454c:	2003e218 	.word	0x2003e218

000d4550 <_ZN8MAX3010510nextSampleEv>:
  uint8_t numberOfSamples = sense.head - sense.tail;
   d4550:	4a06      	ldr	r2, [pc, #24]	; (d456c <_ZN8MAX3010510nextSampleEv+0x1c>)
   d4552:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
}

//Advance the tail
void MAX30105::nextSample(void)
{
  if(available()) //Only advance the tail if new data is available
   d4556:	f892 1030 	ldrb.w	r1, [r2, #48]	; 0x30
   d455a:	4299      	cmp	r1, r3
  {
    sense.tail++;
   d455c:	bf1e      	ittt	ne
   d455e:	3301      	addne	r3, #1
    sense.tail %= STORAGE_SIZE; //Wrap condition
   d4560:	f003 0303 	andne.w	r3, r3, #3
   d4564:	f882 3031 	strbne.w	r3, [r2, #49]	; 0x31
  }
}
   d4568:	4770      	bx	lr
   d456a:	bf00      	nop
   d456c:	2003e218 	.word	0x2003e218

000d4570 <_ZN8MAX3010513readRegister8Ehh>:
}

//
// Low-level I2C Communication
//
uint8_t MAX30105::readRegister8(uint8_t address, uint8_t reg) {
   d4570:	b570      	push	{r4, r5, r6, lr}
   d4572:	4604      	mov	r4, r0
  _i2cPort->beginTransmission(address);
   d4574:	6800      	ldr	r0, [r0, #0]
uint8_t MAX30105::readRegister8(uint8_t address, uint8_t reg) {
   d4576:	4616      	mov	r6, r2
   d4578:	460d      	mov	r5, r1
  _i2cPort->beginTransmission(address);
   d457a:	f001 ff51 	bl	d6420 <_ZN7TwoWire17beginTransmissionEh>
  _i2cPort->write(reg);
   d457e:	6820      	ldr	r0, [r4, #0]
   d4580:	6803      	ldr	r3, [r0, #0]
   d4582:	4631      	mov	r1, r6
   d4584:	689b      	ldr	r3, [r3, #8]
   d4586:	4798      	blx	r3
  _i2cPort->endTransmission(false);
   d4588:	2100      	movs	r1, #0
   d458a:	6820      	ldr	r0, [r4, #0]
   d458c:	f001 ff4f 	bl	d642e <_ZN7TwoWire15endTransmissionEh>
  _i2cPort->requestFrom(address, 1);   // Request 1 byte
   d4590:	4629      	mov	r1, r5
   d4592:	6820      	ldr	r0, [r4, #0]
   d4594:	2201      	movs	r2, #1
   d4596:	f001 ff40 	bl	d641a <_ZN7TwoWire11requestFromEhj>

  int tries = 0;
   d459a:	2500      	movs	r5, #0
  while (!_i2cPort->available())
   d459c:	6820      	ldr	r0, [r4, #0]
   d459e:	6803      	ldr	r3, [r0, #0]
   d45a0:	691b      	ldr	r3, [r3, #16]
   d45a2:	4798      	blx	r3
   d45a4:	b958      	cbnz	r0, d45be <_ZN8MAX3010513readRegister8Ehh+0x4e>
  {
    delay(1);
   d45a6:	2001      	movs	r0, #1
    if (tries++ > 200) break;
   d45a8:	3501      	adds	r5, #1
    delay(1);
   d45aa:	f001 f9e5 	bl	d5978 <delay>
    if (tries++ > 200) break;
   d45ae:	2dca      	cmp	r5, #202	; 0xca
   d45b0:	d1f4      	bne.n	d459c <_ZN8MAX3010513readRegister8Ehh+0x2c>
  }
  if (tries == 200) return (0); //Fail

  return (_i2cPort->read());
   d45b2:	6820      	ldr	r0, [r4, #0]
   d45b4:	6803      	ldr	r3, [r0, #0]
   d45b6:	695b      	ldr	r3, [r3, #20]
   d45b8:	4798      	blx	r3
   d45ba:	b2c0      	uxtb	r0, r0
}
   d45bc:	bd70      	pop	{r4, r5, r6, pc}
  if (tries == 200) return (0); //Fail
   d45be:	2dc8      	cmp	r5, #200	; 0xc8
   d45c0:	d1f7      	bne.n	d45b2 <_ZN8MAX3010513readRegister8Ehh+0x42>
   d45c2:	2000      	movs	r0, #0
   d45c4:	e7fa      	b.n	d45bc <_ZN8MAX3010513readRegister8Ehh+0x4c>

000d45c6 <_ZN8MAX3010515getWritePointerEv>:
  return (readRegister8(_i2caddr, MAX30105_FIFOWRITEPTR));
   d45c6:	7901      	ldrb	r1, [r0, #4]
   d45c8:	2204      	movs	r2, #4
   d45ca:	f7ff bfd1 	b.w	d4570 <_ZN8MAX3010513readRegister8Ehh>

000d45ce <_ZN8MAX3010514getReadPointerEv>:
  return (readRegister8(_i2caddr, MAX30105_FIFOREADPTR));
   d45ce:	7901      	ldrb	r1, [r0, #4]
   d45d0:	2206      	movs	r2, #6
   d45d2:	f7ff bfcd 	b.w	d4570 <_ZN8MAX3010513readRegister8Ehh>
	...

000d45d8 <_ZN8MAX301055checkEv>:
{
   d45d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d45dc:	4604      	mov	r4, r0
  byte readPointer = getReadPointer();
   d45de:	f7ff fff6 	bl	d45ce <_ZN8MAX3010514getReadPointerEv>
   d45e2:	4606      	mov	r6, r0
  byte writePointer = getWritePointer();
   d45e4:	4620      	mov	r0, r4
   d45e6:	f7ff ffee 	bl	d45c6 <_ZN8MAX3010515getWritePointerEv>
  if (readPointer != writePointer)
   d45ea:	4286      	cmp	r6, r0
   d45ec:	f000 808f 	beq.w	d470e <_ZN8MAX301055checkEv+0x136>
    if (numberOfSamples < 0) numberOfSamples += 32; //Wrap condition
   d45f0:	1b86      	subs	r6, r0, r6
    _i2cPort->beginTransmission(MAX30105_ADDRESS);
   d45f2:	f04f 0157 	mov.w	r1, #87	; 0x57
   d45f6:	6820      	ldr	r0, [r4, #0]
    int bytesLeftToRead = numberOfSamples * activeLEDs * 3;
   d45f8:	7967      	ldrb	r7, [r4, #5]
        sense.head %= STORAGE_SIZE; //Wrap condition
   d45fa:	f8df 811c 	ldr.w	r8, [pc, #284]	; d4718 <_ZN8MAX301055checkEv+0x140>
    if (numberOfSamples < 0) numberOfSamples += 32; //Wrap condition
   d45fe:	bf48      	it	mi
   d4600:	3620      	addmi	r6, #32
    _i2cPort->beginTransmission(MAX30105_ADDRESS);
   d4602:	f001 ff11 	bl	d6428 <_ZN7TwoWire17beginTransmissionEi>
    _i2cPort->write(MAX30105_FIFODATA);
   d4606:	6820      	ldr	r0, [r4, #0]
   d4608:	6803      	ldr	r3, [r0, #0]
   d460a:	2107      	movs	r1, #7
   d460c:	689b      	ldr	r3, [r3, #8]
   d460e:	4798      	blx	r3
    _i2cPort->endTransmission();
   d4610:	6820      	ldr	r0, [r4, #0]
   d4612:	f001 ff10 	bl	d6436 <_ZN7TwoWire15endTransmissionEv>
    int bytesLeftToRead = numberOfSamples * activeLEDs * 3;
   d4616:	4377      	muls	r7, r6
   d4618:	eb07 0747 	add.w	r7, r7, r7, lsl #1
    while (bytesLeftToRead > 0)
   d461c:	2f00      	cmp	r7, #0
   d461e:	dd77      	ble.n	d4710 <_ZN8MAX301055checkEv+0x138>
      if (toGet > BUFFER_LENGTH)
   d4620:	2f20      	cmp	r7, #32
        toGet = BUFFER_LENGTH - (BUFFER_LENGTH % (activeLEDs * 3)); //Trim toGet to be a multiple of the samples we need to read
   d4622:	bfc8      	it	gt
   d4624:	7965      	ldrbgt	r5, [r4, #5]
      _i2cPort->requestFrom(MAX30105_ADDRESS, toGet);
   d4626:	6820      	ldr	r0, [r4, #0]
        toGet = BUFFER_LENGTH - (BUFFER_LENGTH % (activeLEDs * 3)); //Trim toGet to be a multiple of the samples we need to read
   d4628:	bfc5      	ittet	gt
   d462a:	eb05 0545 	addgt.w	r5, r5, r5, lsl #1
   d462e:	2220      	movgt	r2, #32
   d4630:	463d      	movle	r5, r7
   d4632:	fbb2 f2f5 	udivgt	r2, r2, r5
   d4636:	bfc8      	it	gt
   d4638:	4355      	mulgt	r5, r2
      _i2cPort->requestFrom(MAX30105_ADDRESS, toGet);
   d463a:	462a      	mov	r2, r5
   d463c:	2157      	movs	r1, #87	; 0x57
   d463e:	f001 feec 	bl	d641a <_ZN7TwoWire11requestFromEhj>
      bytesLeftToRead -= toGet;
   d4642:	1b7f      	subs	r7, r7, r5
        temp[3] = 0;
   d4644:	f04f 0900 	mov.w	r9, #0
      while (toGet > 0)
   d4648:	2d00      	cmp	r5, #0
   d464a:	dde7      	ble.n	d461c <_ZN8MAX301055checkEv+0x44>
        sense.head++; //Advance the head of the storage struct
   d464c:	f898 3030 	ldrb.w	r3, [r8, #48]	; 0x30
        temp[3] = 0;
   d4650:	f88d 9007 	strb.w	r9, [sp, #7]
        sense.head++; //Advance the head of the storage struct
   d4654:	3301      	adds	r3, #1
        sense.head %= STORAGE_SIZE; //Wrap condition
   d4656:	f003 0303 	and.w	r3, r3, #3
   d465a:	f888 3030 	strb.w	r3, [r8, #48]	; 0x30
        temp[2] = _i2cPort->read();
   d465e:	6820      	ldr	r0, [r4, #0]
   d4660:	6803      	ldr	r3, [r0, #0]
   d4662:	695b      	ldr	r3, [r3, #20]
   d4664:	4798      	blx	r3
   d4666:	f88d 0006 	strb.w	r0, [sp, #6]
        temp[1] = _i2cPort->read();
   d466a:	6820      	ldr	r0, [r4, #0]
   d466c:	6803      	ldr	r3, [r0, #0]
   d466e:	695b      	ldr	r3, [r3, #20]
   d4670:	4798      	blx	r3
   d4672:	f88d 0005 	strb.w	r0, [sp, #5]
        temp[0] = _i2cPort->read();
   d4676:	6820      	ldr	r0, [r4, #0]
   d4678:	6803      	ldr	r3, [r0, #0]
   d467a:	695b      	ldr	r3, [r3, #20]
   d467c:	4798      	blx	r3
   d467e:	f88d 0004 	strb.w	r0, [sp, #4]
		tempLong &= 0x3FFFF; //Zero out all but 18 bits
   d4682:	9b01      	ldr	r3, [sp, #4]
        sense.red[sense.head] = tempLong; //Store this reading into the sense array
   d4684:	f898 2030 	ldrb.w	r2, [r8, #48]	; 0x30
		tempLong &= 0x3FFFF; //Zero out all but 18 bits
   d4688:	f3c3 0311 	ubfx	r3, r3, #0, #18
        sense.red[sense.head] = tempLong; //Store this reading into the sense array
   d468c:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
        if (activeLEDs > 1)
   d4690:	7963      	ldrb	r3, [r4, #5]
   d4692:	2b01      	cmp	r3, #1
   d4694:	d919      	bls.n	d46ca <_ZN8MAX301055checkEv+0xf2>
          temp[2] = _i2cPort->read();
   d4696:	6820      	ldr	r0, [r4, #0]
   d4698:	6803      	ldr	r3, [r0, #0]
   d469a:	695b      	ldr	r3, [r3, #20]
   d469c:	4798      	blx	r3
   d469e:	f88d 0006 	strb.w	r0, [sp, #6]
          temp[1] = _i2cPort->read();
   d46a2:	6820      	ldr	r0, [r4, #0]
   d46a4:	6803      	ldr	r3, [r0, #0]
   d46a6:	695b      	ldr	r3, [r3, #20]
   d46a8:	4798      	blx	r3
   d46aa:	f88d 0005 	strb.w	r0, [sp, #5]
          temp[0] = _i2cPort->read();
   d46ae:	6820      	ldr	r0, [r4, #0]
   d46b0:	6803      	ldr	r3, [r0, #0]
   d46b2:	695b      	ldr	r3, [r3, #20]
   d46b4:	4798      	blx	r3
		  sense.IR[sense.head] = tempLong;
   d46b6:	f898 3030 	ldrb.w	r3, [r8, #48]	; 0x30
          temp[0] = _i2cPort->read();
   d46ba:	f88d 0004 	strb.w	r0, [sp, #4]
		  tempLong &= 0x3FFFF; //Zero out all but 18 bits
   d46be:	9a01      	ldr	r2, [sp, #4]
		  sense.IR[sense.head] = tempLong;
   d46c0:	3304      	adds	r3, #4
		  tempLong &= 0x3FFFF; //Zero out all but 18 bits
   d46c2:	f3c2 0211 	ubfx	r2, r2, #0, #18
		  sense.IR[sense.head] = tempLong;
   d46c6:	f848 2023 	str.w	r2, [r8, r3, lsl #2]
        if (activeLEDs > 2)
   d46ca:	7963      	ldrb	r3, [r4, #5]
   d46cc:	2b02      	cmp	r3, #2
   d46ce:	d919      	bls.n	d4704 <_ZN8MAX301055checkEv+0x12c>
          temp[2] = _i2cPort->read();
   d46d0:	6820      	ldr	r0, [r4, #0]
   d46d2:	6803      	ldr	r3, [r0, #0]
   d46d4:	695b      	ldr	r3, [r3, #20]
   d46d6:	4798      	blx	r3
   d46d8:	f88d 0006 	strb.w	r0, [sp, #6]
          temp[1] = _i2cPort->read();
   d46dc:	6820      	ldr	r0, [r4, #0]
   d46de:	6803      	ldr	r3, [r0, #0]
   d46e0:	695b      	ldr	r3, [r3, #20]
   d46e2:	4798      	blx	r3
   d46e4:	f88d 0005 	strb.w	r0, [sp, #5]
          temp[0] = _i2cPort->read();
   d46e8:	6820      	ldr	r0, [r4, #0]
   d46ea:	6803      	ldr	r3, [r0, #0]
   d46ec:	695b      	ldr	r3, [r3, #20]
   d46ee:	4798      	blx	r3
          sense.green[sense.head] = tempLong;
   d46f0:	f898 3030 	ldrb.w	r3, [r8, #48]	; 0x30
          temp[0] = _i2cPort->read();
   d46f4:	f88d 0004 	strb.w	r0, [sp, #4]
		  tempLong &= 0x3FFFF; //Zero out all but 18 bits
   d46f8:	9a01      	ldr	r2, [sp, #4]
          sense.green[sense.head] = tempLong;
   d46fa:	3308      	adds	r3, #8
		  tempLong &= 0x3FFFF; //Zero out all but 18 bits
   d46fc:	f3c2 0211 	ubfx	r2, r2, #0, #18
          sense.green[sense.head] = tempLong;
   d4700:	f848 2023 	str.w	r2, [r8, r3, lsl #2]
        toGet -= activeLEDs * 3;
   d4704:	7963      	ldrb	r3, [r4, #5]
   d4706:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
   d470a:	441d      	add	r5, r3
      while (toGet > 0)
   d470c:	e79c      	b.n	d4648 <_ZN8MAX301055checkEv+0x70>
  int numberOfSamples = 0;
   d470e:	2600      	movs	r6, #0
}
   d4710:	b2b0      	uxth	r0, r6
   d4712:	b003      	add	sp, #12
   d4714:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d4718:	2003e218 	.word	0x2003e218

000d471c <_ZN8MAX301059safeCheckEh>:
{
   d471c:	b570      	push	{r4, r5, r6, lr}
   d471e:	4605      	mov	r5, r0
   d4720:	460e      	mov	r6, r1

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4722:	f000 fbc3 	bl	d4eac <HAL_Timer_Get_Milli_Seconds>
   d4726:	4604      	mov	r4, r0
   d4728:	f000 fbc0 	bl	d4eac <HAL_Timer_Get_Milli_Seconds>
	if(millis() - markTime > maxTimeToCheck) return(false);
   d472c:	1b00      	subs	r0, r0, r4
   d472e:	42b0      	cmp	r0, r6
   d4730:	d808      	bhi.n	d4744 <_ZN8MAX301059safeCheckEh+0x28>
	if(check() == true) //We found new data!
   d4732:	4628      	mov	r0, r5
   d4734:	f7ff ff50 	bl	d45d8 <_ZN8MAX301055checkEv>
   d4738:	2801      	cmp	r0, #1
   d473a:	d004      	beq.n	d4746 <_ZN8MAX301059safeCheckEh+0x2a>
	delay(1);
   d473c:	2001      	movs	r0, #1
   d473e:	f001 f91b 	bl	d5978 <delay>
	if(millis() - markTime > maxTimeToCheck) return(false);
   d4742:	e7f1      	b.n	d4728 <_ZN8MAX301059safeCheckEh+0xc>
   d4744:	2000      	movs	r0, #0
}
   d4746:	bd70      	pop	{r4, r5, r6, pc}

000d4748 <_ZN8MAX301056getRedEv>:
{
   d4748:	b508      	push	{r3, lr}
  if(safeCheck(250))
   d474a:	21fa      	movs	r1, #250	; 0xfa
   d474c:	f7ff ffe6 	bl	d471c <_ZN8MAX301059safeCheckEh>
   d4750:	b120      	cbz	r0, d475c <_ZN8MAX301056getRedEv+0x14>
    return (sense.red[sense.head]);
   d4752:	4b03      	ldr	r3, [pc, #12]	; (d4760 <_ZN8MAX301056getRedEv+0x18>)
   d4754:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
   d4758:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
}
   d475c:	bd08      	pop	{r3, pc}
   d475e:	bf00      	nop
   d4760:	2003e218 	.word	0x2003e218

000d4764 <_ZN8MAX301055getIREv>:
{
   d4764:	b508      	push	{r3, lr}
  if(safeCheck(250))
   d4766:	21fa      	movs	r1, #250	; 0xfa
   d4768:	f7ff ffd8 	bl	d471c <_ZN8MAX301059safeCheckEh>
   d476c:	b128      	cbz	r0, d477a <_ZN8MAX301055getIREv+0x16>
    return (sense.IR[sense.head]);
   d476e:	4a03      	ldr	r2, [pc, #12]	; (d477c <_ZN8MAX301055getIREv+0x18>)
   d4770:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
   d4774:	3304      	adds	r3, #4
   d4776:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
}
   d477a:	bd08      	pop	{r3, pc}
   d477c:	2003e218 	.word	0x2003e218

000d4780 <_ZN8MAX3010510readPartIDEv>:
  return readRegister8(_i2caddr, MAX30105_PARTID);
   d4780:	7901      	ldrb	r1, [r0, #4]
   d4782:	22ff      	movs	r2, #255	; 0xff
   d4784:	f7ff bef4 	b.w	d4570 <_ZN8MAX3010513readRegister8Ehh>

000d4788 <_ZN8MAX3010514readRevisionIDEv>:
void MAX30105::readRevisionID() {
   d4788:	b510      	push	{r4, lr}
  revisionID = readRegister8(_i2caddr, MAX30105_REVISIONID);
   d478a:	22fe      	movs	r2, #254	; 0xfe
   d478c:	7901      	ldrb	r1, [r0, #4]
void MAX30105::readRevisionID() {
   d478e:	4604      	mov	r4, r0
  revisionID = readRegister8(_i2caddr, MAX30105_REVISIONID);
   d4790:	f7ff feee 	bl	d4570 <_ZN8MAX3010513readRegister8Ehh>
   d4794:	71a0      	strb	r0, [r4, #6]
}
   d4796:	bd10      	pop	{r4, pc}

000d4798 <_ZN8MAX301055beginER7TwoWiremh>:
boolean MAX30105::begin(TwoWire &wirePort, uint32_t i2cSpeed, uint8_t i2caddr) {
   d4798:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d479a:	4604      	mov	r4, r0
   d479c:	4608      	mov	r0, r1
  _i2cPort = &wirePort; //Grab which port the user wants us to use
   d479e:	6021      	str	r1, [r4, #0]
boolean MAX30105::begin(TwoWire &wirePort, uint32_t i2cSpeed, uint8_t i2caddr) {
   d47a0:	461d      	mov	r5, r3
   d47a2:	9201      	str	r2, [sp, #4]
  _i2cPort->begin();
   d47a4:	f001 fe0a 	bl	d63bc <_ZN7TwoWire5beginEv>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   d47a8:	9901      	ldr	r1, [sp, #4]
   d47aa:	6820      	ldr	r0, [r4, #0]
   d47ac:	f001 fe02 	bl	d63b4 <_ZN7TwoWire8setSpeedEm>
  _i2caddr = i2caddr;
   d47b0:	7125      	strb	r5, [r4, #4]
  if (!readPartID() == MAX_30105_EXPECTEDPARTID) {
   d47b2:	4620      	mov	r0, r4
   d47b4:	f7ff ffe4 	bl	d4780 <_ZN8MAX3010510readPartIDEv>
  readRevisionID();
   d47b8:	4620      	mov	r0, r4
   d47ba:	f7ff ffe5 	bl	d4788 <_ZN8MAX3010514readRevisionIDEv>
}
   d47be:	2001      	movs	r0, #1
   d47c0:	b003      	add	sp, #12
   d47c2:	bd30      	pop	{r4, r5, pc}

000d47c4 <_ZN8MAX3010514writeRegister8Ehhh>:

void MAX30105::writeRegister8(uint8_t address, uint8_t reg, uint8_t value) {
   d47c4:	b570      	push	{r4, r5, r6, lr}
   d47c6:	4604      	mov	r4, r0
  _i2cPort->beginTransmission(address);
   d47c8:	6800      	ldr	r0, [r0, #0]
void MAX30105::writeRegister8(uint8_t address, uint8_t reg, uint8_t value) {
   d47ca:	4616      	mov	r6, r2
   d47cc:	461d      	mov	r5, r3
  _i2cPort->beginTransmission(address);
   d47ce:	f001 fe27 	bl	d6420 <_ZN7TwoWire17beginTransmissionEh>
  _i2cPort->write(reg);
   d47d2:	6820      	ldr	r0, [r4, #0]
   d47d4:	6803      	ldr	r3, [r0, #0]
   d47d6:	4631      	mov	r1, r6
   d47d8:	689b      	ldr	r3, [r3, #8]
   d47da:	4798      	blx	r3
  _i2cPort->write(value);
   d47dc:	6820      	ldr	r0, [r4, #0]
   d47de:	6803      	ldr	r3, [r0, #0]
   d47e0:	4629      	mov	r1, r5
   d47e2:	689b      	ldr	r3, [r3, #8]
   d47e4:	4798      	blx	r3
  _i2cPort->endTransmission();
   d47e6:	6820      	ldr	r0, [r4, #0]
}
   d47e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  _i2cPort->endTransmission();
   d47ec:	f001 be23 	b.w	d6436 <_ZN7TwoWire15endTransmissionEv>

000d47f0 <_ZN8MAX3010520setPulseAmplitudeRedEh>:
void MAX30105::setPulseAmplitudeRed(uint8_t amplitude) {
   d47f0:	460b      	mov	r3, r1
  writeRegister8(_i2caddr, MAX30105_LED1_PULSEAMP, amplitude);
   d47f2:	220c      	movs	r2, #12
   d47f4:	7901      	ldrb	r1, [r0, #4]
   d47f6:	f7ff bfe5 	b.w	d47c4 <_ZN8MAX3010514writeRegister8Ehhh>

000d47fa <_ZN8MAX3010519setPulseAmplitudeIREh>:
void MAX30105::setPulseAmplitudeIR(uint8_t amplitude) {
   d47fa:	460b      	mov	r3, r1
  writeRegister8(_i2caddr, MAX30105_LED2_PULSEAMP, amplitude);
   d47fc:	220d      	movs	r2, #13
   d47fe:	7901      	ldrb	r1, [r0, #4]
   d4800:	f7ff bfe0 	b.w	d47c4 <_ZN8MAX3010514writeRegister8Ehhh>

000d4804 <_ZN8MAX3010522setPulseAmplitudeGreenEh>:
void MAX30105::setPulseAmplitudeGreen(uint8_t amplitude) {
   d4804:	460b      	mov	r3, r1
  writeRegister8(_i2caddr, MAX30105_LED3_PULSEAMP, amplitude);
   d4806:	220e      	movs	r2, #14
   d4808:	7901      	ldrb	r1, [r0, #4]
   d480a:	f7ff bfdb 	b.w	d47c4 <_ZN8MAX3010514writeRegister8Ehhh>

000d480e <_ZN8MAX3010526setPulseAmplitudeProximityEh>:
void MAX30105::setPulseAmplitudeProximity(uint8_t amplitude) {
   d480e:	460b      	mov	r3, r1
  writeRegister8(_i2caddr, MAX30105_LED_PROX_AMP, amplitude);
   d4810:	2210      	movs	r2, #16
   d4812:	7901      	ldrb	r1, [r0, #4]
   d4814:	f7ff bfd6 	b.w	d47c4 <_ZN8MAX3010514writeRegister8Ehhh>

000d4818 <_ZN8MAX301059clearFIFOEv>:
void MAX30105::clearFIFO(void) {
   d4818:	b510      	push	{r4, lr}
   d481a:	4604      	mov	r4, r0
  writeRegister8(_i2caddr, MAX30105_FIFOWRITEPTR, 0);
   d481c:	7901      	ldrb	r1, [r0, #4]
   d481e:	2300      	movs	r3, #0
   d4820:	2204      	movs	r2, #4
   d4822:	f7ff ffcf 	bl	d47c4 <_ZN8MAX3010514writeRegister8Ehhh>
  writeRegister8(_i2caddr, MAX30105_FIFOOVERFLOW, 0);
   d4826:	7921      	ldrb	r1, [r4, #4]
   d4828:	4620      	mov	r0, r4
   d482a:	2300      	movs	r3, #0
   d482c:	2205      	movs	r2, #5
   d482e:	f7ff ffc9 	bl	d47c4 <_ZN8MAX3010514writeRegister8Ehhh>
  writeRegister8(_i2caddr, MAX30105_FIFOREADPTR, 0);
   d4832:	7921      	ldrb	r1, [r4, #4]
   d4834:	4620      	mov	r0, r4
   d4836:	2300      	movs	r3, #0
}
   d4838:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  writeRegister8(_i2caddr, MAX30105_FIFOREADPTR, 0);
   d483c:	2206      	movs	r2, #6
   d483e:	f7ff bfc1 	b.w	d47c4 <_ZN8MAX3010514writeRegister8Ehhh>

000d4842 <_ZN8MAX301057bitMaskEhhh>:
{
   d4842:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4846:	460d      	mov	r5, r1
   d4848:	4617      	mov	r7, r2
  uint8_t originalContents = readRegister8(_i2caddr, reg);
   d484a:	460a      	mov	r2, r1
   d484c:	7901      	ldrb	r1, [r0, #4]
{
   d484e:	4604      	mov	r4, r0
   d4850:	461e      	mov	r6, r3
  uint8_t originalContents = readRegister8(_i2caddr, reg);
   d4852:	f7ff fe8d 	bl	d4570 <_ZN8MAX3010513readRegister8Ehh>
  originalContents = originalContents & mask;
   d4856:	ea00 0307 	and.w	r3, r0, r7
  writeRegister8(_i2caddr, reg, originalContents | thing);
   d485a:	7921      	ldrb	r1, [r4, #4]
   d485c:	4333      	orrs	r3, r6
   d485e:	462a      	mov	r2, r5
   d4860:	4620      	mov	r0, r4
}
   d4862:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  writeRegister8(_i2caddr, reg, originalContents | thing);
   d4866:	f7ff bfad 	b.w	d47c4 <_ZN8MAX3010514writeRegister8Ehhh>

000d486a <_ZN8MAX301059softResetEv>:
void MAX30105::softReset(void) {
   d486a:	b538      	push	{r3, r4, r5, lr}
  bitMask(MAX30105_MODECONFIG, MAX30105_RESET_MASK, MAX30105_RESET);
   d486c:	22bf      	movs	r2, #191	; 0xbf
   d486e:	2340      	movs	r3, #64	; 0x40
   d4870:	2109      	movs	r1, #9
void MAX30105::softReset(void) {
   d4872:	4604      	mov	r4, r0
  bitMask(MAX30105_MODECONFIG, MAX30105_RESET_MASK, MAX30105_RESET);
   d4874:	f7ff ffe5 	bl	d4842 <_ZN8MAX301057bitMaskEhhh>
   d4878:	f000 fb18 	bl	d4eac <HAL_Timer_Get_Milli_Seconds>
   d487c:	4605      	mov	r5, r0
   d487e:	f000 fb15 	bl	d4eac <HAL_Timer_Get_Milli_Seconds>
  while (millis() - startTime < 100)
   d4882:	1b40      	subs	r0, r0, r5
   d4884:	2863      	cmp	r0, #99	; 0x63
   d4886:	d80a      	bhi.n	d489e <_ZN8MAX301059softResetEv+0x34>
    uint8_t response = readRegister8(_i2caddr, MAX30105_MODECONFIG);
   d4888:	7921      	ldrb	r1, [r4, #4]
   d488a:	2209      	movs	r2, #9
   d488c:	4620      	mov	r0, r4
   d488e:	f7ff fe6f 	bl	d4570 <_ZN8MAX3010513readRegister8Ehh>
    if ((response & MAX30105_RESET) == 0) break; //We're done!
   d4892:	0643      	lsls	r3, r0, #25
   d4894:	d503      	bpl.n	d489e <_ZN8MAX301059softResetEv+0x34>
    delay(1); //Let's not over burden the I2C bus
   d4896:	2001      	movs	r0, #1
   d4898:	f001 f86e 	bl	d5978 <delay>
  while (millis() - startTime < 100)
   d489c:	e7ef      	b.n	d487e <_ZN8MAX301059softResetEv+0x14>
}
   d489e:	bd38      	pop	{r3, r4, r5, pc}

000d48a0 <_ZN8MAX3010510setLEDModeEh>:
void MAX30105::setLEDMode(uint8_t mode) {
   d48a0:	460b      	mov	r3, r1
  bitMask(MAX30105_MODECONFIG, MAX30105_MODE_MASK, mode);
   d48a2:	22f8      	movs	r2, #248	; 0xf8
   d48a4:	2109      	movs	r1, #9
   d48a6:	f7ff bfcc 	b.w	d4842 <_ZN8MAX301057bitMaskEhhh>

000d48aa <_ZN8MAX3010511setADCRangeEh>:
void MAX30105::setADCRange(uint8_t adcRange) {
   d48aa:	460b      	mov	r3, r1
  bitMask(MAX30105_PARTICLECONFIG, MAX30105_ADCRANGE_MASK, adcRange);
   d48ac:	229f      	movs	r2, #159	; 0x9f
   d48ae:	210a      	movs	r1, #10
   d48b0:	f7ff bfc7 	b.w	d4842 <_ZN8MAX301057bitMaskEhhh>

000d48b4 <_ZN8MAX3010513setSampleRateEh>:
void MAX30105::setSampleRate(uint8_t sampleRate) {
   d48b4:	460b      	mov	r3, r1
  bitMask(MAX30105_PARTICLECONFIG, MAX30105_SAMPLERATE_MASK, sampleRate);
   d48b6:	22e3      	movs	r2, #227	; 0xe3
   d48b8:	210a      	movs	r1, #10
   d48ba:	f7ff bfc2 	b.w	d4842 <_ZN8MAX301057bitMaskEhhh>

000d48be <_ZN8MAX3010513setPulseWidthEh>:
void MAX30105::setPulseWidth(uint8_t pulseWidth) {
   d48be:	460b      	mov	r3, r1
  bitMask(MAX30105_PARTICLECONFIG, MAX30105_PULSEWIDTH_MASK, pulseWidth);
   d48c0:	22fc      	movs	r2, #252	; 0xfc
   d48c2:	210a      	movs	r1, #10
   d48c4:	f7ff bfbd 	b.w	d4842 <_ZN8MAX301057bitMaskEhhh>

000d48c8 <_ZN8MAX3010514setFIFOAverageEh>:
void MAX30105::setFIFOAverage(uint8_t numberOfSamples) {
   d48c8:	460b      	mov	r3, r1
  bitMask(MAX30105_FIFOCONFIG, MAX30105_SAMPLEAVG_MASK, numberOfSamples);
   d48ca:	221f      	movs	r2, #31
   d48cc:	2108      	movs	r1, #8
   d48ce:	f7ff bfb8 	b.w	d4842 <_ZN8MAX301057bitMaskEhhh>

000d48d2 <_ZN8MAX3010518enableFIFORolloverEv>:
  bitMask(MAX30105_FIFOCONFIG, MAX30105_ROLLOVER_MASK, MAX30105_ROLLOVER_ENABLE);
   d48d2:	2310      	movs	r3, #16
   d48d4:	22ef      	movs	r2, #239	; 0xef
   d48d6:	2108      	movs	r1, #8
   d48d8:	f7ff bfb3 	b.w	d4842 <_ZN8MAX301057bitMaskEhhh>

000d48dc <_ZN8MAX3010510enableSlotEhh>:
  switch (slotNumber) {
   d48dc:	3901      	subs	r1, #1
void MAX30105::enableSlot(uint8_t slotNumber, uint8_t device) {
   d48de:	4613      	mov	r3, r2
   d48e0:	2903      	cmp	r1, #3
   d48e2:	d814      	bhi.n	d490e <_ZN8MAX3010510enableSlotEhh+0x32>
   d48e4:	e8df f001 	tbb	[pc, r1]
   d48e8:	0e0b0602 	.word	0x0e0b0602
      bitMask(MAX30105_MULTILEDCONFIG1, MAX30105_SLOT1_MASK, device);
   d48ec:	22f8      	movs	r2, #248	; 0xf8
      bitMask(MAX30105_MULTILEDCONFIG1, MAX30105_SLOT2_MASK, device << 4);
   d48ee:	2111      	movs	r1, #17
      bitMask(MAX30105_MULTILEDCONFIG2, MAX30105_SLOT4_MASK, device << 4);
   d48f0:	f7ff bfa7 	b.w	d4842 <_ZN8MAX301057bitMaskEhhh>
      bitMask(MAX30105_MULTILEDCONFIG1, MAX30105_SLOT2_MASK, device << 4);
   d48f4:	011b      	lsls	r3, r3, #4
   d48f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   d48fa:	228f      	movs	r2, #143	; 0x8f
   d48fc:	e7f7      	b.n	d48ee <_ZN8MAX3010510enableSlotEhh+0x12>
      bitMask(MAX30105_MULTILEDCONFIG2, MAX30105_SLOT3_MASK, device);
   d48fe:	22f8      	movs	r2, #248	; 0xf8
      bitMask(MAX30105_MULTILEDCONFIG2, MAX30105_SLOT4_MASK, device << 4);
   d4900:	2112      	movs	r1, #18
   d4902:	e7f5      	b.n	d48f0 <_ZN8MAX3010510enableSlotEhh+0x14>
   d4904:	011b      	lsls	r3, r3, #4
   d4906:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   d490a:	228f      	movs	r2, #143	; 0x8f
   d490c:	e7f8      	b.n	d4900 <_ZN8MAX3010510enableSlotEhh+0x24>
}
   d490e:	4770      	bx	lr

000d4910 <_ZN8MAX301055setupEhhhiii>:
void MAX30105::setup(byte powerLevel, byte sampleAverage, byte ledMode, int sampleRate, int pulseWidth, int adcRange) {
   d4910:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d4914:	4615      	mov	r5, r2
   d4916:	e9dd 7908 	ldrd	r7, r9, [sp, #32]
   d491a:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
   d491e:	4604      	mov	r4, r0
   d4920:	4688      	mov	r8, r1
   d4922:	461e      	mov	r6, r3
  softReset(); //Reset all configuration, threshold, and data registers to POR values
   d4924:	f7ff ffa1 	bl	d486a <_ZN8MAX301059softResetEv>
  if (sampleAverage == 1) setFIFOAverage(MAX30105_SAMPLEAVG_1); //No averaging per FIFO record
   d4928:	2d01      	cmp	r5, #1
   d492a:	d14a      	bne.n	d49c2 <_ZN8MAX301055setupEhhhiii+0xb2>
   d492c:	2100      	movs	r1, #0
  else if (sampleAverage == 32) setFIFOAverage(MAX30105_SAMPLEAVG_32);
   d492e:	4620      	mov	r0, r4
   d4930:	f7ff ffca 	bl	d48c8 <_ZN8MAX3010514setFIFOAverageEh>
  enableFIFORollover(); //Allow FIFO to wrap/roll over
   d4934:	4620      	mov	r0, r4
   d4936:	f7ff ffcc 	bl	d48d2 <_ZN8MAX3010518enableFIFORolloverEv>
  if (ledMode == 3) setLEDMode(MAX30105_MODE_MULTILED); //Watch all three LED channels
   d493a:	2e03      	cmp	r6, #3
   d493c:	d155      	bne.n	d49ea <_ZN8MAX301055setupEhhhiii+0xda>
   d493e:	2107      	movs	r1, #7
  else setLEDMode(MAX30105_MODE_REDONLY); //Red only
   d4940:	4620      	mov	r0, r4
   d4942:	f7ff ffad 	bl	d48a0 <_ZN8MAX3010510setLEDModeEh>
  if(adcRange < 4096) setADCRange(MAX30105_ADCRANGE_2048); //7.81pA per LSB
   d4946:	f5ba 5f80 	cmp.w	sl, #4096	; 0x1000
  activeLEDs = ledMode; //Used to control how many bytes to read from FIFO buffer
   d494a:	7166      	strb	r6, [r4, #5]
  if(adcRange < 4096) setADCRange(MAX30105_ADCRANGE_2048); //7.81pA per LSB
   d494c:	da52      	bge.n	d49f4 <_ZN8MAX301055setupEhhhiii+0xe4>
   d494e:	2100      	movs	r1, #0
  else if(adcRange == 16384) setADCRange(MAX30105_ADCRANGE_16384); //62.5pA per LSB
   d4950:	4620      	mov	r0, r4
   d4952:	f7ff ffaa 	bl	d48aa <_ZN8MAX3010511setADCRangeEh>
  if (sampleRate < 100) setSampleRate(MAX30105_SAMPLERATE_50); //Take 50 samples per second
   d4956:	2f63      	cmp	r7, #99	; 0x63
   d4958:	dc59      	bgt.n	d4a0e <_ZN8MAX301055setupEhhhiii+0xfe>
   d495a:	2100      	movs	r1, #0
  else if (sampleRate == 3200) setSampleRate(MAX30105_SAMPLERATE_3200);
   d495c:	4620      	mov	r0, r4
   d495e:	f7ff ffa9 	bl	d48b4 <_ZN8MAX3010513setSampleRateEh>
  if (pulseWidth < 118) setPulseWidth(MAX30105_PULSEWIDTH_69); //Page 26, Gets us 15 bit resolution
   d4962:	f1b9 0f75 	cmp.w	r9, #117	; 0x75
   d4966:	dc72      	bgt.n	d4a4e <_ZN8MAX301055setupEhhhiii+0x13e>
   d4968:	2100      	movs	r1, #0
  else if (pulseWidth == 411) setPulseWidth(MAX30105_PULSEWIDTH_411); //18 bit resolution
   d496a:	4620      	mov	r0, r4
   d496c:	f7ff ffa7 	bl	d48be <_ZN8MAX3010513setPulseWidthEh>
  setPulseAmplitudeRed(powerLevel);
   d4970:	4641      	mov	r1, r8
   d4972:	4620      	mov	r0, r4
   d4974:	f7ff ff3c 	bl	d47f0 <_ZN8MAX3010520setPulseAmplitudeRedEh>
  setPulseAmplitudeIR(powerLevel);
   d4978:	4641      	mov	r1, r8
   d497a:	4620      	mov	r0, r4
   d497c:	f7ff ff3d 	bl	d47fa <_ZN8MAX3010519setPulseAmplitudeIREh>
  setPulseAmplitudeGreen(powerLevel);
   d4980:	4641      	mov	r1, r8
   d4982:	4620      	mov	r0, r4
   d4984:	f7ff ff3e 	bl	d4804 <_ZN8MAX3010522setPulseAmplitudeGreenEh>
  setPulseAmplitudeProximity(powerLevel);
   d4988:	4641      	mov	r1, r8
   d498a:	4620      	mov	r0, r4
   d498c:	f7ff ff3f 	bl	d480e <_ZN8MAX3010526setPulseAmplitudeProximityEh>
  enableSlot(1, SLOT_RED_LED);
   d4990:	2201      	movs	r2, #1
   d4992:	4611      	mov	r1, r2
   d4994:	4620      	mov	r0, r4
   d4996:	f7ff ffa1 	bl	d48dc <_ZN8MAX3010510enableSlotEhh>
  if (ledMode > 1) enableSlot(2, SLOT_IR_LED);
   d499a:	2e01      	cmp	r6, #1
   d499c:	d90c      	bls.n	d49b8 <_ZN8MAX301055setupEhhhiii+0xa8>
      bitMask(MAX30105_MULTILEDCONFIG1, MAX30105_SLOT2_MASK, device << 4);
   d499e:	2320      	movs	r3, #32
   d49a0:	228f      	movs	r2, #143	; 0x8f
   d49a2:	2111      	movs	r1, #17
   d49a4:	4620      	mov	r0, r4
   d49a6:	f7ff ff4c 	bl	d4842 <_ZN8MAX301057bitMaskEhhh>
  if (ledMode > 2) enableSlot(3, SLOT_GREEN_LED);
   d49aa:	2e02      	cmp	r6, #2
   d49ac:	d004      	beq.n	d49b8 <_ZN8MAX301055setupEhhhiii+0xa8>
   d49ae:	2203      	movs	r2, #3
   d49b0:	4611      	mov	r1, r2
   d49b2:	4620      	mov	r0, r4
   d49b4:	f7ff ff92 	bl	d48dc <_ZN8MAX3010510enableSlotEhh>
  clearFIFO(); //Reset the FIFO before we begin checking the sensor
   d49b8:	4620      	mov	r0, r4
}
   d49ba:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  clearFIFO(); //Reset the FIFO before we begin checking the sensor
   d49be:	f7ff bf2b 	b.w	d4818 <_ZN8MAX301059clearFIFOEv>
  else if (sampleAverage == 2) setFIFOAverage(MAX30105_SAMPLEAVG_2);
   d49c2:	2d02      	cmp	r5, #2
   d49c4:	d101      	bne.n	d49ca <_ZN8MAX301055setupEhhhiii+0xba>
   d49c6:	2120      	movs	r1, #32
   d49c8:	e7b1      	b.n	d492e <_ZN8MAX301055setupEhhhiii+0x1e>
  else if (sampleAverage == 4) setFIFOAverage(MAX30105_SAMPLEAVG_4);
   d49ca:	2d04      	cmp	r5, #4
   d49cc:	d101      	bne.n	d49d2 <_ZN8MAX301055setupEhhhiii+0xc2>
   d49ce:	2140      	movs	r1, #64	; 0x40
   d49d0:	e7ad      	b.n	d492e <_ZN8MAX301055setupEhhhiii+0x1e>
  else if (sampleAverage == 8) setFIFOAverage(MAX30105_SAMPLEAVG_8);
   d49d2:	2d08      	cmp	r5, #8
   d49d4:	d101      	bne.n	d49da <_ZN8MAX301055setupEhhhiii+0xca>
   d49d6:	2160      	movs	r1, #96	; 0x60
   d49d8:	e7a9      	b.n	d492e <_ZN8MAX301055setupEhhhiii+0x1e>
  else if (sampleAverage == 16) setFIFOAverage(MAX30105_SAMPLEAVG_16);
   d49da:	2d10      	cmp	r5, #16
   d49dc:	d101      	bne.n	d49e2 <_ZN8MAX301055setupEhhhiii+0xd2>
   d49de:	2180      	movs	r1, #128	; 0x80
   d49e0:	e7a5      	b.n	d492e <_ZN8MAX301055setupEhhhiii+0x1e>
  else if (sampleAverage == 32) setFIFOAverage(MAX30105_SAMPLEAVG_32);
   d49e2:	2d20      	cmp	r5, #32
   d49e4:	d1f3      	bne.n	d49ce <_ZN8MAX301055setupEhhhiii+0xbe>
   d49e6:	21a0      	movs	r1, #160	; 0xa0
   d49e8:	e7a1      	b.n	d492e <_ZN8MAX301055setupEhhhiii+0x1e>
  else if (ledMode == 2) setLEDMode(MAX30105_MODE_REDIRONLY); //Red and IR
   d49ea:	2e02      	cmp	r6, #2
   d49ec:	bf0c      	ite	eq
   d49ee:	2103      	moveq	r1, #3
  else setLEDMode(MAX30105_MODE_REDONLY); //Red only
   d49f0:	2102      	movne	r1, #2
   d49f2:	e7a5      	b.n	d4940 <_ZN8MAX301055setupEhhhiii+0x30>
  else if(adcRange < 8192) setADCRange(MAX30105_ADCRANGE_4096); //15.63pA per LSB
   d49f4:	f5ba 5f00 	cmp.w	sl, #8192	; 0x2000
   d49f8:	da01      	bge.n	d49fe <_ZN8MAX301055setupEhhhiii+0xee>
   d49fa:	2120      	movs	r1, #32
   d49fc:	e7a8      	b.n	d4950 <_ZN8MAX301055setupEhhhiii+0x40>
  else if(adcRange < 16384) setADCRange(MAX30105_ADCRANGE_8192); //31.25pA per LSB
   d49fe:	f5ba 4f80 	cmp.w	sl, #16384	; 0x4000
   d4a02:	da01      	bge.n	d4a08 <_ZN8MAX301055setupEhhhiii+0xf8>
   d4a04:	2140      	movs	r1, #64	; 0x40
   d4a06:	e7a3      	b.n	d4950 <_ZN8MAX301055setupEhhhiii+0x40>
  else if(adcRange == 16384) setADCRange(MAX30105_ADCRANGE_16384); //62.5pA per LSB
   d4a08:	d1a1      	bne.n	d494e <_ZN8MAX301055setupEhhhiii+0x3e>
   d4a0a:	2160      	movs	r1, #96	; 0x60
   d4a0c:	e7a0      	b.n	d4950 <_ZN8MAX301055setupEhhhiii+0x40>
  else if (sampleRate < 200) setSampleRate(MAX30105_SAMPLERATE_100);
   d4a0e:	2fc7      	cmp	r7, #199	; 0xc7
   d4a10:	dc01      	bgt.n	d4a16 <_ZN8MAX301055setupEhhhiii+0x106>
   d4a12:	2104      	movs	r1, #4
   d4a14:	e7a2      	b.n	d495c <_ZN8MAX301055setupEhhhiii+0x4c>
  else if (sampleRate < 400) setSampleRate(MAX30105_SAMPLERATE_200);
   d4a16:	f5b7 7fc8 	cmp.w	r7, #400	; 0x190
   d4a1a:	da01      	bge.n	d4a20 <_ZN8MAX301055setupEhhhiii+0x110>
   d4a1c:	2108      	movs	r1, #8
   d4a1e:	e79d      	b.n	d495c <_ZN8MAX301055setupEhhhiii+0x4c>
  else if (sampleRate < 800) setSampleRate(MAX30105_SAMPLERATE_400);
   d4a20:	f5b7 7f48 	cmp.w	r7, #800	; 0x320
   d4a24:	da01      	bge.n	d4a2a <_ZN8MAX301055setupEhhhiii+0x11a>
   d4a26:	210c      	movs	r1, #12
   d4a28:	e798      	b.n	d495c <_ZN8MAX301055setupEhhhiii+0x4c>
  else if (sampleRate < 1000) setSampleRate(MAX30105_SAMPLERATE_800);
   d4a2a:	f5b7 7f7a 	cmp.w	r7, #1000	; 0x3e8
   d4a2e:	da01      	bge.n	d4a34 <_ZN8MAX301055setupEhhhiii+0x124>
   d4a30:	2110      	movs	r1, #16
   d4a32:	e793      	b.n	d495c <_ZN8MAX301055setupEhhhiii+0x4c>
  else if (sampleRate < 1600) setSampleRate(MAX30105_SAMPLERATE_1000);
   d4a34:	f5b7 6fc8 	cmp.w	r7, #1600	; 0x640
   d4a38:	da01      	bge.n	d4a3e <_ZN8MAX301055setupEhhhiii+0x12e>
   d4a3a:	2114      	movs	r1, #20
   d4a3c:	e78e      	b.n	d495c <_ZN8MAX301055setupEhhhiii+0x4c>
  else if (sampleRate < 3200) setSampleRate(MAX30105_SAMPLERATE_1600);
   d4a3e:	f5b7 6f48 	cmp.w	r7, #3200	; 0xc80
   d4a42:	da01      	bge.n	d4a48 <_ZN8MAX301055setupEhhhiii+0x138>
   d4a44:	2118      	movs	r1, #24
   d4a46:	e789      	b.n	d495c <_ZN8MAX301055setupEhhhiii+0x4c>
  else if (sampleRate == 3200) setSampleRate(MAX30105_SAMPLERATE_3200);
   d4a48:	d187      	bne.n	d495a <_ZN8MAX301055setupEhhhiii+0x4a>
   d4a4a:	211c      	movs	r1, #28
   d4a4c:	e786      	b.n	d495c <_ZN8MAX301055setupEhhhiii+0x4c>
  else if (pulseWidth < 215) setPulseWidth(MAX30105_PULSEWIDTH_118); //16 bit resolution
   d4a4e:	f1b9 0fd6 	cmp.w	r9, #214	; 0xd6
   d4a52:	dc01      	bgt.n	d4a58 <_ZN8MAX301055setupEhhhiii+0x148>
   d4a54:	2101      	movs	r1, #1
   d4a56:	e788      	b.n	d496a <_ZN8MAX301055setupEhhhiii+0x5a>
  else if (pulseWidth < 411) setPulseWidth(MAX30105_PULSEWIDTH_215); //17 bit resolution
   d4a58:	f5b9 7fcd 	cmp.w	r9, #410	; 0x19a
   d4a5c:	dc01      	bgt.n	d4a62 <_ZN8MAX301055setupEhhhiii+0x152>
   d4a5e:	2102      	movs	r1, #2
   d4a60:	e783      	b.n	d496a <_ZN8MAX301055setupEhhhiii+0x5a>
  else if (pulseWidth == 411) setPulseWidth(MAX30105_PULSEWIDTH_411); //18 bit resolution
   d4a62:	f240 139b 	movw	r3, #411	; 0x19b
   d4a66:	4599      	cmp	r9, r3
   d4a68:	f47f af7e 	bne.w	d4968 <_ZN8MAX301055setupEhhhiii+0x58>
   d4a6c:	2103      	movs	r1, #3
   d4a6e:	e77c      	b.n	d496a <_ZN8MAX301055setupEhhhiii+0x5a>

000d4a70 <_Z28maxim_peaks_above_min_heightPlS_S_ll>:
* \par          Details
*               Find all peaks above MIN_HEIGHT
*
* \retval       None
*/
{
   d4a70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  int32_t i = 1, n_width;
  *n_npks = 0;
   d4a74:	2400      	movs	r4, #0
   d4a76:	600c      	str	r4, [r1, #0]
  
  while (i < n_size-1){
   d4a78:	f103 38ff 	add.w	r8, r3, #4294967295
  int32_t i = 1, n_width;
   d4a7c:	2401      	movs	r4, #1
  while (i < n_size-1){
   d4a7e:	45a0      	cmp	r8, r4
   d4a80:	dd27      	ble.n	d4ad2 <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x62>
    if (pn_x[i] > n_min_height && pn_x[i] > pn_x[i-1]){      // find left edge of potential peaks
   d4a82:	9d06      	ldr	r5, [sp, #24]
   d4a84:	f852 c024 	ldr.w	ip, [r2, r4, lsl #2]
   d4a88:	45ac      	cmp	ip, r5
   d4a8a:	ea4f 0684 	mov.w	r6, r4, lsl #2
   d4a8e:	f104 0501 	add.w	r5, r4, #1
   d4a92:	dd1c      	ble.n	d4ace <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x5e>
   d4a94:	4416      	add	r6, r2
   d4a96:	f856 6c04 	ldr.w	r6, [r6, #-4]
   d4a9a:	45b4      	cmp	ip, r6
   d4a9c:	dd17      	ble.n	d4ace <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x5e>
   d4a9e:	462e      	mov	r6, r5
      n_width = 1;
      while (i+n_width < n_size && pn_x[i] == pn_x[i+n_width])  // find flat peaks
   d4aa0:	429e      	cmp	r6, r3
   d4aa2:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
   d4aa6:	eba6 0e04 	sub.w	lr, r6, r4
   d4aaa:	4635      	mov	r5, r6
   d4aac:	d003      	beq.n	d4ab6 <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x46>
   d4aae:	45bc      	cmp	ip, r7
   d4ab0:	f106 0601 	add.w	r6, r6, #1
   d4ab4:	d0f4      	beq.n	d4aa0 <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x30>
        n_width++;
      if (pn_x[i] > pn_x[i+n_width] && (*n_npks) < 15 ){      // find right edge of peaks
   d4ab6:	45bc      	cmp	ip, r7
   d4ab8:	dd09      	ble.n	d4ace <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x5e>
   d4aba:	680e      	ldr	r6, [r1, #0]
   d4abc:	2e0e      	cmp	r6, #14
   d4abe:	dc06      	bgt.n	d4ace <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x5e>
        pn_locs[(*n_npks)++] = i;    
   d4ac0:	1c75      	adds	r5, r6, #1
   d4ac2:	600d      	str	r5, [r1, #0]
        // for flat peaks, peak location is left edge
        i += n_width+1;
   d4ac4:	f10e 0501 	add.w	r5, lr, #1
        pn_locs[(*n_npks)++] = i;    
   d4ac8:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
        i += n_width+1;
   d4acc:	4425      	add	r5, r4
{
   d4ace:	462c      	mov	r4, r5
   d4ad0:	e7d5      	b.n	d4a7e <_Z28maxim_peaks_above_min_heightPlS_S_ll+0xe>
        i += n_width;
    }
    else
      i++;
  }
}
   d4ad2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4ad6 <_Z17maxim_sort_ascendPll>:
* \par          Details
*               Sort array in ascending order (insertion sort algorithm)
*
* \retval       None
*/
{
   d4ad6:	b5f0      	push	{r4, r5, r6, r7, lr}
  int32_t i, j, n_temp;
  for (i = 1; i < n_size; i++) {
   d4ad8:	2301      	movs	r3, #1
   d4ada:	4604      	mov	r4, r0
   d4adc:	428b      	cmp	r3, r1
   d4ade:	da0f      	bge.n	d4b00 <_Z17maxim_sort_ascendPll+0x2a>
    n_temp = pn_x[i];
   d4ae0:	f854 6f04 	ldr.w	r6, [r4, #4]!
   d4ae4:	461a      	mov	r2, r3
   d4ae6:	4625      	mov	r5, r4
    for (j = i; j > 0 && n_temp < pn_x[j-1]; j--)
   d4ae8:	f855 7c04 	ldr.w	r7, [r5, #-4]
   d4aec:	42b7      	cmp	r7, r6
   d4aee:	dd03      	ble.n	d4af8 <_Z17maxim_sort_ascendPll+0x22>
   d4af0:	3a01      	subs	r2, #1
        pn_x[j] = pn_x[j-1];
   d4af2:	f845 7904 	str.w	r7, [r5], #-4
    for (j = i; j > 0 && n_temp < pn_x[j-1]; j--)
   d4af6:	d1f7      	bne.n	d4ae8 <_Z17maxim_sort_ascendPll+0x12>
    pn_x[j] = n_temp;
   d4af8:	f840 6022 	str.w	r6, [r0, r2, lsl #2]
  for (i = 1; i < n_size; i++) {
   d4afc:	3301      	adds	r3, #1
   d4afe:	e7ed      	b.n	d4adc <_Z17maxim_sort_ascendPll+0x6>
  }
}
   d4b00:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4b02 <_Z26maxim_sort_indices_descendPlS_l>:
* \par          Details
*               Sort indices according to descending order (insertion sort algorithm)
*
* \retval       None
*/ 
{
   d4b02:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  int32_t i, j, n_temp;
  for (i = 1; i < n_size; i++) {
   d4b06:	2301      	movs	r3, #1
{
   d4b08:	4690      	mov	r8, r2
   d4b0a:	460d      	mov	r5, r1
  for (i = 1; i < n_size; i++) {
   d4b0c:	4543      	cmp	r3, r8
   d4b0e:	da16      	bge.n	d4b3e <_Z26maxim_sort_indices_descendPlS_l+0x3c>
    n_temp = pn_indx[i];
   d4b10:	f855 6f04 	ldr.w	r6, [r5, #4]!
    for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j-1]]; j--)
   d4b14:	461c      	mov	r4, r3
   d4b16:	eb00 0986 	add.w	r9, r0, r6, lsl #2
   d4b1a:	46ac      	mov	ip, r5
   d4b1c:	f8d9 2000 	ldr.w	r2, [r9]
   d4b20:	f85c 7c04 	ldr.w	r7, [ip, #-4]
   d4b24:	4696      	mov	lr, r2
   d4b26:	f850 2027 	ldr.w	r2, [r0, r7, lsl #2]
   d4b2a:	4596      	cmp	lr, r2
   d4b2c:	dd03      	ble.n	d4b36 <_Z26maxim_sort_indices_descendPlS_l+0x34>
   d4b2e:	3c01      	subs	r4, #1
      pn_indx[j] = pn_indx[j-1];
   d4b30:	f84c 7904 	str.w	r7, [ip], #-4
    for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j-1]]; j--)
   d4b34:	d1f2      	bne.n	d4b1c <_Z26maxim_sort_indices_descendPlS_l+0x1a>
    pn_indx[j] = n_temp;
   d4b36:	f841 6024 	str.w	r6, [r1, r4, lsl #2]
  for (i = 1; i < n_size; i++) {
   d4b3a:	3301      	adds	r3, #1
   d4b3c:	e7e6      	b.n	d4b0c <_Z26maxim_sort_indices_descendPlS_l+0xa>
  }
}
   d4b3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d4b42 <_Z24maxim_remove_close_peaksPlS_S_l>:
{
   d4b42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4b46:	4604      	mov	r4, r0
   d4b48:	461e      	mov	r6, r3
   d4b4a:	4610      	mov	r0, r2
   d4b4c:	460d      	mov	r5, r1
  maxim_sort_indices_descend( pn_x, pn_locs, *pn_npks );
   d4b4e:	680a      	ldr	r2, [r1, #0]
   d4b50:	4621      	mov	r1, r4
   d4b52:	f7ff ffd6 	bl	d4b02 <_Z26maxim_sort_indices_descendPlS_l>
  for ( i = -1; i < *pn_npks; i++ ){
   d4b56:	1f27      	subs	r7, r4, #4
  maxim_sort_indices_descend( pn_x, pn_locs, *pn_npks );
   d4b58:	f04f 32ff 	mov.w	r2, #4294967295
      if ( n_dist > n_min_distance || n_dist < -n_min_distance )
   d4b5c:	f1c6 0800 	rsb	r8, r6, #0
  for ( i = -1; i < *pn_npks; i++ ){
   d4b60:	6829      	ldr	r1, [r5, #0]
   d4b62:	4291      	cmp	r1, r2
   d4b64:	4694      	mov	ip, r2
   d4b66:	dd20      	ble.n	d4baa <_Z24maxim_remove_close_peaksPlS_S_l+0x68>
    *pn_npks = i+1;
   d4b68:	3201      	adds	r2, #1
   d4b6a:	4610      	mov	r0, r2
   d4b6c:	602a      	str	r2, [r5, #0]
    for ( j = i+1; j < n_old_npks; j++ ){
   d4b6e:	4281      	cmp	r1, r0
   d4b70:	d101      	bne.n	d4b76 <_Z24maxim_remove_close_peaksPlS_S_l+0x34>
   d4b72:	3704      	adds	r7, #4
   d4b74:	e7f4      	b.n	d4b60 <_Z24maxim_remove_close_peaksPlS_S_l+0x1e>
      n_dist =  pn_locs[j] - ( i == -1 ? -1 : pn_locs[i] ); // lag-zero peak of autocorr is at index -1
   d4b76:	f1bc 3fff 	cmp.w	ip, #4294967295
   d4b7a:	bf18      	it	ne
   d4b7c:	f8d7 e000 	ldrne.w	lr, [r7]
   d4b80:	f854 3020 	ldr.w	r3, [r4, r0, lsl #2]
   d4b84:	bf08      	it	eq
   d4b86:	46e6      	moveq	lr, ip
   d4b88:	eba3 030e 	sub.w	r3, r3, lr
      if ( n_dist > n_min_distance || n_dist < -n_min_distance )
   d4b8c:	42b3      	cmp	r3, r6
   d4b8e:	dc01      	bgt.n	d4b94 <_Z24maxim_remove_close_peaksPlS_S_l+0x52>
   d4b90:	4598      	cmp	r8, r3
   d4b92:	dd08      	ble.n	d4ba6 <_Z24maxim_remove_close_peaksPlS_S_l+0x64>
        pn_locs[(*pn_npks)++] = pn_locs[j];
   d4b94:	f8d5 e000 	ldr.w	lr, [r5]
   d4b98:	f10e 0301 	add.w	r3, lr, #1
   d4b9c:	602b      	str	r3, [r5, #0]
   d4b9e:	f854 3020 	ldr.w	r3, [r4, r0, lsl #2]
   d4ba2:	f844 302e 	str.w	r3, [r4, lr, lsl #2]
    for ( j = i+1; j < n_old_npks; j++ ){
   d4ba6:	3001      	adds	r0, #1
   d4ba8:	e7e1      	b.n	d4b6e <_Z24maxim_remove_close_peaksPlS_S_l+0x2c>
  maxim_sort_ascend( pn_locs, *pn_npks );
   d4baa:	4620      	mov	r0, r4
}
   d4bac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  maxim_sort_ascend( pn_locs, *pn_npks );
   d4bb0:	f7ff bf91 	b.w	d4ad6 <_Z17maxim_sort_ascendPll>

000d4bb4 <_Z16maxim_find_peaksPlS_S_llll>:
{
   d4bb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  maxim_peaks_above_min_height( pn_locs, n_npks, pn_x, n_size, n_min_height );
   d4bb6:	9f08      	ldr	r7, [sp, #32]
   d4bb8:	9700      	str	r7, [sp, #0]
{
   d4bba:	460c      	mov	r4, r1
  maxim_peaks_above_min_height( pn_locs, n_npks, pn_x, n_size, n_min_height );
   d4bbc:	f7ff ff58 	bl	d4a70 <_Z28maxim_peaks_above_min_heightPlS_S_ll>
  maxim_remove_close_peaks( pn_locs, n_npks, pn_x, n_min_distance );
   d4bc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d4bc2:	f7ff ffbe 	bl	d4b42 <_Z24maxim_remove_close_peaksPlS_S_l>
  *n_npks = min( *n_npks, n_max_num );
   d4bc6:	6822      	ldr	r2, [r4, #0]
   d4bc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d4bca:	429a      	cmp	r2, r3
   d4bcc:	bfd4      	ite	le
   d4bce:	6022      	strle	r2, [r4, #0]
   d4bd0:	6023      	strgt	r3, [r4, #0]
}
   d4bd2:	b003      	add	sp, #12
   d4bd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d4bd8 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_>:
{
   d4bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4bdc:	4690      	mov	r8, r2
  for (k=0 ; k<n_ir_buffer_length ; k++ ) un_ir_mean += pun_ir_buffer[k] ;
   d4bde:	2200      	movs	r2, #0
{
   d4be0:	469b      	mov	fp, r3
   d4be2:	b09f      	sub	sp, #124	; 0x7c
   d4be4:	4605      	mov	r5, r0
   d4be6:	460c      	mov	r4, r1
  un_ir_mean =0; 
   d4be8:	4613      	mov	r3, r2
  for (k=0 ; k<n_ir_buffer_length ; k++ ) un_ir_mean += pun_ir_buffer[k] ;
   d4bea:	42a2      	cmp	r2, r4
   d4bec:	da04      	bge.n	d4bf8 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x20>
   d4bee:	f855 1022 	ldr.w	r1, [r5, r2, lsl #2]
   d4bf2:	3201      	adds	r2, #1
   d4bf4:	440b      	add	r3, r1
   d4bf6:	e7f8      	b.n	d4bea <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x12>
  un_ir_mean =un_ir_mean/n_ir_buffer_length ;
   d4bf8:	f8df 9230 	ldr.w	r9, [pc, #560]	; d4e2c <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x254>
   d4bfc:	fbb3 f3f4 	udiv	r3, r3, r4
   d4c00:	4648      	mov	r0, r9
  for (k=0 ; k<n_ir_buffer_length ; k++ )  
   d4c02:	2200      	movs	r2, #0
   d4c04:	42a2      	cmp	r2, r4
   d4c06:	da06      	bge.n	d4c16 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x3e>
    an_x[k] = -1*(pun_ir_buffer[k] - un_ir_mean) ; 
   d4c08:	f855 1022 	ldr.w	r1, [r5, r2, lsl #2]
   d4c0c:	1a59      	subs	r1, r3, r1
   d4c0e:	f840 1b04 	str.w	r1, [r0], #4
  for (k=0 ; k<n_ir_buffer_length ; k++ )  
   d4c12:	3201      	adds	r2, #1
   d4c14:	e7f6      	b.n	d4c04 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x2c>
   d4c16:	4a85      	ldr	r2, [pc, #532]	; (d4e2c <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x254>)
  for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++){
   d4c18:	2100      	movs	r1, #0
    an_x[k]=( an_x[k]+an_x[k+1]+ an_x[k+2]+ an_x[k+3])/(int)4;        
   d4c1a:	6813      	ldr	r3, [r2, #0]
   d4c1c:	f852 0f04 	ldr.w	r0, [r2, #4]!
   d4c20:	4403      	add	r3, r0
   d4c22:	6850      	ldr	r0, [r2, #4]
   d4c24:	4403      	add	r3, r0
   d4c26:	6890      	ldr	r0, [r2, #8]
   d4c28:	181b      	adds	r3, r3, r0
   d4c2a:	bf48      	it	mi
   d4c2c:	3303      	addmi	r3, #3
   d4c2e:	3101      	adds	r1, #1
   d4c30:	109b      	asrs	r3, r3, #2
  for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++){
   d4c32:	2960      	cmp	r1, #96	; 0x60
    an_x[k]=( an_x[k]+an_x[k+1]+ an_x[k+2]+ an_x[k+3])/(int)4;        
   d4c34:	f842 3c04 	str.w	r3, [r2, #-4]
  for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++){
   d4c38:	d1ef      	bne.n	d4c1a <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x42>
  n_th1=0; 
   d4c3a:	2300      	movs	r3, #0
   d4c3c:	497b      	ldr	r1, [pc, #492]	; (d4e2c <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x254>)
  for ( k=0 ; k<BUFFER_SIZE ;k++){
   d4c3e:	461a      	mov	r2, r3
    n_th1 +=  an_x[k];
   d4c40:	f851 0b04 	ldr.w	r0, [r1], #4
  for ( k=0 ; k<BUFFER_SIZE ;k++){
   d4c44:	3201      	adds	r2, #1
   d4c46:	2a64      	cmp	r2, #100	; 0x64
    n_th1 +=  an_x[k];
   d4c48:	4403      	add	r3, r0
  for ( k=0 ; k<BUFFER_SIZE ;k++){
   d4c4a:	d1f9      	bne.n	d4c40 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x68>
  if( n_th1<30) n_th1=30; // min allowed
   d4c4c:	f640 31b7 	movw	r1, #2999	; 0xbb7
   d4c50:	428b      	cmp	r3, r1
   d4c52:	dd4b      	ble.n	d4cec <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x114>
  n_th1=  n_th1/ ( BUFFER_SIZE);
   d4c54:	fb93 f3f2 	sdiv	r3, r3, r2
   d4c58:	2b3c      	cmp	r3, #60	; 0x3c
   d4c5a:	bfa8      	it	ge
   d4c5c:	233c      	movge	r3, #60	; 0x3c
  for ( k=0 ; k<15;k++) an_ir_valley_locs[k]=0;
   d4c5e:	ae0f      	add	r6, sp, #60	; 0x3c
   d4c60:	2200      	movs	r2, #0
  if( n_th1<30) n_th1=30; // min allowed
   d4c62:	4631      	mov	r1, r6
  for ( k=0 ; k<15;k++) an_ir_valley_locs[k]=0;
   d4c64:	4692      	mov	sl, r2
   d4c66:	3201      	adds	r2, #1
   d4c68:	2a0f      	cmp	r2, #15
   d4c6a:	f841 ab04 	str.w	sl, [r1], #4
   d4c6e:	d1fa      	bne.n	d4c66 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x8e>
  maxim_find_peaks( an_ir_valley_locs, &n_npks, an_x, BUFFER_SIZE, n_th1, 4, 15 );//peak_height, peak_distance, max_num_peaks 
   d4c70:	9202      	str	r2, [sp, #8]
   d4c72:	2204      	movs	r2, #4
   d4c74:	e9cd 3200 	strd	r3, r2, [sp]
   d4c78:	a909      	add	r1, sp, #36	; 0x24
   d4c7a:	2364      	movs	r3, #100	; 0x64
   d4c7c:	4a6b      	ldr	r2, [pc, #428]	; (d4e2c <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x254>)
   d4c7e:	4630      	mov	r0, r6
   d4c80:	f7ff ff98 	bl	d4bb4 <_Z16maxim_find_peaksPlS_S_llll>
  if (n_npks>=2){
   d4c84:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d4c86:	2b01      	cmp	r3, #1
   d4c88:	dd32      	ble.n	d4cf0 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x118>
   d4c8a:	46b6      	mov	lr, r6
  n_peak_interval_sum =0;
   d4c8c:	2200      	movs	r2, #0
    for (k=1; k<n_npks; k++) n_peak_interval_sum += (an_ir_valley_locs[k] -an_ir_valley_locs[k -1] ) ;
   d4c8e:	2001      	movs	r0, #1
   d4c90:	4671      	mov	r1, lr
   d4c92:	f8de c004 	ldr.w	ip, [lr, #4]
   d4c96:	6809      	ldr	r1, [r1, #0]
   d4c98:	3001      	adds	r0, #1
   d4c9a:	ebac 0c01 	sub.w	ip, ip, r1
   d4c9e:	4283      	cmp	r3, r0
   d4ca0:	f10e 0e04 	add.w	lr, lr, #4
   d4ca4:	4462      	add	r2, ip
   d4ca6:	d1f3      	bne.n	d4c90 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0xb8>
    n_peak_interval_sum =n_peak_interval_sum/(n_npks-1);
   d4ca8:	1e59      	subs	r1, r3, #1
   d4caa:	fb92 f2f1 	sdiv	r2, r2, r1
    *pn_heart_rate =(int32_t)( (FS*60)/ n_peak_interval_sum );
   d4cae:	f240 51dc 	movw	r1, #1500	; 0x5dc
   d4cb2:	fb91 f2f2 	sdiv	r2, r1, r2
   d4cb6:	9929      	ldr	r1, [sp, #164]	; 0xa4
   d4cb8:	600a      	str	r2, [r1, #0]
    *pch_hr_valid  = 1;
   d4cba:	992a      	ldr	r1, [sp, #168]	; 0xa8
   d4cbc:	2201      	movs	r2, #1
   d4cbe:	700a      	strb	r2, [r1, #0]
   d4cc0:	485b      	ldr	r0, [pc, #364]	; (d4e30 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x258>)
    for (k=1; k<n_npks; k++) n_peak_interval_sum += (an_ir_valley_locs[k] -an_ir_valley_locs[k -1] ) ;
   d4cc2:	2200      	movs	r2, #0
  for (k=0 ; k<n_ir_buffer_length ; k++ )  {
   d4cc4:	42a2      	cmp	r2, r4
   d4cc6:	db1a      	blt.n	d4cfe <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x126>
  for(k=0; k< 5; k++) an_ratio[k]=0;
   d4cc8:	2200      	movs	r2, #0
   d4cca:	e9cd 220a 	strd	r2, r2, [sp, #40]	; 0x28
   d4cce:	e9cd 220c 	strd	r2, r2, [sp, #48]	; 0x30
   d4cd2:	920e      	str	r2, [sp, #56]	; 0x38
    if (an_ir_valley_locs[k] > BUFFER_SIZE ){
   d4cd4:	a80f      	add	r0, sp, #60	; 0x3c
  for (k=0; k< n_exact_ir_valley_locs_count; k++){
   d4cd6:	4293      	cmp	r3, r2
   d4cd8:	dd1d      	ble.n	d4d16 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x13e>
    if (an_ir_valley_locs[k] > BUFFER_SIZE ){
   d4cda:	f850 1022 	ldr.w	r1, [r0, r2, lsl #2]
   d4cde:	2964      	cmp	r1, #100	; 0x64
   d4ce0:	dd17      	ble.n	d4d12 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x13a>
    *pn_spo2 =  -999 ; // do not use SPO2 since signal an_ratio is out of range
   d4ce2:	4b54      	ldr	r3, [pc, #336]	; (d4e34 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x25c>)
   d4ce4:	f8cb 3000 	str.w	r3, [fp]
    *pch_spo2_valid  = 0; 
   d4ce8:	2300      	movs	r3, #0
   d4cea:	e094      	b.n	d4e16 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x23e>
  if( n_th1<30) n_th1=30; // min allowed
   d4cec:	231e      	movs	r3, #30
   d4cee:	e7b6      	b.n	d4c5e <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x86>
    *pn_heart_rate = -999; // unable to calculate because # of peaks are too small
   d4cf0:	9929      	ldr	r1, [sp, #164]	; 0xa4
   d4cf2:	4a50      	ldr	r2, [pc, #320]	; (d4e34 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x25c>)
   d4cf4:	600a      	str	r2, [r1, #0]
    *pch_hr_valid  = 0;
   d4cf6:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
   d4cf8:	f882 a000 	strb.w	sl, [r2]
   d4cfc:	e7e0      	b.n	d4cc0 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0xe8>
      an_x[k] =  pun_ir_buffer[k] ; 
   d4cfe:	f855 1022 	ldr.w	r1, [r5, r2, lsl #2]
   d4d02:	f849 1b04 	str.w	r1, [r9], #4
      an_y[k] =  pun_red_buffer[k] ; 
   d4d06:	f858 1022 	ldr.w	r1, [r8, r2, lsl #2]
   d4d0a:	f840 1b04 	str.w	r1, [r0], #4
  for (k=0 ; k<n_ir_buffer_length ; k++ )  {
   d4d0e:	3201      	adds	r2, #1
   d4d10:	e7d8      	b.n	d4cc4 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0xec>
  for (k=0; k< n_exact_ir_valley_locs_count; k++){
   d4d12:	3201      	adds	r2, #1
   d4d14:	e7df      	b.n	d4cd6 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0xfe>
  n_i_ratio_count = 0; 
   d4d16:	2100      	movs	r1, #0
  for (k=0; k< n_exact_ir_valley_locs_count-1; k++){
   d4d18:	3b01      	subs	r3, #1
   d4d1a:	4844      	ldr	r0, [pc, #272]	; (d4e2c <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x254>)
          if (an_y[i]> n_y_dc_max) {n_y_dc_max =an_y[i]; n_y_dc_max_idx=i;}
   d4d1c:	f8df c110 	ldr.w	ip, [pc, #272]	; d4e30 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x258>
  for (k=0; k< n_exact_ir_valley_locs_count-1; k++){
   d4d20:	9307      	str	r3, [sp, #28]
   d4d22:	4688      	mov	r8, r1
   d4d24:	9b07      	ldr	r3, [sp, #28]
   d4d26:	4543      	cmp	r3, r8
   d4d28:	dd59      	ble.n	d4dde <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x206>
    if (an_ir_valley_locs[k+1]-an_ir_valley_locs[k] >3){
   d4d2a:	f8d6 e004 	ldr.w	lr, [r6, #4]
   d4d2e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4d32:	ebae 0903 	sub.w	r9, lr, r3
   d4d36:	f1b9 0f03 	cmp.w	r9, #3
   d4d3a:	f108 0801 	add.w	r8, r8, #1
   d4d3e:	ddf1      	ble.n	d4d24 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x14c>
    n_x_dc_max= -16777216; 
   d4d40:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
        for (i=an_ir_valley_locs[k]; i< an_ir_valley_locs[k+1]; i++){
   d4d44:	461d      	mov	r5, r3
    n_y_dc_max= -16777216 ; 
   d4d46:	9205      	str	r2, [sp, #20]
        for (i=an_ir_valley_locs[k]; i< an_ir_valley_locs[k+1]; i++){
   d4d48:	45ae      	cmp	lr, r5
   d4d4a:	dd10      	ble.n	d4d6e <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x196>
          if (an_x[i]> n_x_dc_max) {n_x_dc_max =an_x[i]; n_x_dc_max_idx=i;}
   d4d4c:	f850 a025 	ldr.w	sl, [r0, r5, lsl #2]
          if (an_y[i]> n_y_dc_max) {n_y_dc_max =an_y[i]; n_y_dc_max_idx=i;}
   d4d50:	9c05      	ldr	r4, [sp, #20]
          if (an_x[i]> n_x_dc_max) {n_x_dc_max =an_x[i]; n_x_dc_max_idx=i;}
   d4d52:	4592      	cmp	sl, r2
   d4d54:	bfc8      	it	gt
   d4d56:	4652      	movgt	r2, sl
          if (an_y[i]> n_y_dc_max) {n_y_dc_max =an_y[i]; n_y_dc_max_idx=i;}
   d4d58:	f85c a025 	ldr.w	sl, [ip, r5, lsl #2]
          if (an_x[i]> n_x_dc_max) {n_x_dc_max =an_x[i]; n_x_dc_max_idx=i;}
   d4d5c:	bfc8      	it	gt
   d4d5e:	9506      	strgt	r5, [sp, #24]
          if (an_y[i]> n_y_dc_max) {n_y_dc_max =an_y[i]; n_y_dc_max_idx=i;}
   d4d60:	45a2      	cmp	sl, r4
   d4d62:	bfc4      	itt	gt
   d4d64:	462f      	movgt	r7, r5
   d4d66:	f8cd a014 	strgt.w	sl, [sp, #20]
        for (i=an_ir_valley_locs[k]; i< an_ir_valley_locs[k+1]; i++){
   d4d6a:	3501      	adds	r5, #1
   d4d6c:	e7ec      	b.n	d4d48 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x170>
      n_x_ac= (an_x[an_ir_valley_locs[k+1]] - an_x[an_ir_valley_locs[k] ] )*(n_x_dc_max_idx -an_ir_valley_locs[k]); // ir
   d4d6e:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
   d4d72:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
   d4d76:	eba4 0a05 	sub.w	sl, r4, r5
   d4d7a:	9d06      	ldr	r5, [sp, #24]
      n_denom= ( n_x_ac *n_y_dc_max)>>7;
   d4d7c:	9c05      	ldr	r4, [sp, #20]
      n_x_ac= (an_x[an_ir_valley_locs[k+1]] - an_x[an_ir_valley_locs[k] ] )*(n_x_dc_max_idx -an_ir_valley_locs[k]); // ir
   d4d7e:	1aed      	subs	r5, r5, r3
   d4d80:	fb05 f50a 	mul.w	r5, r5, sl
      n_x_ac=  an_x[an_ir_valley_locs[k]] + n_x_ac/ (an_ir_valley_locs[k+1] - an_ir_valley_locs[k]); 
   d4d84:	fb95 faf9 	sdiv	sl, r5, r9
   d4d88:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
   d4d8c:	44aa      	add	sl, r5
      n_x_ac=  an_x[n_y_dc_max_idx] - n_x_ac;      // subracting linear DC compoenents from raw 
   d4d8e:	f850 5027 	ldr.w	r5, [r0, r7, lsl #2]
   d4d92:	eba5 0a0a 	sub.w	sl, r5, sl
      n_denom= ( n_x_ac *n_y_dc_max)>>7;
   d4d96:	fb04 f40a 	mul.w	r4, r4, sl
   d4d9a:	11e4      	asrs	r4, r4, #7
      if (n_denom>0  && n_i_ratio_count <5 &&  n_nume != 0)
   d4d9c:	2c00      	cmp	r4, #0
   d4d9e:	ddc1      	ble.n	d4d24 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x14c>
   d4da0:	2904      	cmp	r1, #4
   d4da2:	dcbf      	bgt.n	d4d24 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x14c>
      n_y_ac= (an_y[an_ir_valley_locs[k+1]] - an_y[an_ir_valley_locs[k] ] )*(n_y_dc_max_idx -an_ir_valley_locs[k]); //red
   d4da4:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
   d4da8:	f85c e02e 	ldr.w	lr, [ip, lr, lsl #2]
   d4dac:	1afb      	subs	r3, r7, r3
   d4dae:	ebae 0e05 	sub.w	lr, lr, r5
   d4db2:	fb03 f30e 	mul.w	r3, r3, lr
      n_y_ac=  an_y[an_ir_valley_locs[k]] + n_y_ac/ (an_ir_valley_locs[k+1] - an_ir_valley_locs[k])  ; 
   d4db6:	fb93 f3f9 	sdiv	r3, r3, r9
   d4dba:	442b      	add	r3, r5
      n_y_ac=  an_y[n_y_dc_max_idx] - n_y_ac;    // subracting linear DC compoenents from raw 
   d4dbc:	f85c 5027 	ldr.w	r5, [ip, r7, lsl #2]
   d4dc0:	1aed      	subs	r5, r5, r3
      n_nume=( n_y_ac *n_x_dc_max)>>7 ; //prepare X100 to preserve floating value
   d4dc2:	436a      	muls	r2, r5
      if (n_denom>0  && n_i_ratio_count <5 &&  n_nume != 0)
   d4dc4:	11d2      	asrs	r2, r2, #7
   d4dc6:	d0ad      	beq.n	d4d24 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x14c>
        an_ratio[n_i_ratio_count]= (n_nume*100)/n_denom ; //formular is ( n_y_ac *n_x_dc_max) / ( n_x_ac *n_y_dc_max) ;
   d4dc8:	ab1e      	add	r3, sp, #120	; 0x78
   d4dca:	eb03 0e81 	add.w	lr, r3, r1, lsl #2
   d4dce:	2364      	movs	r3, #100	; 0x64
   d4dd0:	435a      	muls	r2, r3
        n_i_ratio_count++;
   d4dd2:	3101      	adds	r1, #1
        an_ratio[n_i_ratio_count]= (n_nume*100)/n_denom ; //formular is ( n_y_ac *n_x_dc_max) / ( n_x_ac *n_y_dc_max) ;
   d4dd4:	fb92 f4f4 	sdiv	r4, r2, r4
   d4dd8:	f84e 4c50 	str.w	r4, [lr, #-80]
        n_i_ratio_count++;
   d4ddc:	e7a2      	b.n	d4d24 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x14c>
  maxim_sort_ascend(an_ratio, n_i_ratio_count);
   d4dde:	a80a      	add	r0, sp, #40	; 0x28
   d4de0:	f7ff fe79 	bl	d4ad6 <_Z17maxim_sort_ascendPll>
  n_middle_idx= n_i_ratio_count/2;
   d4de4:	104a      	asrs	r2, r1, #1
  if (n_middle_idx >1)
   d4de6:	2903      	cmp	r1, #3
   d4de8:	ea4f 0382 	mov.w	r3, r2, lsl #2
   d4dec:	dd18      	ble.n	d4e20 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x248>
    n_ratio_average =( an_ratio[n_middle_idx-1] +an_ratio[n_middle_idx])/2; // use median
   d4dee:	a91e      	add	r1, sp, #120	; 0x78
   d4df0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
   d4df4:	f851 3c54 	ldr.w	r3, [r1, #-84]
   d4df8:	f851 2c50 	ldr.w	r2, [r1, #-80]
   d4dfc:	4413      	add	r3, r2
   d4dfe:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
   d4e02:	105b      	asrs	r3, r3, #1
  if( n_ratio_average>2 && n_ratio_average <184){
   d4e04:	1eda      	subs	r2, r3, #3
   d4e06:	2ab4      	cmp	r2, #180	; 0xb4
   d4e08:	f63f af6b 	bhi.w	d4ce2 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x10a>
    n_spo2_calc= uch_spo2_table[n_ratio_average] ;
   d4e0c:	4a0a      	ldr	r2, [pc, #40]	; (d4e38 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x260>)
   d4e0e:	5cd3      	ldrb	r3, [r2, r3]
   d4e10:	f8cb 3000 	str.w	r3, [fp]
    *pch_spo2_valid  = 1;//  float_SPO2 =  -45.060*n_ratio_average* n_ratio_average/10000 + 30.354 *n_ratio_average/100 + 94.845 ;  // for comparison with table
   d4e14:	2301      	movs	r3, #1
    *pch_spo2_valid  = 0; 
   d4e16:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   d4e18:	7013      	strb	r3, [r2, #0]
}
   d4e1a:	b01f      	add	sp, #124	; 0x7c
   d4e1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    n_ratio_average = an_ratio[n_middle_idx ];
   d4e20:	aa1e      	add	r2, sp, #120	; 0x78
   d4e22:	4413      	add	r3, r2
   d4e24:	f853 3c50 	ldr.w	r3, [r3, #-80]
   d4e28:	e7ec      	b.n	d4e04 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x22c>
   d4e2a:	bf00      	nop
   d4e2c:	2003e24c 	.word	0x2003e24c
   d4e30:	2003e3dc 	.word	0x2003e3dc
   d4e34:	fffffc19 	.word	0xfffffc19
   d4e38:	000d7392 	.word	0x000d7392

000d4e3c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4e3c:	b508      	push	{r3, lr}
   d4e3e:	4b02      	ldr	r3, [pc, #8]	; (d4e48 <netdb_freeaddrinfo+0xc>)
   d4e40:	681b      	ldr	r3, [r3, #0]
   d4e42:	689b      	ldr	r3, [r3, #8]
   d4e44:	9301      	str	r3, [sp, #4]
   d4e46:	bd08      	pop	{r3, pc}
   d4e48:	00030268 	.word	0x00030268

000d4e4c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4e4c:	b508      	push	{r3, lr}
   d4e4e:	4b02      	ldr	r3, [pc, #8]	; (d4e58 <netdb_getaddrinfo+0xc>)
   d4e50:	681b      	ldr	r3, [r3, #0]
   d4e52:	68db      	ldr	r3, [r3, #12]
   d4e54:	9301      	str	r3, [sp, #4]
   d4e56:	bd08      	pop	{r3, pc}
   d4e58:	00030268 	.word	0x00030268

000d4e5c <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4e5c:	b508      	push	{r3, lr}
   d4e5e:	4b02      	ldr	r3, [pc, #8]	; (d4e68 <HAL_Pin_Mode+0xc>)
   d4e60:	681b      	ldr	r3, [r3, #0]
   d4e62:	689b      	ldr	r3, [r3, #8]
   d4e64:	9301      	str	r3, [sp, #4]
   d4e66:	bd08      	pop	{r3, pc}
   d4e68:	0003022c 	.word	0x0003022c

000d4e6c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4e6c:	b508      	push	{r3, lr}
   d4e6e:	4b02      	ldr	r3, [pc, #8]	; (d4e78 <HAL_Get_Pin_Mode+0xc>)
   d4e70:	681b      	ldr	r3, [r3, #0]
   d4e72:	68db      	ldr	r3, [r3, #12]
   d4e74:	9301      	str	r3, [sp, #4]
   d4e76:	bd08      	pop	{r3, pc}
   d4e78:	0003022c 	.word	0x0003022c

000d4e7c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d4e7c:	b508      	push	{r3, lr}
   d4e7e:	4b02      	ldr	r3, [pc, #8]	; (d4e88 <HAL_GPIO_Write+0xc>)
   d4e80:	681b      	ldr	r3, [r3, #0]
   d4e82:	691b      	ldr	r3, [r3, #16]
   d4e84:	9301      	str	r3, [sp, #4]
   d4e86:	bd08      	pop	{r3, pc}
   d4e88:	0003022c 	.word	0x0003022c

000d4e8c <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d4e8c:	b508      	push	{r3, lr}
   d4e8e:	4b02      	ldr	r3, [pc, #8]	; (d4e98 <HAL_GPIO_Read+0xc>)
   d4e90:	681b      	ldr	r3, [r3, #0]
   d4e92:	695b      	ldr	r3, [r3, #20]
   d4e94:	9301      	str	r3, [sp, #4]
   d4e96:	bd08      	pop	{r3, pc}
   d4e98:	0003022c 	.word	0x0003022c

000d4e9c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4e9c:	b508      	push	{r3, lr}
   d4e9e:	4b02      	ldr	r3, [pc, #8]	; (d4ea8 <HAL_RNG_GetRandomNumber+0xc>)
   d4ea0:	681b      	ldr	r3, [r3, #0]
   d4ea2:	685b      	ldr	r3, [r3, #4]
   d4ea4:	9301      	str	r3, [sp, #4]
   d4ea6:	bd08      	pop	{r3, pc}
   d4ea8:	00030218 	.word	0x00030218

000d4eac <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4eac:	b508      	push	{r3, lr}
   d4eae:	4b02      	ldr	r3, [pc, #8]	; (d4eb8 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4eb0:	681b      	ldr	r3, [r3, #0]
   d4eb2:	695b      	ldr	r3, [r3, #20]
   d4eb4:	9301      	str	r3, [sp, #4]
   d4eb6:	bd08      	pop	{r3, pc}
   d4eb8:	00030218 	.word	0x00030218

000d4ebc <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   d4ebc:	b508      	push	{r3, lr}
   d4ebe:	4b02      	ldr	r3, [pc, #8]	; (d4ec8 <hal_rtc_time_is_valid+0xc>)
   d4ec0:	681b      	ldr	r3, [r3, #0]
   d4ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d4ec4:	9301      	str	r3, [sp, #4]
   d4ec6:	bd08      	pop	{r3, pc}
   d4ec8:	00030218 	.word	0x00030218

000d4ecc <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   d4ecc:	b508      	push	{r3, lr}
   d4ece:	4b02      	ldr	r3, [pc, #8]	; (d4ed8 <hal_rtc_get_time+0xc>)
   d4ed0:	681b      	ldr	r3, [r3, #0]
   d4ed2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d4ed4:	9301      	str	r3, [sp, #4]
   d4ed6:	bd08      	pop	{r3, pc}
   d4ed8:	00030218 	.word	0x00030218

000d4edc <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4edc:	b508      	push	{r3, lr}
   d4ede:	4b02      	ldr	r3, [pc, #8]	; (d4ee8 <os_mutex_recursive_create+0xc>)
   d4ee0:	681b      	ldr	r3, [r3, #0]
   d4ee2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4ee4:	9301      	str	r3, [sp, #4]
   d4ee6:	bd08      	pop	{r3, pc}
   d4ee8:	00030248 	.word	0x00030248

000d4eec <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4eec:	b508      	push	{r3, lr}
   d4eee:	4b02      	ldr	r3, [pc, #8]	; (d4ef8 <inet_inet_ntop+0xc>)
   d4ef0:	681b      	ldr	r3, [r3, #0]
   d4ef2:	695b      	ldr	r3, [r3, #20]
   d4ef4:	9301      	str	r3, [sp, #4]
   d4ef6:	bd08      	pop	{r3, pc}
   d4ef8:	00030264 	.word	0x00030264

000d4efc <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d4efc:	b508      	push	{r3, lr}
   d4efe:	4b02      	ldr	r3, [pc, #8]	; (d4f08 <hal_usart_init+0xc>)
   d4f00:	681b      	ldr	r3, [r3, #0]
   d4f02:	681b      	ldr	r3, [r3, #0]
   d4f04:	9301      	str	r3, [sp, #4]
   d4f06:	bd08      	pop	{r3, pc}
   d4f08:	0003023c 	.word	0x0003023c

000d4f0c <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d4f0c:	b508      	push	{r3, lr}
   d4f0e:	4b02      	ldr	r3, [pc, #8]	; (d4f18 <hal_usart_write+0xc>)
   d4f10:	681b      	ldr	r3, [r3, #0]
   d4f12:	68db      	ldr	r3, [r3, #12]
   d4f14:	9301      	str	r3, [sp, #4]
   d4f16:	bd08      	pop	{r3, pc}
   d4f18:	0003023c 	.word	0x0003023c

000d4f1c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d4f1c:	b508      	push	{r3, lr}
   d4f1e:	4b02      	ldr	r3, [pc, #8]	; (d4f28 <hal_usart_available+0xc>)
   d4f20:	681b      	ldr	r3, [r3, #0]
   d4f22:	691b      	ldr	r3, [r3, #16]
   d4f24:	9301      	str	r3, [sp, #4]
   d4f26:	bd08      	pop	{r3, pc}
   d4f28:	0003023c 	.word	0x0003023c

000d4f2c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d4f2c:	b508      	push	{r3, lr}
   d4f2e:	4b02      	ldr	r3, [pc, #8]	; (d4f38 <hal_usart_read+0xc>)
   d4f30:	681b      	ldr	r3, [r3, #0]
   d4f32:	695b      	ldr	r3, [r3, #20]
   d4f34:	9301      	str	r3, [sp, #4]
   d4f36:	bd08      	pop	{r3, pc}
   d4f38:	0003023c 	.word	0x0003023c

000d4f3c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d4f3c:	b508      	push	{r3, lr}
   d4f3e:	4b02      	ldr	r3, [pc, #8]	; (d4f48 <hal_usart_peek+0xc>)
   d4f40:	681b      	ldr	r3, [r3, #0]
   d4f42:	699b      	ldr	r3, [r3, #24]
   d4f44:	9301      	str	r3, [sp, #4]
   d4f46:	bd08      	pop	{r3, pc}
   d4f48:	0003023c 	.word	0x0003023c

000d4f4c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d4f4c:	b508      	push	{r3, lr}
   d4f4e:	4b02      	ldr	r3, [pc, #8]	; (d4f58 <hal_usart_flush+0xc>)
   d4f50:	681b      	ldr	r3, [r3, #0]
   d4f52:	69db      	ldr	r3, [r3, #28]
   d4f54:	9301      	str	r3, [sp, #4]
   d4f56:	bd08      	pop	{r3, pc}
   d4f58:	0003023c 	.word	0x0003023c

000d4f5c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d4f5c:	b508      	push	{r3, lr}
   d4f5e:	4b02      	ldr	r3, [pc, #8]	; (d4f68 <hal_usart_is_enabled+0xc>)
   d4f60:	681b      	ldr	r3, [r3, #0]
   d4f62:	6a1b      	ldr	r3, [r3, #32]
   d4f64:	9301      	str	r3, [sp, #4]
   d4f66:	bd08      	pop	{r3, pc}
   d4f68:	0003023c 	.word	0x0003023c

000d4f6c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d4f6c:	b508      	push	{r3, lr}
   d4f6e:	4b02      	ldr	r3, [pc, #8]	; (d4f78 <hal_usart_available_data_for_write+0xc>)
   d4f70:	681b      	ldr	r3, [r3, #0]
   d4f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4f74:	9301      	str	r3, [sp, #4]
   d4f76:	bd08      	pop	{r3, pc}
   d4f78:	0003023c 	.word	0x0003023c

000d4f7c <hal_i2c_set_speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   d4f7c:	b508      	push	{r3, lr}
   d4f7e:	4b02      	ldr	r3, [pc, #8]	; (d4f88 <hal_i2c_set_speed+0xc>)
   d4f80:	681b      	ldr	r3, [r3, #0]
   d4f82:	681b      	ldr	r3, [r3, #0]
   d4f84:	9301      	str	r3, [sp, #4]
   d4f86:	bd08      	pop	{r3, pc}
   d4f88:	00030228 	.word	0x00030228

000d4f8c <hal_i2c_begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d4f8c:	b508      	push	{r3, lr}
   d4f8e:	4b02      	ldr	r3, [pc, #8]	; (d4f98 <hal_i2c_begin+0xc>)
   d4f90:	681b      	ldr	r3, [r3, #0]
   d4f92:	68db      	ldr	r3, [r3, #12]
   d4f94:	9301      	str	r3, [sp, #4]
   d4f96:	bd08      	pop	{r3, pc}
   d4f98:	00030228 	.word	0x00030228

000d4f9c <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d4f9c:	b508      	push	{r3, lr}
   d4f9e:	4b02      	ldr	r3, [pc, #8]	; (d4fa8 <hal_i2c_begin_transmission+0xc>)
   d4fa0:	681b      	ldr	r3, [r3, #0]
   d4fa2:	699b      	ldr	r3, [r3, #24]
   d4fa4:	9301      	str	r3, [sp, #4]
   d4fa6:	bd08      	pop	{r3, pc}
   d4fa8:	00030228 	.word	0x00030228

000d4fac <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d4fac:	b508      	push	{r3, lr}
   d4fae:	4b02      	ldr	r3, [pc, #8]	; (d4fb8 <hal_i2c_end_transmission+0xc>)
   d4fb0:	681b      	ldr	r3, [r3, #0]
   d4fb2:	69db      	ldr	r3, [r3, #28]
   d4fb4:	9301      	str	r3, [sp, #4]
   d4fb6:	bd08      	pop	{r3, pc}
   d4fb8:	00030228 	.word	0x00030228

000d4fbc <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d4fbc:	b508      	push	{r3, lr}
   d4fbe:	4b02      	ldr	r3, [pc, #8]	; (d4fc8 <hal_i2c_write+0xc>)
   d4fc0:	681b      	ldr	r3, [r3, #0]
   d4fc2:	6a1b      	ldr	r3, [r3, #32]
   d4fc4:	9301      	str	r3, [sp, #4]
   d4fc6:	bd08      	pop	{r3, pc}
   d4fc8:	00030228 	.word	0x00030228

000d4fcc <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d4fcc:	b508      	push	{r3, lr}
   d4fce:	4b02      	ldr	r3, [pc, #8]	; (d4fd8 <hal_i2c_available+0xc>)
   d4fd0:	681b      	ldr	r3, [r3, #0]
   d4fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4fd4:	9301      	str	r3, [sp, #4]
   d4fd6:	bd08      	pop	{r3, pc}
   d4fd8:	00030228 	.word	0x00030228

000d4fdc <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d4fdc:	b508      	push	{r3, lr}
   d4fde:	4b02      	ldr	r3, [pc, #8]	; (d4fe8 <hal_i2c_read+0xc>)
   d4fe0:	681b      	ldr	r3, [r3, #0]
   d4fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4fe4:	9301      	str	r3, [sp, #4]
   d4fe6:	bd08      	pop	{r3, pc}
   d4fe8:	00030228 	.word	0x00030228

000d4fec <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d4fec:	b508      	push	{r3, lr}
   d4fee:	4b02      	ldr	r3, [pc, #8]	; (d4ff8 <hal_i2c_peek+0xc>)
   d4ff0:	681b      	ldr	r3, [r3, #0]
   d4ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4ff4:	9301      	str	r3, [sp, #4]
   d4ff6:	bd08      	pop	{r3, pc}
   d4ff8:	00030228 	.word	0x00030228

000d4ffc <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d4ffc:	b508      	push	{r3, lr}
   d4ffe:	4b02      	ldr	r3, [pc, #8]	; (d5008 <hal_i2c_flush+0xc>)
   d5000:	681b      	ldr	r3, [r3, #0]
   d5002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5004:	9301      	str	r3, [sp, #4]
   d5006:	bd08      	pop	{r3, pc}
   d5008:	00030228 	.word	0x00030228

000d500c <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d500c:	b508      	push	{r3, lr}
   d500e:	4b02      	ldr	r3, [pc, #8]	; (d5018 <hal_i2c_is_enabled+0xc>)
   d5010:	681b      	ldr	r3, [r3, #0]
   d5012:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5014:	9301      	str	r3, [sp, #4]
   d5016:	bd08      	pop	{r3, pc}
   d5018:	00030228 	.word	0x00030228

000d501c <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d501c:	b508      	push	{r3, lr}
   d501e:	4b02      	ldr	r3, [pc, #8]	; (d5028 <hal_i2c_init+0xc>)
   d5020:	681b      	ldr	r3, [r3, #0]
   d5022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5024:	9301      	str	r3, [sp, #4]
   d5026:	bd08      	pop	{r3, pc}
   d5028:	00030228 	.word	0x00030228

000d502c <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d502c:	b508      	push	{r3, lr}
   d502e:	4b02      	ldr	r3, [pc, #8]	; (d5038 <hal_i2c_request_ex+0xc>)
   d5030:	681b      	ldr	r3, [r3, #0]
   d5032:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5034:	9301      	str	r3, [sp, #4]
   d5036:	bd08      	pop	{r3, pc}
   d5038:	00030228 	.word	0x00030228

000d503c <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d503c:	b508      	push	{r3, lr}
   d503e:	4b02      	ldr	r3, [pc, #8]	; (d5048 <hal_spi_init+0xc>)
   d5040:	681b      	ldr	r3, [r3, #0]
   d5042:	69db      	ldr	r3, [r3, #28]
   d5044:	9301      	str	r3, [sp, #4]
   d5046:	bd08      	pop	{r3, pc}
   d5048:	00030230 	.word	0x00030230

000d504c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d504c:	b508      	push	{r3, lr}
   d504e:	4b02      	ldr	r3, [pc, #8]	; (d5058 <hal_spi_is_enabled+0xc>)
   d5050:	681b      	ldr	r3, [r3, #0]
   d5052:	6a1b      	ldr	r3, [r3, #32]
   d5054:	9301      	str	r3, [sp, #4]
   d5056:	bd08      	pop	{r3, pc}
   d5058:	00030230 	.word	0x00030230

000d505c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d505c:	b508      	push	{r3, lr}
   d505e:	4b02      	ldr	r3, [pc, #8]	; (d5068 <HAL_USB_USART_Init+0xc>)
   d5060:	681b      	ldr	r3, [r3, #0]
   d5062:	681b      	ldr	r3, [r3, #0]
   d5064:	9301      	str	r3, [sp, #4]
   d5066:	bd08      	pop	{r3, pc}
   d5068:	0003024c 	.word	0x0003024c

000d506c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d506c:	b508      	push	{r3, lr}
   d506e:	4b02      	ldr	r3, [pc, #8]	; (d5078 <HAL_USB_USART_Begin+0xc>)
   d5070:	681b      	ldr	r3, [r3, #0]
   d5072:	685b      	ldr	r3, [r3, #4]
   d5074:	9301      	str	r3, [sp, #4]
   d5076:	bd08      	pop	{r3, pc}
   d5078:	0003024c 	.word	0x0003024c

000d507c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d507c:	b508      	push	{r3, lr}
   d507e:	4b02      	ldr	r3, [pc, #8]	; (d5088 <HAL_USB_USART_Available_Data+0xc>)
   d5080:	681b      	ldr	r3, [r3, #0]
   d5082:	691b      	ldr	r3, [r3, #16]
   d5084:	9301      	str	r3, [sp, #4]
   d5086:	bd08      	pop	{r3, pc}
   d5088:	0003024c 	.word	0x0003024c

000d508c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d508c:	b508      	push	{r3, lr}
   d508e:	4b02      	ldr	r3, [pc, #8]	; (d5098 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d5090:	681b      	ldr	r3, [r3, #0]
   d5092:	695b      	ldr	r3, [r3, #20]
   d5094:	9301      	str	r3, [sp, #4]
   d5096:	bd08      	pop	{r3, pc}
   d5098:	0003024c 	.word	0x0003024c

000d509c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d509c:	b508      	push	{r3, lr}
   d509e:	4b02      	ldr	r3, [pc, #8]	; (d50a8 <HAL_USB_USART_Receive_Data+0xc>)
   d50a0:	681b      	ldr	r3, [r3, #0]
   d50a2:	699b      	ldr	r3, [r3, #24]
   d50a4:	9301      	str	r3, [sp, #4]
   d50a6:	bd08      	pop	{r3, pc}
   d50a8:	0003024c 	.word	0x0003024c

000d50ac <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d50ac:	b508      	push	{r3, lr}
   d50ae:	4b02      	ldr	r3, [pc, #8]	; (d50b8 <HAL_USB_USART_Send_Data+0xc>)
   d50b0:	681b      	ldr	r3, [r3, #0]
   d50b2:	69db      	ldr	r3, [r3, #28]
   d50b4:	9301      	str	r3, [sp, #4]
   d50b6:	bd08      	pop	{r3, pc}
   d50b8:	0003024c 	.word	0x0003024c

000d50bc <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d50bc:	b508      	push	{r3, lr}
   d50be:	4b02      	ldr	r3, [pc, #8]	; (d50c8 <HAL_USB_USART_Flush_Data+0xc>)
   d50c0:	681b      	ldr	r3, [r3, #0]
   d50c2:	6a1b      	ldr	r3, [r3, #32]
   d50c4:	9301      	str	r3, [sp, #4]
   d50c6:	bd08      	pop	{r3, pc}
   d50c8:	0003024c 	.word	0x0003024c

000d50cc <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d50cc:	b508      	push	{r3, lr}
   d50ce:	4b02      	ldr	r3, [pc, #8]	; (d50d8 <system_mode+0xc>)
   d50d0:	681b      	ldr	r3, [r3, #0]
   d50d2:	681b      	ldr	r3, [r3, #0]
   d50d4:	9301      	str	r3, [sp, #4]
   d50d6:	bd08      	pop	{r3, pc}
   d50d8:	00030220 	.word	0x00030220

000d50dc <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d50dc:	b508      	push	{r3, lr}
   d50de:	4b02      	ldr	r3, [pc, #8]	; (d50e8 <set_system_mode+0xc>)
   d50e0:	681b      	ldr	r3, [r3, #0]
   d50e2:	685b      	ldr	r3, [r3, #4]
   d50e4:	9301      	str	r3, [sp, #4]
   d50e6:	bd08      	pop	{r3, pc}
   d50e8:	00030220 	.word	0x00030220

000d50ec <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d50ec:	b508      	push	{r3, lr}
   d50ee:	4b02      	ldr	r3, [pc, #8]	; (d50f8 <system_delay_ms+0xc>)
   d50f0:	681b      	ldr	r3, [r3, #0]
   d50f2:	695b      	ldr	r3, [r3, #20]
   d50f4:	9301      	str	r3, [sp, #4]
   d50f6:	bd08      	pop	{r3, pc}
   d50f8:	00030220 	.word	0x00030220

000d50fc <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d50fc:	b508      	push	{r3, lr}
   d50fe:	4b02      	ldr	r3, [pc, #8]	; (d5108 <application_thread_current+0xc>)
   d5100:	681b      	ldr	r3, [r3, #0]
   d5102:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d5104:	9301      	str	r3, [sp, #4]
   d5106:	bd08      	pop	{r3, pc}
   d5108:	00030220 	.word	0x00030220

000d510c <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d510c:	b508      	push	{r3, lr}
   d510e:	4b02      	ldr	r3, [pc, #8]	; (d5118 <application_thread_invoke+0xc>)
   d5110:	681b      	ldr	r3, [r3, #0]
   d5112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d5114:	9301      	str	r3, [sp, #4]
   d5116:	bd08      	pop	{r3, pc}
   d5118:	00030220 	.word	0x00030220

000d511c <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d511c:	b508      	push	{r3, lr}
   d511e:	4b02      	ldr	r3, [pc, #8]	; (d5128 <system_thread_get_state+0xc>)
   d5120:	681b      	ldr	r3, [r3, #0]
   d5122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d5124:	9301      	str	r3, [sp, #4]
   d5126:	bd08      	pop	{r3, pc}
   d5128:	00030220 	.word	0x00030220

000d512c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d512c:	b508      	push	{r3, lr}
   d512e:	4b03      	ldr	r3, [pc, #12]	; (d513c <system_ctrl_set_app_request_handler+0x10>)
   d5130:	681b      	ldr	r3, [r3, #0]
   d5132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d5136:	9301      	str	r3, [sp, #4]
   d5138:	bd08      	pop	{r3, pc}
   d513a:	0000      	.short	0x0000
   d513c:	00030220 	.word	0x00030220

000d5140 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d5140:	b508      	push	{r3, lr}
   d5142:	4b03      	ldr	r3, [pc, #12]	; (d5150 <system_ctrl_set_result+0x10>)
   d5144:	681b      	ldr	r3, [r3, #0]
   d5146:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d514a:	9301      	str	r3, [sp, #4]
   d514c:	bd08      	pop	{r3, pc}
   d514e:	0000      	.short	0x0000
   d5150:	00030220 	.word	0x00030220

000d5154 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d5154:	b508      	push	{r3, lr}
   d5156:	4b02      	ldr	r3, [pc, #8]	; (d5160 <network_connect+0xc>)
   d5158:	681b      	ldr	r3, [r3, #0]
   d515a:	685b      	ldr	r3, [r3, #4]
   d515c:	9301      	str	r3, [sp, #4]
   d515e:	bd08      	pop	{r3, pc}
   d5160:	00030240 	.word	0x00030240

000d5164 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5164:	b508      	push	{r3, lr}
   d5166:	4b02      	ldr	r3, [pc, #8]	; (d5170 <network_connecting+0xc>)
   d5168:	681b      	ldr	r3, [r3, #0]
   d516a:	689b      	ldr	r3, [r3, #8]
   d516c:	9301      	str	r3, [sp, #4]
   d516e:	bd08      	pop	{r3, pc}
   d5170:	00030240 	.word	0x00030240

000d5174 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5174:	b508      	push	{r3, lr}
   d5176:	4b02      	ldr	r3, [pc, #8]	; (d5180 <network_disconnect+0xc>)
   d5178:	681b      	ldr	r3, [r3, #0]
   d517a:	68db      	ldr	r3, [r3, #12]
   d517c:	9301      	str	r3, [sp, #4]
   d517e:	bd08      	pop	{r3, pc}
   d5180:	00030240 	.word	0x00030240

000d5184 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5184:	b508      	push	{r3, lr}
   d5186:	4b02      	ldr	r3, [pc, #8]	; (d5190 <network_ready+0xc>)
   d5188:	681b      	ldr	r3, [r3, #0]
   d518a:	691b      	ldr	r3, [r3, #16]
   d518c:	9301      	str	r3, [sp, #4]
   d518e:	bd08      	pop	{r3, pc}
   d5190:	00030240 	.word	0x00030240

000d5194 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5194:	b508      	push	{r3, lr}
   d5196:	4b02      	ldr	r3, [pc, #8]	; (d51a0 <network_on+0xc>)
   d5198:	681b      	ldr	r3, [r3, #0]
   d519a:	695b      	ldr	r3, [r3, #20]
   d519c:	9301      	str	r3, [sp, #4]
   d519e:	bd08      	pop	{r3, pc}
   d51a0:	00030240 	.word	0x00030240

000d51a4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d51a4:	b508      	push	{r3, lr}
   d51a6:	4b02      	ldr	r3, [pc, #8]	; (d51b0 <network_off+0xc>)
   d51a8:	681b      	ldr	r3, [r3, #0]
   d51aa:	699b      	ldr	r3, [r3, #24]
   d51ac:	9301      	str	r3, [sp, #4]
   d51ae:	bd08      	pop	{r3, pc}
   d51b0:	00030240 	.word	0x00030240

000d51b4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d51b4:	b508      	push	{r3, lr}
   d51b6:	4b02      	ldr	r3, [pc, #8]	; (d51c0 <network_listen+0xc>)
   d51b8:	681b      	ldr	r3, [r3, #0]
   d51ba:	69db      	ldr	r3, [r3, #28]
   d51bc:	9301      	str	r3, [sp, #4]
   d51be:	bd08      	pop	{r3, pc}
   d51c0:	00030240 	.word	0x00030240

000d51c4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d51c4:	b508      	push	{r3, lr}
   d51c6:	4b02      	ldr	r3, [pc, #8]	; (d51d0 <network_listening+0xc>)
   d51c8:	681b      	ldr	r3, [r3, #0]
   d51ca:	6a1b      	ldr	r3, [r3, #32]
   d51cc:	9301      	str	r3, [sp, #4]
   d51ce:	bd08      	pop	{r3, pc}
   d51d0:	00030240 	.word	0x00030240

000d51d4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d51d4:	b508      	push	{r3, lr}
   d51d6:	4b02      	ldr	r3, [pc, #8]	; (d51e0 <network_set_listen_timeout+0xc>)
   d51d8:	681b      	ldr	r3, [r3, #0]
   d51da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d51dc:	9301      	str	r3, [sp, #4]
   d51de:	bd08      	pop	{r3, pc}
   d51e0:	00030240 	.word	0x00030240

000d51e4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d51e4:	b508      	push	{r3, lr}
   d51e6:	4b02      	ldr	r3, [pc, #8]	; (d51f0 <network_get_listen_timeout+0xc>)
   d51e8:	681b      	ldr	r3, [r3, #0]
   d51ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d51ec:	9301      	str	r3, [sp, #4]
   d51ee:	bd08      	pop	{r3, pc}
   d51f0:	00030240 	.word	0x00030240

000d51f4 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d51f4:	b508      	push	{r3, lr}
   d51f6:	4b02      	ldr	r3, [pc, #8]	; (d5200 <network_is_on+0xc>)
   d51f8:	681b      	ldr	r3, [r3, #0]
   d51fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d51fc:	9301      	str	r3, [sp, #4]
   d51fe:	bd08      	pop	{r3, pc}
   d5200:	00030240 	.word	0x00030240

000d5204 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d5204:	b508      	push	{r3, lr}
   d5206:	4b02      	ldr	r3, [pc, #8]	; (d5210 <network_is_off+0xc>)
   d5208:	681b      	ldr	r3, [r3, #0]
   d520a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d520c:	9301      	str	r3, [sp, #4]
   d520e:	bd08      	pop	{r3, pc}
   d5210:	00030240 	.word	0x00030240

000d5214 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d5214:	b508      	push	{r3, lr}
   d5216:	4b02      	ldr	r3, [pc, #8]	; (d5220 <spark_process+0xc>)
   d5218:	681b      	ldr	r3, [r3, #0]
   d521a:	689b      	ldr	r3, [r3, #8]
   d521c:	9301      	str	r3, [sp, #4]
   d521e:	bd08      	pop	{r3, pc}
   d5220:	00030244 	.word	0x00030244

000d5224 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d5224:	b508      	push	{r3, lr}
   d5226:	4b02      	ldr	r3, [pc, #8]	; (d5230 <spark_cloud_flag_connected+0xc>)
   d5228:	681b      	ldr	r3, [r3, #0]
   d522a:	695b      	ldr	r3, [r3, #20]
   d522c:	9301      	str	r3, [sp, #4]
   d522e:	bd08      	pop	{r3, pc}
   d5230:	00030244 	.word	0x00030244

000d5234 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d5234:	b508      	push	{r3, lr}
   d5236:	4b02      	ldr	r3, [pc, #8]	; (d5240 <spark_send_event+0xc>)
   d5238:	681b      	ldr	r3, [r3, #0]
   d523a:	6a1b      	ldr	r3, [r3, #32]
   d523c:	9301      	str	r3, [sp, #4]
   d523e:	bd08      	pop	{r3, pc}
   d5240:	00030244 	.word	0x00030244

000d5244 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d5244:	b508      	push	{r3, lr}
   d5246:	4b02      	ldr	r3, [pc, #8]	; (d5250 <spark_subscribe+0xc>)
   d5248:	681b      	ldr	r3, [r3, #0]
   d524a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d524c:	9301      	str	r3, [sp, #4]
   d524e:	bd08      	pop	{r3, pc}
   d5250:	00030244 	.word	0x00030244

000d5254 <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d5254:	b508      	push	{r3, lr}
   d5256:	4b02      	ldr	r3, [pc, #8]	; (d5260 <spark_sync_time_pending+0xc>)
   d5258:	681b      	ldr	r3, [r3, #0]
   d525a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d525c:	9301      	str	r3, [sp, #4]
   d525e:	bd08      	pop	{r3, pc}
   d5260:	00030244 	.word	0x00030244

000d5264 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5264:	b508      	push	{r3, lr}
   d5266:	4b02      	ldr	r3, [pc, #8]	; (d5270 <spark_set_random_seed_from_cloud_handler+0xc>)
   d5268:	681b      	ldr	r3, [r3, #0]
   d526a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d526c:	9301      	str	r3, [sp, #4]
   d526e:	bd08      	pop	{r3, pc}
   d5270:	00030244 	.word	0x00030244

000d5274 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5274:	b508      	push	{r3, lr}
   d5276:	4b02      	ldr	r3, [pc, #8]	; (d5280 <malloc+0xc>)
   d5278:	681b      	ldr	r3, [r3, #0]
   d527a:	681b      	ldr	r3, [r3, #0]
   d527c:	9301      	str	r3, [sp, #4]
   d527e:	bd08      	pop	{r3, pc}
   d5280:	0003021c 	.word	0x0003021c

000d5284 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5284:	b508      	push	{r3, lr}
   d5286:	4b02      	ldr	r3, [pc, #8]	; (d5290 <free+0xc>)
   d5288:	681b      	ldr	r3, [r3, #0]
   d528a:	685b      	ldr	r3, [r3, #4]
   d528c:	9301      	str	r3, [sp, #4]
   d528e:	bd08      	pop	{r3, pc}
   d5290:	0003021c 	.word	0x0003021c

000d5294 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d5294:	b508      	push	{r3, lr}
   d5296:	4b02      	ldr	r3, [pc, #8]	; (d52a0 <realloc+0xc>)
   d5298:	681b      	ldr	r3, [r3, #0]
   d529a:	689b      	ldr	r3, [r3, #8]
   d529c:	9301      	str	r3, [sp, #4]
   d529e:	bd08      	pop	{r3, pc}
   d52a0:	0003021c 	.word	0x0003021c

000d52a4 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d52a4:	b508      	push	{r3, lr}
   d52a6:	4b02      	ldr	r3, [pc, #8]	; (d52b0 <vsnprintf+0xc>)
   d52a8:	681b      	ldr	r3, [r3, #0]
   d52aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d52ac:	9301      	str	r3, [sp, #4]
   d52ae:	bd08      	pop	{r3, pc}
   d52b0:	0003021c 	.word	0x0003021c

000d52b4 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d52b4:	b508      	push	{r3, lr}
   d52b6:	4b02      	ldr	r3, [pc, #8]	; (d52c0 <abort+0xc>)
   d52b8:	681b      	ldr	r3, [r3, #0]
   d52ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d52bc:	9301      	str	r3, [sp, #4]
   d52be:	bd08      	pop	{r3, pc}
   d52c0:	0003021c 	.word	0x0003021c

000d52c4 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d52c4:	b508      	push	{r3, lr}
   d52c6:	4b02      	ldr	r3, [pc, #8]	; (d52d0 <_malloc_r+0xc>)
   d52c8:	681b      	ldr	r3, [r3, #0]
   d52ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d52cc:	9301      	str	r3, [sp, #4]
   d52ce:	bd08      	pop	{r3, pc}
   d52d0:	0003021c 	.word	0x0003021c

000d52d4 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d52d4:	b508      	push	{r3, lr}
   d52d6:	4b02      	ldr	r3, [pc, #8]	; (d52e0 <newlib_impure_ptr_callback+0xc>)
   d52d8:	681b      	ldr	r3, [r3, #0]
   d52da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d52dc:	9301      	str	r3, [sp, #4]
   d52de:	bd08      	pop	{r3, pc}
   d52e0:	0003021c 	.word	0x0003021c

000d52e4 <localtime_r>:
// Electron has some of these exported from a different system part through services2 dynalib
// Photon/P1 do not have enough space in system-part2
#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   d52e4:	b508      	push	{r3, lr}
   d52e6:	4b02      	ldr	r3, [pc, #8]	; (d52f0 <localtime_r+0xc>)
   d52e8:	681b      	ldr	r3, [r3, #0]
   d52ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d52ec:	9301      	str	r3, [sp, #4]
   d52ee:	bd08      	pop	{r3, pc}
   d52f0:	0003021c 	.word	0x0003021c

000d52f4 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d52f4:	2200      	movs	r2, #0
   d52f6:	6840      	ldr	r0, [r0, #4]
   d52f8:	4611      	mov	r1, r2
   d52fa:	f7ff bf63 	b.w	d51c4 <network_listening>

000d52fe <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d52fe:	2200      	movs	r2, #0
   d5300:	6840      	ldr	r0, [r0, #4]
   d5302:	4611      	mov	r1, r2
   d5304:	f7ff bf6e 	b.w	d51e4 <network_get_listen_timeout>

000d5308 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d5308:	6840      	ldr	r0, [r0, #4]
   d530a:	2200      	movs	r2, #0
   d530c:	f7ff bf62 	b.w	d51d4 <network_set_listen_timeout>

000d5310 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d5310:	6840      	ldr	r0, [r0, #4]
   d5312:	2200      	movs	r2, #0
   d5314:	f081 0101 	eor.w	r1, r1, #1
   d5318:	f7ff bf4c 	b.w	d51b4 <network_listen>

000d531c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d531c:	2300      	movs	r3, #0
   d531e:	6840      	ldr	r0, [r0, #4]
   d5320:	461a      	mov	r2, r3
   d5322:	4619      	mov	r1, r3
   d5324:	f7ff bf3e 	b.w	d51a4 <network_off>

000d5328 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d5328:	2300      	movs	r3, #0
   d532a:	6840      	ldr	r0, [r0, #4]
   d532c:	461a      	mov	r2, r3
   d532e:	4619      	mov	r1, r3
   d5330:	f7ff bf30 	b.w	d5194 <network_on>

000d5334 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5334:	2200      	movs	r2, #0
   d5336:	6840      	ldr	r0, [r0, #4]
   d5338:	4611      	mov	r1, r2
   d533a:	f7ff bf23 	b.w	d5184 <network_ready>

000d533e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d533e:	2200      	movs	r2, #0
   d5340:	6840      	ldr	r0, [r0, #4]
   d5342:	4611      	mov	r1, r2
   d5344:	f7ff bf0e 	b.w	d5164 <network_connecting>

000d5348 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5348:	6840      	ldr	r0, [r0, #4]
   d534a:	2200      	movs	r2, #0
   d534c:	2102      	movs	r1, #2
   d534e:	f7ff bf11 	b.w	d5174 <network_disconnect>

000d5352 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d5352:	2300      	movs	r3, #0
   d5354:	6840      	ldr	r0, [r0, #4]
   d5356:	461a      	mov	r2, r3
   d5358:	f7ff befc 	b.w	d5154 <network_connect>

000d535c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d535c:	4b02      	ldr	r3, [pc, #8]	; (d5368 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d535e:	2203      	movs	r2, #3
   d5360:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d5362:	4a02      	ldr	r2, [pc, #8]	; (d536c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5364:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d5366:	4770      	bx	lr
   d5368:	2003e56c 	.word	0x2003e56c
   d536c:	000d7454 	.word	0x000d7454

000d5370 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d5370:	b510      	push	{r4, lr}
   d5372:	4604      	mov	r4, r0
   d5374:	4608      	mov	r0, r1
{
    _spi = spi;
   d5376:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d5378:	f7ff fe60 	bl	d503c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d537c:	2300      	movs	r3, #0
   d537e:	6063      	str	r3, [r4, #4]
}
   d5380:	4620      	mov	r0, r4
   d5382:	bd10      	pop	{r4, pc}

000d5384 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d5384:	4b05      	ldr	r3, [pc, #20]	; (d539c <_GLOBAL__sub_I_System+0x18>)
   d5386:	2202      	movs	r2, #2
   d5388:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d538a:	4b05      	ldr	r3, [pc, #20]	; (d53a0 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   d538c:	4a05      	ldr	r2, [pc, #20]	; (d53a4 <_GLOBAL__sub_I_System+0x20>)
   d538e:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   d5390:	2000      	movs	r0, #0
   d5392:	6018      	str	r0, [r3, #0]
   d5394:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
   d5396:	7198      	strb	r0, [r3, #6]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5398:	f7ff bea0 	b.w	d50dc <set_system_mode>
   d539c:	2003e580 	.word	0x2003e580
   d53a0:	2003e574 	.word	0x2003e574
   d53a4:	ffff0000 	.word	0xffff0000

000d53a8 <ltoa>:



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   d53a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
   d53ac:	1e93      	subs	r3, r2, #2
{
   d53ae:	b08c      	sub	sp, #48	; 0x30
      if (36 < base || 2 > base)
   d53b0:	2b22      	cmp	r3, #34	; 0x22
   d53b2:	f04f 0300 	mov.w	r3, #0
{
   d53b6:	460d      	mov	r5, r1
   d53b8:	4614      	mov	r4, r2
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
   d53ba:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
      if (36 < base || 2 > base)
   d53be:	d927      	bls.n	d5410 <ltoa+0x68>

      if (10 == base && N < 0L)
   d53c0:	2800      	cmp	r0, #0
   d53c2:	da2a      	bge.n	d541a <ltoa+0x72>
      {
            *head++ = '-';
   d53c4:	462e      	mov	r6, r5
   d53c6:	232d      	movs	r3, #45	; 0x2d
   d53c8:	f806 3b01 	strb.w	r3, [r6], #1
            uarg    = -N;
   d53cc:	4240      	negs	r0, r0
   d53ce:	240a      	movs	r4, #10
      *tail-- = '\0';
   d53d0:	f10d 072b 	add.w	r7, sp, #43	; 0x2b
      }
      else  uarg = N;

      if (uarg)
      {
            for (i = 1; uarg; ++i)
   d53d4:	f04f 0801 	mov.w	r8, #1
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
   d53d8:	4622      	mov	r2, r4
   d53da:	4601      	mov	r1, r0
   d53dc:	a801      	add	r0, sp, #4
   d53de:	f001 fe95 	bl	d710c <ldiv>
   d53e2:	9b02      	ldr	r3, [sp, #8]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
   d53e4:	9801      	ldr	r0, [sp, #4]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
   d53e6:	2b09      	cmp	r3, #9
   d53e8:	bfcc      	ite	gt
   d53ea:	2237      	movgt	r2, #55	; 0x37
   d53ec:	2230      	movle	r2, #48	; 0x30
   d53ee:	fa52 f383 	uxtab	r3, r2, r3
   d53f2:	f807 3901 	strb.w	r3, [r7], #-1
            for (i = 1; uarg; ++i)
   d53f6:	f108 0801 	add.w	r8, r8, #1
   d53fa:	2800      	cmp	r0, #0
   d53fc:	d1ec      	bne.n	d53d8 <ltoa+0x30>
            }
      }
      else  *tail-- = '0';

      memcpy(head, ++tail, i);
   d53fe:	4642      	mov	r2, r8
   d5400:	1c79      	adds	r1, r7, #1
   d5402:	4630      	mov	r0, r6
   d5404:	f001 fe96 	bl	d7134 <memcpy>
      return str;
}
   d5408:	4628      	mov	r0, r5
   d540a:	b00c      	add	sp, #48	; 0x30
   d540c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (10 == base && N < 0L)
   d5410:	2a0a      	cmp	r2, #10
   d5412:	d0d5      	beq.n	d53c0 <ltoa+0x18>
      if (uarg)
   d5414:	b118      	cbz	r0, d541e <ltoa+0x76>
   d5416:	462e      	mov	r6, r5
   d5418:	e7da      	b.n	d53d0 <ltoa+0x28>
   d541a:	240a      	movs	r4, #10
   d541c:	e7fa      	b.n	d5414 <ltoa+0x6c>
      else  *tail-- = '0';
   d541e:	2330      	movs	r3, #48	; 0x30
   d5420:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
   d5424:	462e      	mov	r6, r5
   d5426:	f10d 072a 	add.w	r7, sp, #42	; 0x2a
      int i = 2;
   d542a:	f04f 0802 	mov.w	r8, #2
   d542e:	e7e6      	b.n	d53fe <ltoa+0x56>

000d5430 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d5430:	b510      	push	{r4, lr}
   d5432:	4604      	mov	r4, r0
{
	free(buffer);
   d5434:	6800      	ldr	r0, [r0, #0]
   d5436:	f7ff ff25 	bl	d5284 <free>
}
   d543a:	4620      	mov	r0, r4
   d543c:	bd10      	pop	{r4, pc}

000d543e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d543e:	b510      	push	{r4, lr}
   d5440:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d5442:	6800      	ldr	r0, [r0, #0]
   d5444:	b108      	cbz	r0, d544a <_ZN6String10invalidateEv+0xc>
   d5446:	f7ff ff1d 	bl	d5284 <free>
	buffer = NULL;
   d544a:	2300      	movs	r3, #0
	capacity = len = 0;
   d544c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d5450:	6023      	str	r3, [r4, #0]
}
   d5452:	bd10      	pop	{r4, pc}

000d5454 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d5454:	b538      	push	{r3, r4, r5, lr}
   d5456:	4604      	mov	r4, r0
   d5458:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d545a:	6800      	ldr	r0, [r0, #0]
   d545c:	3101      	adds	r1, #1
   d545e:	f7ff ff19 	bl	d5294 <realloc>
	if (newbuffer) {
   d5462:	b110      	cbz	r0, d546a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d5464:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d5468:	2001      	movs	r0, #1
	}
	return 0;
}
   d546a:	bd38      	pop	{r3, r4, r5, pc}

000d546c <_ZN6String7reserveEj>:
{
   d546c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d546e:	6803      	ldr	r3, [r0, #0]
{
   d5470:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d5472:	b123      	cbz	r3, d547e <_ZN6String7reserveEj+0x12>
   d5474:	6843      	ldr	r3, [r0, #4]
   d5476:	428b      	cmp	r3, r1
   d5478:	d301      	bcc.n	d547e <_ZN6String7reserveEj+0x12>
   d547a:	2001      	movs	r0, #1
}
   d547c:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d547e:	4620      	mov	r0, r4
   d5480:	f7ff ffe8 	bl	d5454 <_ZN6String12changeBufferEj>
   d5484:	2800      	cmp	r0, #0
   d5486:	d0f9      	beq.n	d547c <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d5488:	68a3      	ldr	r3, [r4, #8]
   d548a:	2b00      	cmp	r3, #0
   d548c:	d1f5      	bne.n	d547a <_ZN6String7reserveEj+0xe>
   d548e:	6822      	ldr	r2, [r4, #0]
   d5490:	7013      	strb	r3, [r2, #0]
   d5492:	e7f2      	b.n	d547a <_ZN6String7reserveEj+0xe>

000d5494 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5494:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5496:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d5498:	4611      	mov	r1, r2
   d549a:	9201      	str	r2, [sp, #4]
{
   d549c:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d549e:	f7ff ffe5 	bl	d546c <_ZN6String7reserveEj>
   d54a2:	9a01      	ldr	r2, [sp, #4]
   d54a4:	b928      	cbnz	r0, d54b2 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d54a6:	4620      	mov	r0, r4
   d54a8:	f7ff ffc9 	bl	d543e <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d54ac:	4620      	mov	r0, r4
   d54ae:	b003      	add	sp, #12
   d54b0:	bd30      	pop	{r4, r5, pc}
	len = length;
   d54b2:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d54b4:	4629      	mov	r1, r5
   d54b6:	6820      	ldr	r0, [r4, #0]
   d54b8:	f001 fe3c 	bl	d7134 <memcpy>
	buffer[len] = 0;
   d54bc:	6822      	ldr	r2, [r4, #0]
   d54be:	68a3      	ldr	r3, [r4, #8]
   d54c0:	2100      	movs	r1, #0
   d54c2:	54d1      	strb	r1, [r2, r3]
	return *this;
   d54c4:	e7f2      	b.n	d54ac <_ZN6String4copyEPKcj+0x18>

000d54c6 <_ZN6StringC1EPKc>:
	buffer = NULL;
   d54c6:	2300      	movs	r3, #0
String::String(const char *cstr)
   d54c8:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d54ca:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d54ce:	4604      	mov	r4, r0
	len = 0;
   d54d0:	6083      	str	r3, [r0, #8]
	flags = 0;
   d54d2:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d54d4:	b141      	cbz	r1, d54e8 <_ZN6StringC1EPKc+0x22>
   d54d6:	4608      	mov	r0, r1
   d54d8:	9101      	str	r1, [sp, #4]
   d54da:	f001 fe82 	bl	d71e2 <strlen>
   d54de:	9901      	ldr	r1, [sp, #4]
   d54e0:	4602      	mov	r2, r0
   d54e2:	4620      	mov	r0, r4
   d54e4:	f7ff ffd6 	bl	d5494 <_ZN6String4copyEPKcj>
}
   d54e8:	4620      	mov	r0, r4
   d54ea:	b002      	add	sp, #8
   d54ec:	bd10      	pop	{r4, pc}

000d54ee <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d54ee:	b513      	push	{r0, r1, r4, lr}
   d54f0:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d54f2:	b159      	cbz	r1, d550c <_ZN6StringaSEPKc+0x1e>
   d54f4:	4608      	mov	r0, r1
   d54f6:	9101      	str	r1, [sp, #4]
   d54f8:	f001 fe73 	bl	d71e2 <strlen>
   d54fc:	9901      	ldr	r1, [sp, #4]
   d54fe:	4602      	mov	r2, r0
   d5500:	4620      	mov	r0, r4
   d5502:	f7ff ffc7 	bl	d5494 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d5506:	4620      	mov	r0, r4
   d5508:	b002      	add	sp, #8
   d550a:	bd10      	pop	{r4, pc}
	else invalidate();
   d550c:	f7ff ff97 	bl	d543e <_ZN6String10invalidateEv>
   d5510:	e7f9      	b.n	d5506 <_ZN6StringaSEPKc+0x18>

000d5512 <_ZN6StringC1Elh>:
String::String(long value, unsigned char base)
   d5512:	b510      	push	{r4, lr}
   d5514:	4604      	mov	r4, r0
   d5516:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   d5518:	2300      	movs	r3, #0
	capacity = 0;
   d551a:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   d551e:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d5520:	7323      	strb	r3, [r4, #12]
String::String(long value, unsigned char base)
   d5522:	4608      	mov	r0, r1
	ltoa(value, buf, base);
   d5524:	a901      	add	r1, sp, #4
   d5526:	f7ff ff3f 	bl	d53a8 <ltoa>
	*this = buf;
   d552a:	a901      	add	r1, sp, #4
   d552c:	4620      	mov	r0, r4
   d552e:	f7ff ffde 	bl	d54ee <_ZN6StringaSEPKc>
}
   d5532:	4620      	mov	r0, r4
   d5534:	b00a      	add	sp, #40	; 0x28
   d5536:	bd10      	pop	{r4, pc}

000d5538 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   d5538:	b40e      	push	{r1, r2, r3}
   d553a:	b570      	push	{r4, r5, r6, lr}
   d553c:	b087      	sub	sp, #28
   d553e:	ad0b      	add	r5, sp, #44	; 0x2c
   d5540:	4604      	mov	r4, r0
   d5542:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d5546:	9201      	str	r2, [sp, #4]
   d5548:	462b      	mov	r3, r5
   d554a:	2105      	movs	r1, #5
   d554c:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   d554e:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d5550:	f7ff fea8 	bl	d52a4 <vsnprintf>
    va_end(marker);

    String result;
   d5554:	490b      	ldr	r1, [pc, #44]	; (d5584 <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d5556:	4606      	mov	r6, r0
    String result;
   d5558:	4620      	mov	r0, r4
   d555a:	f7ff ffb4 	bl	d54c6 <_ZN6StringC1EPKc>
    result.reserve(n);  // internally adds +1 for null terminator
   d555e:	4631      	mov	r1, r6
   d5560:	4620      	mov	r0, r4
   d5562:	f7ff ff83 	bl	d546c <_ZN6String7reserveEj>
    if (result.buffer) {
   d5566:	6820      	ldr	r0, [r4, #0]
   d5568:	b130      	cbz	r0, d5578 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d556a:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   d556c:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d556e:	462b      	mov	r3, r5
   d5570:	1c71      	adds	r1, r6, #1
   d5572:	f7ff fe97 	bl	d52a4 <vsnprintf>
        va_end(marker);
        result.len = n;
   d5576:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   d5578:	4620      	mov	r0, r4
   d557a:	b007      	add	sp, #28
   d557c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d5580:	b003      	add	sp, #12
   d5582:	4770      	bx	lr
   d5584:	000d7306 	.word	0x000d7306

000d5588 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d5588:	b510      	push	{r4, lr}
          _M_dispose();
   d558a:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d558c:	4604      	mov	r4, r0
          _M_dispose();
   d558e:	689b      	ldr	r3, [r3, #8]
   d5590:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d5592:	68a3      	ldr	r3, [r4, #8]
   d5594:	3b01      	subs	r3, #1
   d5596:	60a3      	str	r3, [r4, #8]
   d5598:	b92b      	cbnz	r3, d55a6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d559a:	6823      	ldr	r3, [r4, #0]
   d559c:	4620      	mov	r0, r4
   d559e:	68db      	ldr	r3, [r3, #12]
    }
   d55a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d55a4:	4718      	bx	r3
    }
   d55a6:	bd10      	pop	{r4, pc}

000d55a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d55a8:	680b      	ldr	r3, [r1, #0]
   d55aa:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d55ac:	b113      	cbz	r3, d55b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d55ae:	685a      	ldr	r2, [r3, #4]
   d55b0:	3201      	adds	r2, #1
   d55b2:	605a      	str	r2, [r3, #4]
	  _M_pi->_M_add_ref_copy();
      }
   d55b4:	4770      	bx	lr

000d55b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   d55b6:	b510      	push	{r4, lr}
   d55b8:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   d55ba:	6800      	ldr	r0, [r0, #0]
   d55bc:	b128      	cbz	r0, d55ca <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
      if (--_M_use_count == 0)
   d55be:	6843      	ldr	r3, [r0, #4]
   d55c0:	3b01      	subs	r3, #1
   d55c2:	6043      	str	r3, [r0, #4]
   d55c4:	b90b      	cbnz	r3, d55ca <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d55c6:	f7ff ffdf 	bl	d5588 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
      }
   d55ca:	4620      	mov	r0, r4
   d55cc:	bd10      	pop	{r4, pc}
	...

000d55d0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d55d0:	4802      	ldr	r0, [pc, #8]	; (d55dc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d55d2:	2300      	movs	r3, #0
   d55d4:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d55d6:	f7ff bc81 	b.w	d4edc <os_mutex_recursive_create>
   d55da:	bf00      	nop
   d55dc:	2003e584 	.word	0x2003e584

000d55e0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d55e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d55e2:	4606      	mov	r6, r0
   d55e4:	460d      	mov	r5, r1
  size_t n = 0;
   d55e6:	188f      	adds	r7, r1, r2
   d55e8:	2400      	movs	r4, #0
  while (size--) {
   d55ea:	42bd      	cmp	r5, r7
   d55ec:	d00c      	beq.n	d5608 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d55ee:	6833      	ldr	r3, [r6, #0]
   d55f0:	f815 1b01 	ldrb.w	r1, [r5], #1
   d55f4:	689b      	ldr	r3, [r3, #8]
   d55f6:	4630      	mov	r0, r6
   d55f8:	4798      	blx	r3
     if (chunk>=0)
   d55fa:	1e03      	subs	r3, r0, #0
   d55fc:	db01      	blt.n	d5602 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d55fe:	441c      	add	r4, r3
  while (size--) {
   d5600:	e7f3      	b.n	d55ea <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5602:	2c00      	cmp	r4, #0
   d5604:	bf08      	it	eq
   d5606:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d5608:	4620      	mov	r0, r4
   d560a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d560c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d560c:	b513      	push	{r0, r1, r4, lr}
   d560e:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d5610:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d5612:	b159      	cbz	r1, d562c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d5614:	9101      	str	r1, [sp, #4]
   d5616:	f001 fde4 	bl	d71e2 <strlen>
   d561a:	6823      	ldr	r3, [r4, #0]
   d561c:	9901      	ldr	r1, [sp, #4]
   d561e:	68db      	ldr	r3, [r3, #12]
   d5620:	4602      	mov	r2, r0
   d5622:	4620      	mov	r0, r4
    }
   d5624:	b002      	add	sp, #8
   d5626:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d562a:	4718      	bx	r3
    }
   d562c:	b002      	add	sp, #8
   d562e:	bd10      	pop	{r4, pc}

000d5630 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d5630:	b508      	push	{r3, lr}
  return write(str);
   d5632:	f7ff ffeb 	bl	d560c <_ZN5Print5writeEPKc>
}
   d5636:	bd08      	pop	{r3, pc}

000d5638 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d5638:	6803      	ldr	r3, [r0, #0]
   d563a:	689b      	ldr	r3, [r3, #8]
   d563c:	4718      	bx	r3

000d563e <_ZN5Print5printEPK19__FlashStringHelper>:
 {
   return x.printTo(*this);
 }

size_t Print::print(const __FlashStringHelper* str)
{
   d563e:	b508      	push	{r3, lr}
  return write(str);
   d5640:	f7ff ffe4 	bl	d560c <_ZN5Print5writeEPKc>
  return print(reinterpret_cast<const char*>(str));
}
   d5644:	bd08      	pop	{r3, pc}

000d5646 <_ZN5Print7printlnEv>:

size_t Print::println(void)
{
   d5646:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d5648:	210d      	movs	r1, #13
{
   d564a:	4605      	mov	r5, r0
  size_t n = print('\r');
   d564c:	f7ff fff4 	bl	d5638 <_ZN5Print5printEc>
  n += print('\n');
   d5650:	210a      	movs	r1, #10
  size_t n = print('\r');
   d5652:	4604      	mov	r4, r0
  n += print('\n');
   d5654:	4628      	mov	r0, r5
   d5656:	f7ff ffef 	bl	d5638 <_ZN5Print5printEc>
  return n;
}
   d565a:	4420      	add	r0, r4
   d565c:	bd38      	pop	{r3, r4, r5, pc}

000d565e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d565e:	b538      	push	{r3, r4, r5, lr}
   d5660:	4605      	mov	r5, r0
  return write(str);
   d5662:	f7ff ffd3 	bl	d560c <_ZN5Print5writeEPKc>
   d5666:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d5668:	4628      	mov	r0, r5
   d566a:	f7ff ffec 	bl	d5646 <_ZN5Print7printlnEv>
  return n;
}
   d566e:	4420      	add	r0, r4
   d5670:	bd38      	pop	{r3, r4, r5, pc}

000d5672 <_ZN5Print7printlnEPK19__FlashStringHelper>:
   return n;
 }

size_t Print::println(const __FlashStringHelper* str)
{
  return println(reinterpret_cast<const char*>(str));
   d5672:	f7ff bff4 	b.w	d565e <_ZN5Print7printlnEPKc>

000d5676 <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5676:	b530      	push	{r4, r5, lr}
   d5678:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d567a:	2300      	movs	r3, #0
   d567c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5680:	2a01      	cmp	r2, #1
   d5682:	bf98      	it	ls
   d5684:	220a      	movls	r2, #10
   d5686:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d5688:	460d      	mov	r5, r1
   d568a:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d568e:	fb01 5312 	mls	r3, r1, r2, r5
   d5692:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5696:	2b09      	cmp	r3, #9
   d5698:	bf94      	ite	ls
   d569a:	3330      	addls	r3, #48	; 0x30
   d569c:	3337      	addhi	r3, #55	; 0x37
   d569e:	b2db      	uxtb	r3, r3
  } while(n);
   d56a0:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d56a2:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d56a6:	d9ef      	bls.n	d5688 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d56a8:	4621      	mov	r1, r4
   d56aa:	f7ff ffaf 	bl	d560c <_ZN5Print5writeEPKc>
}
   d56ae:	b00b      	add	sp, #44	; 0x2c
   d56b0:	bd30      	pop	{r4, r5, pc}
	...

000d56b4 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d56b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d56b8:	ec55 4b10 	vmov	r4, r5, d0
   d56bc:	4606      	mov	r6, r0
   d56be:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d56c0:	ee10 2a10 	vmov	r2, s0
   d56c4:	ee10 0a10 	vmov	r0, s0
   d56c8:	462b      	mov	r3, r5
   d56ca:	4629      	mov	r1, r5
   d56cc:	f001 fcba 	bl	d7044 <__aeabi_dcmpun>
   d56d0:	b140      	cbz	r0, d56e4 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   d56d2:	4953      	ldr	r1, [pc, #332]	; (d5820 <_ZN5Print10printFloatEdh+0x16c>)
   d56d4:	4630      	mov	r0, r6
   d56d6:	f7ff ff99 	bl	d560c <_ZN5Print5writeEPKc>
   d56da:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   d56dc:	4650      	mov	r0, sl
   d56de:	b003      	add	sp, #12
   d56e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   d56e4:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   d56e8:	4b4e      	ldr	r3, [pc, #312]	; (d5824 <_ZN5Print10printFloatEdh+0x170>)
   d56ea:	f04f 32ff 	mov.w	r2, #4294967295
   d56ee:	4620      	mov	r0, r4
   d56f0:	4649      	mov	r1, r9
   d56f2:	f001 fca7 	bl	d7044 <__aeabi_dcmpun>
   d56f6:	b948      	cbnz	r0, d570c <_ZN5Print10printFloatEdh+0x58>
   d56f8:	4b4a      	ldr	r3, [pc, #296]	; (d5824 <_ZN5Print10printFloatEdh+0x170>)
   d56fa:	f04f 32ff 	mov.w	r2, #4294967295
   d56fe:	4620      	mov	r0, r4
   d5700:	4649      	mov	r1, r9
   d5702:	f001 fc81 	bl	d7008 <__aeabi_dcmple>
   d5706:	b908      	cbnz	r0, d570c <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   d5708:	4947      	ldr	r1, [pc, #284]	; (d5828 <_ZN5Print10printFloatEdh+0x174>)
   d570a:	e7e3      	b.n	d56d4 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d570c:	4b47      	ldr	r3, [pc, #284]	; (d582c <_ZN5Print10printFloatEdh+0x178>)
   d570e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d5712:	4620      	mov	r0, r4
   d5714:	4629      	mov	r1, r5
   d5716:	f001 fc8b 	bl	d7030 <__aeabi_dcmpgt>
   d571a:	b108      	cbz	r0, d5720 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   d571c:	4944      	ldr	r1, [pc, #272]	; (d5830 <_ZN5Print10printFloatEdh+0x17c>)
   d571e:	e7d9      	b.n	d56d4 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d5720:	4b44      	ldr	r3, [pc, #272]	; (d5834 <_ZN5Print10printFloatEdh+0x180>)
   d5722:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d5726:	4620      	mov	r0, r4
   d5728:	4629      	mov	r1, r5
   d572a:	f001 fc63 	bl	d6ff4 <__aeabi_dcmplt>
   d572e:	2800      	cmp	r0, #0
   d5730:	d1f4      	bne.n	d571c <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   d5732:	2200      	movs	r2, #0
   d5734:	2300      	movs	r3, #0
   d5736:	4620      	mov	r0, r4
   d5738:	4629      	mov	r1, r5
   d573a:	f001 fc5b 	bl	d6ff4 <__aeabi_dcmplt>
   d573e:	b1d0      	cbz	r0, d5776 <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   d5740:	212d      	movs	r1, #45	; 0x2d
   d5742:	4630      	mov	r0, r6
   d5744:	f7ff ff78 	bl	d5638 <_ZN5Print5printEc>
     number = -number;
   d5748:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   d574c:	4682      	mov	sl, r0
     number = -number;
   d574e:	461d      	mov	r5, r3
  double rounding = 0.5;
   d5750:	4939      	ldr	r1, [pc, #228]	; (d5838 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   d5752:	f8df 90ec 	ldr.w	r9, [pc, #236]	; d5840 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   d5756:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   d575a:	2000      	movs	r0, #0
    rounding /= 10.0;
   d575c:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   d5760:	fa5f f38b 	uxtb.w	r3, fp
   d5764:	429f      	cmp	r7, r3
   d5766:	d908      	bls.n	d577a <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   d5768:	4642      	mov	r2, r8
   d576a:	464b      	mov	r3, r9
   d576c:	f001 fafa 	bl	d6d64 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   d5770:	f10b 0b01 	add.w	fp, fp, #1
   d5774:	e7f4      	b.n	d5760 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   d5776:	4682      	mov	sl, r0
   d5778:	e7ea      	b.n	d5750 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   d577a:	4622      	mov	r2, r4
   d577c:	462b      	mov	r3, r5
   d577e:	f001 f811 	bl	d67a4 <__adddf3>
   d5782:	460d      	mov	r5, r1
   d5784:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   d5786:	f001 fc9b 	bl	d70c0 <__aeabi_d2uiz>
   d578a:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   d578c:	f001 f946 	bl	d6a1c <__aeabi_ui2d>
   d5790:	4602      	mov	r2, r0
   d5792:	460b      	mov	r3, r1
   d5794:	4620      	mov	r0, r4
   d5796:	4629      	mov	r1, r5
   d5798:	f001 f802 	bl	d67a0 <__aeabi_dsub>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d579c:	220a      	movs	r2, #10
   d579e:	4604      	mov	r4, r0
   d57a0:	460d      	mov	r5, r1
   d57a2:	4630      	mov	r0, r6
   d57a4:	4641      	mov	r1, r8
   d57a6:	f7ff ff66 	bl	d5676 <_ZN5Print11printNumberEmh>
  n += print(int_part);
   d57aa:	4482      	add	sl, r0
  if (digits > 0) {
   d57ac:	b127      	cbz	r7, d57b8 <_ZN5Print10printFloatEdh+0x104>
  return write(str);
   d57ae:	4923      	ldr	r1, [pc, #140]	; (d583c <_ZN5Print10printFloatEdh+0x188>)
   d57b0:	4630      	mov	r0, r6
   d57b2:	f7ff ff2b 	bl	d560c <_ZN5Print5writeEPKc>
    n += print(".");
   d57b6:	4482      	add	sl, r0
    remainder *= 10.0;
   d57b8:	f8df 9084 	ldr.w	r9, [pc, #132]	; d5840 <_ZN5Print10printFloatEdh+0x18c>
   d57bc:	f04f 0800 	mov.w	r8, #0
  while (digits-- > 0)
   d57c0:	3f01      	subs	r7, #1
   d57c2:	b2ff      	uxtb	r7, r7
   d57c4:	2fff      	cmp	r7, #255	; 0xff
   d57c6:	d089      	beq.n	d56dc <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   d57c8:	4642      	mov	r2, r8
   d57ca:	464b      	mov	r3, r9
   d57cc:	4620      	mov	r0, r4
   d57ce:	4629      	mov	r1, r5
   d57d0:	f001 f99e 	bl	d6b10 <__aeabi_dmul>
   d57d4:	4604      	mov	r4, r0
   d57d6:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   d57d8:	f001 fc4a 	bl	d7070 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   d57dc:	f1b0 0b00 	subs.w	fp, r0, #0
   d57e0:	da1a      	bge.n	d5818 <_ZN5Print10printFloatEdh+0x164>
            t = print('-');
   d57e2:	212d      	movs	r1, #45	; 0x2d
   d57e4:	4630      	mov	r0, r6
   d57e6:	f7ff ff27 	bl	d5638 <_ZN5Print5printEc>
            val = -n;
   d57ea:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   d57ee:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   d57f0:	220a      	movs	r2, #10
   d57f2:	4630      	mov	r0, r6
   d57f4:	9301      	str	r3, [sp, #4]
   d57f6:	f7ff ff3e 	bl	d5676 <_ZN5Print11printNumberEmh>
   d57fa:	9b01      	ldr	r3, [sp, #4]
   d57fc:	4418      	add	r0, r3
    n += print(toPrint);
   d57fe:	4482      	add	sl, r0
    remainder -= toPrint;
   d5800:	4658      	mov	r0, fp
   d5802:	f001 f91b 	bl	d6a3c <__aeabi_i2d>
   d5806:	4602      	mov	r2, r0
   d5808:	460b      	mov	r3, r1
   d580a:	4620      	mov	r0, r4
   d580c:	4629      	mov	r1, r5
   d580e:	f000 ffc7 	bl	d67a0 <__aeabi_dsub>
   d5812:	4604      	mov	r4, r0
   d5814:	460d      	mov	r5, r1
  while (digits-- > 0)
   d5816:	e7d3      	b.n	d57c0 <_ZN5Print10printFloatEdh+0x10c>
            val = n;
   d5818:	4659      	mov	r1, fp
        size_t t = 0;
   d581a:	2300      	movs	r3, #0
   d581c:	e7e8      	b.n	d57f0 <_ZN5Print10printFloatEdh+0x13c>
   d581e:	bf00      	nop
   d5820:	000d7488 	.word	0x000d7488
   d5824:	7fefffff 	.word	0x7fefffff
   d5828:	000d748c 	.word	0x000d748c
   d582c:	41efffff 	.word	0x41efffff
   d5830:	000d7490 	.word	0x000d7490
   d5834:	c1efffff 	.word	0xc1efffff
   d5838:	3fe00000 	.word	0x3fe00000
   d583c:	000d7305 	.word	0x000d7305
   d5840:	40240000 	.word	0x40240000

000d5844 <_ZN5Print7printlnEdi>:
{
   d5844:	b538      	push	{r3, r4, r5, lr}
  return printFloat(n, digits);
   d5846:	b2c9      	uxtb	r1, r1
{
   d5848:	4605      	mov	r5, r0
  return printFloat(n, digits);
   d584a:	f7ff ff33 	bl	d56b4 <_ZN5Print10printFloatEdh>
   d584e:	4604      	mov	r4, r0
  n += println();
   d5850:	4628      	mov	r0, r5
   d5852:	f7ff fef8 	bl	d5646 <_ZN5Print7printlnEv>
}
   d5856:	4420      	add	r0, r4
   d5858:	bd38      	pop	{r3, r4, r5, pc}
	...

000d585c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d585c:	4b01      	ldr	r3, [pc, #4]	; (d5864 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d585e:	4a02      	ldr	r2, [pc, #8]	; (d5868 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5860:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d5862:	4770      	bx	lr
   d5864:	2003e588 	.word	0x2003e588
   d5868:	000d7494 	.word	0x000d7494

000d586c <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d586c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   d5870:	4a15      	ldr	r2, [pc, #84]	; (d58c8 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d5872:	f8df 8060 	ldr.w	r8, [pc, #96]	; d58d4 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   d5876:	e9d2 3200 	ldrd	r3, r2, [r2]
   d587a:	18c0      	adds	r0, r0, r3
   d587c:	eb42 0101 	adc.w	r1, r2, r1
    unix_time += dst_current_cache;
   d5880:	4a12      	ldr	r2, [pc, #72]	; (d58cc <_ZL22Refresh_UnixTime_Cachex+0x60>)
   d5882:	e9d2 3200 	ldrd	r3, r2, [r2]
   d5886:	18c6      	adds	r6, r0, r3
   d5888:	eb41 0702 	adc.w	r7, r1, r2
    if(unix_time != unix_time_cache)
   d588c:	e9d8 2300 	ldrd	r2, r3, [r8]
   d5890:	42bb      	cmp	r3, r7
   d5892:	bf08      	it	eq
   d5894:	42b2      	cmpeq	r2, r6
{
   d5896:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   d5898:	d013      	beq.n	d58c2 <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   d589a:	a903      	add	r1, sp, #12
   d589c:	4668      	mov	r0, sp
   d589e:	e9cd 6700 	strd	r6, r7, [sp]
   d58a2:	f7ff fd1f 	bl	d52e4 <localtime_r>
	calendar_time.tm_year += 1900;
   d58a6:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d58a8:	4d09      	ldr	r5, [pc, #36]	; (d58d0 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   d58aa:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d58ae:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   d58b0:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d58b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d58b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d58b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d58b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   d58ba:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d58be:	6823      	ldr	r3, [r4, #0]
   d58c0:	602b      	str	r3, [r5, #0]
    }
}
   d58c2:	b00c      	add	sp, #48	; 0x30
   d58c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d58c8:	2003e5c0 	.word	0x2003e5c0
   d58cc:	2003e5b8 	.word	0x2003e5b8
   d58d0:	2003e590 	.word	0x2003e590
   d58d4:	2003e5c8 	.word	0x2003e5c8

000d58d8 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d58d8:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d58da:	2000      	movs	r0, #0
   d58dc:	f7ff fcba 	bl	d5254 <spark_sync_time_pending>
   d58e0:	b128      	cbz	r0, d58ee <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d58e2:	f7ff fc9f 	bl	d5224 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d58e6:	f080 0001 	eor.w	r0, r0, #1
   d58ea:	b2c0      	uxtb	r0, r0
    }
   d58ec:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d58ee:	2001      	movs	r0, #1
   d58f0:	e7fc      	b.n	d58ec <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000d58f2 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d58f2:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   d58f4:	2000      	movs	r0, #0
   d58f6:	f7ff fae1 	bl	d4ebc <hal_rtc_time_is_valid>
    if (rtcstate)
   d58fa:	4604      	mov	r4, r0
   d58fc:	b9a0      	cbnz	r0, d5928 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d58fe:	f7ff fbe5 	bl	d50cc <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d5902:	2801      	cmp	r0, #1
   d5904:	d110      	bne.n	d5928 <_ZN9TimeClass7isValidEv+0x36>
   d5906:	4620      	mov	r0, r4
   d5908:	f7ff fc08 	bl	d511c <system_thread_get_state>
   d590c:	b960      	cbnz	r0, d5928 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   d590e:	f7ff ffe3 	bl	d58d8 <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d5912:	b910      	cbnz	r0, d591a <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   d5914:	f7ff fc7e 	bl	d5214 <spark_process>
        while (_while() && !_condition()) {
   d5918:	e7f9      	b.n	d590e <_ZN9TimeClass7isValidEv+0x1c>
   d591a:	f7ff ffdd 	bl	d58d8 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   d591e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   d5922:	2000      	movs	r0, #0
   d5924:	f7ff baca 	b.w	d4ebc <hal_rtc_time_is_valid>
}
   d5928:	4620      	mov	r0, r4
   d592a:	bd10      	pop	{r4, pc}

000d592c <_ZN9TimeClass3nowEv>:
{
   d592c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   d592e:	f7ff ffe0 	bl	d58f2 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   d5932:	2210      	movs	r2, #16
   d5934:	2100      	movs	r1, #0
   d5936:	4668      	mov	r0, sp
   d5938:	f001 fc0a 	bl	d7150 <memset>
    hal_rtc_get_time(&tv, nullptr);
   d593c:	2100      	movs	r1, #0
   d593e:	4668      	mov	r0, sp
   d5940:	f7ff fac4 	bl	d4ecc <hal_rtc_get_time>
}
   d5944:	9800      	ldr	r0, [sp, #0]
   d5946:	b005      	add	sp, #20
   d5948:	f85d fb04 	ldr.w	pc, [sp], #4

000d594c <_ZN9TimeClass4hourEv>:
{
   d594c:	b508      	push	{r3, lr}
	return hour(now());
   d594e:	f7ff ffed 	bl	d592c <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   d5952:	17c1      	asrs	r1, r0, #31
   d5954:	f7ff ff8a 	bl	d586c <_ZL22Refresh_UnixTime_Cachex>
}
   d5958:	4b01      	ldr	r3, [pc, #4]	; (d5960 <_ZN9TimeClass4hourEv+0x14>)
   d595a:	6898      	ldr	r0, [r3, #8]
   d595c:	bd08      	pop	{r3, pc}
   d595e:	bf00      	nop
   d5960:	2003e590 	.word	0x2003e590

000d5964 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5964:	4b02      	ldr	r3, [pc, #8]	; (d5970 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d5966:	681a      	ldr	r2, [r3, #0]
   d5968:	4b02      	ldr	r3, [pc, #8]	; (d5974 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d596a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d596c:	4770      	bx	lr
   d596e:	bf00      	nop
   d5970:	20039fc8 	.word	0x20039fc8
   d5974:	2003e58c 	.word	0x2003e58c

000d5978 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d5978:	2100      	movs	r1, #0
   d597a:	f7ff bbb7 	b.w	d50ec <system_delay_ms>

000d597e <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d597e:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d5980:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d5982:	4604      	mov	r4, r0
      if (_M_manager)
   d5984:	b113      	cbz	r3, d598c <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5986:	2203      	movs	r2, #3
   d5988:	4601      	mov	r1, r0
   d598a:	4798      	blx	r3
    }
   d598c:	4620      	mov	r0, r4
   d598e:	bd10      	pop	{r4, pc}

000d5990 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
   d5990:	b513      	push	{r0, r1, r4, lr}
   d5992:	460b      	mov	r3, r1
   d5994:	4602      	mov	r2, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5996:	e9d0 0100 	ldrd	r0, r1, [r0]
   d599a:	466c      	mov	r4, sp
   d599c:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d59a0:	e893 0003 	ldmia.w	r3, {r0, r1}
   d59a4:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d59a8:	e894 0003 	ldmia.w	r4, {r0, r1}
   d59ac:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d59b0:	b002      	add	sp, #8
   d59b2:	bd10      	pop	{r4, pc}

000d59b4 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d59b4:	4b01      	ldr	r3, [pc, #4]	; (d59bc <_GLOBAL__sub_I_RGB+0x8>)
   d59b6:	2200      	movs	r2, #0
   d59b8:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   d59ba:	4770      	bx	lr
   d59bc:	2003e5d0 	.word	0x2003e5d0

000d59c0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d59c0:	4b01      	ldr	r3, [pc, #4]	; (d59c8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d59c2:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d59c4:	4770      	bx	lr
   d59c6:	bf00      	nop
   d59c8:	20039fcc 	.word	0x20039fcc

000d59cc <serialEventRun>:
{
   d59cc:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d59ce:	4b0b      	ldr	r3, [pc, #44]	; (d59fc <serialEventRun+0x30>)
   d59d0:	b143      	cbz	r3, d59e4 <serialEventRun+0x18>
   d59d2:	f000 fbfd 	bl	d61d0 <_Z16_fetch_usbserialv>
   d59d6:	6803      	ldr	r3, [r0, #0]
   d59d8:	691b      	ldr	r3, [r3, #16]
   d59da:	4798      	blx	r3
   d59dc:	2800      	cmp	r0, #0
   d59de:	dd01      	ble.n	d59e4 <serialEventRun+0x18>
        serialEvent();
   d59e0:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d59e4:	4b06      	ldr	r3, [pc, #24]	; (d5a00 <serialEventRun+0x34>)
   d59e6:	b143      	cbz	r3, d59fa <serialEventRun+0x2e>
   d59e8:	f000 fc6c 	bl	d62c4 <_Z22__fetch_global_Serial1v>
   d59ec:	6803      	ldr	r3, [r0, #0]
   d59ee:	691b      	ldr	r3, [r3, #16]
   d59f0:	4798      	blx	r3
   d59f2:	2800      	cmp	r0, #0
   d59f4:	dd01      	ble.n	d59fa <serialEventRun+0x2e>
        serialEvent1();
   d59f6:	f3af 8000 	nop.w
}
   d59fa:	bd08      	pop	{r3, pc}
	...

000d5a04 <_post_loop>:
{
   d5a04:	b508      	push	{r3, lr}
	serialEventRun();
   d5a06:	f7ff ffe1 	bl	d59cc <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5a0a:	f7ff fa4f 	bl	d4eac <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d5a0e:	4b01      	ldr	r3, [pc, #4]	; (d5a14 <_post_loop+0x10>)
   d5a10:	6018      	str	r0, [r3, #0]
}
   d5a12:	bd08      	pop	{r3, pc}
   d5a14:	2003e73c 	.word	0x2003e73c

000d5a18 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d5a18:	4805      	ldr	r0, [pc, #20]	; (d5a30 <_Z33system_initialize_user_backup_ramv+0x18>)
   d5a1a:	4a06      	ldr	r2, [pc, #24]	; (d5a34 <_Z33system_initialize_user_backup_ramv+0x1c>)
   d5a1c:	4906      	ldr	r1, [pc, #24]	; (d5a38 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   d5a1e:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d5a20:	1a12      	subs	r2, r2, r0
   d5a22:	f001 fb87 	bl	d7134 <memcpy>
    __backup_sram_signature = signature;
   d5a26:	4b05      	ldr	r3, [pc, #20]	; (d5a3c <_Z33system_initialize_user_backup_ramv+0x24>)
   d5a28:	4a05      	ldr	r2, [pc, #20]	; (d5a40 <_Z33system_initialize_user_backup_ramv+0x28>)
   d5a2a:	601a      	str	r2, [r3, #0]
}
   d5a2c:	bd08      	pop	{r3, pc}
   d5a2e:	bf00      	nop
   d5a30:	2003f400 	.word	0x2003f400
   d5a34:	2003f404 	.word	0x2003f404
   d5a38:	000d7610 	.word	0x000d7610
   d5a3c:	2003f400 	.word	0x2003f400
   d5a40:	9a271c1e 	.word	0x9a271c1e

000d5a44 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5a44:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5a46:	2300      	movs	r3, #0
   d5a48:	9300      	str	r3, [sp, #0]
   d5a4a:	461a      	mov	r2, r3
   d5a4c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5a50:	f7ff fb76 	bl	d5140 <system_ctrl_set_result>
}
   d5a54:	b003      	add	sp, #12
   d5a56:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5a5c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d5a5c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d5a5e:	8843      	ldrh	r3, [r0, #2]
   d5a60:	2b0a      	cmp	r3, #10
   d5a62:	d008      	beq.n	d5a76 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5a64:	2b50      	cmp	r3, #80	; 0x50
   d5a66:	d10b      	bne.n	d5a80 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d5a68:	4b09      	ldr	r3, [pc, #36]	; (d5a90 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d5a6a:	681b      	ldr	r3, [r3, #0]
   d5a6c:	b14b      	cbz	r3, d5a82 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d5a6e:	b003      	add	sp, #12
   d5a70:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d5a74:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d5a76:	f7ff ffe5 	bl	d5a44 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d5a7a:	b003      	add	sp, #12
   d5a7c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5a80:	2300      	movs	r3, #0
   d5a82:	9300      	str	r3, [sp, #0]
   d5a84:	461a      	mov	r2, r3
   d5a86:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5a8a:	f7ff fb59 	bl	d5140 <system_ctrl_set_result>
}
   d5a8e:	e7f4      	b.n	d5a7a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d5a90:	2003e5e4 	.word	0x2003e5e4

000d5a94 <module_user_init_hook>:
{
   d5a94:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d5a96:	4812      	ldr	r0, [pc, #72]	; (d5ae0 <module_user_init_hook+0x4c>)
   d5a98:	2100      	movs	r1, #0
   d5a9a:	f7ff fc1b 	bl	d52d4 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   d5a9e:	4b11      	ldr	r3, [pc, #68]	; (d5ae4 <module_user_init_hook+0x50>)
   d5aa0:	681a      	ldr	r2, [r3, #0]
   d5aa2:	4b11      	ldr	r3, [pc, #68]	; (d5ae8 <module_user_init_hook+0x54>)
   d5aa4:	429a      	cmp	r2, r3
   d5aa6:	4b11      	ldr	r3, [pc, #68]	; (d5aec <module_user_init_hook+0x58>)
   d5aa8:	bf0c      	ite	eq
   d5aaa:	2201      	moveq	r2, #1
   d5aac:	2200      	movne	r2, #0
   d5aae:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d5ab0:	d001      	beq.n	d5ab6 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   d5ab2:	f7ff ffb1 	bl	d5a18 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d5ab6:	f7ff f9f1 	bl	d4e9c <HAL_RNG_GetRandomNumber>
   d5aba:	4604      	mov	r4, r0
    srand(seed);
   d5abc:	f001 fb50 	bl	d7160 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5ac0:	4b0b      	ldr	r3, [pc, #44]	; (d5af0 <module_user_init_hook+0x5c>)
   d5ac2:	b113      	cbz	r3, d5aca <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   d5ac4:	4620      	mov	r0, r4
   d5ac6:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5aca:	2100      	movs	r1, #0
   d5acc:	4808      	ldr	r0, [pc, #32]	; (d5af0 <module_user_init_hook+0x5c>)
   d5ace:	f7ff fbc9 	bl	d5264 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d5ad2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5ad6:	4807      	ldr	r0, [pc, #28]	; (d5af4 <module_user_init_hook+0x60>)
   d5ad8:	2100      	movs	r1, #0
   d5ada:	f7ff bb27 	b.w	d512c <system_ctrl_set_app_request_handler>
   d5ade:	bf00      	nop
   d5ae0:	000d59c1 	.word	0x000d59c1
   d5ae4:	2003f400 	.word	0x2003f400
   d5ae8:	9a271c1e 	.word	0x9a271c1e
   d5aec:	2003e5e0 	.word	0x2003e5e0
   d5af0:	00000000 	.word	0x00000000
   d5af4:	000d5a5d 	.word	0x000d5a5d

000d5af8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d5af8:	4770      	bx	lr

000d5afa <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d5afa:	2000      	movs	r0, #0
   d5afc:	4770      	bx	lr

000d5afe <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d5afe:	b510      	push	{r4, lr}
   d5b00:	2110      	movs	r1, #16
   d5b02:	4604      	mov	r4, r0
   d5b04:	f000 fe40 	bl	d6788 <_ZdlPvj>
   d5b08:	4620      	mov	r0, r4
   d5b0a:	bd10      	pop	{r4, pc}

000d5b0c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d5b0c:	b508      	push	{r3, lr}
      { delete this; }
   d5b0e:	f7ff fff6 	bl	d5afe <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d5b12:	bd08      	pop	{r3, pc}

000d5b14 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d5b14:	b530      	push	{r4, r5, lr}
        type_(type) {
   d5b16:	2200      	movs	r2, #0
   d5b18:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d5b1c:	6002      	str	r2, [r0, #0]
   d5b1e:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   d5b20:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d5b22:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d5b24:	680c      	ldr	r4, [r1, #0]
   d5b26:	8085      	strh	r5, [r0, #4]
   d5b28:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d5b2a:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d5b2c:	bd30      	pop	{r4, r5, pc}

000d5b2e <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d5b2e:	b510      	push	{r4, lr}
   d5b30:	4604      	mov	r4, r0
    free((void*)msg_);
   d5b32:	6800      	ldr	r0, [r0, #0]
   d5b34:	f7ff fba6 	bl	d5284 <free>
}
   d5b38:	4620      	mov	r0, r4
   d5b3a:	bd10      	pop	{r4, pc}

000d5b3c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d5b3c:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d5b3e:	68c4      	ldr	r4, [r0, #12]
   d5b40:	b1f4      	cbz	r4, d5b80 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d5b42:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d5b44:	2b02      	cmp	r3, #2
   d5b46:	d103      	bne.n	d5b50 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d5b48:	f104 000c 	add.w	r0, r4, #12
   d5b4c:	f7ff ffef 	bl	d5b2e <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d5b50:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d5b52:	b135      	cbz	r5, d5b62 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5b54:	4628      	mov	r0, r5
   d5b56:	f7ff ff12 	bl	d597e <_ZNSt14_Function_baseD1Ev>
   d5b5a:	2110      	movs	r1, #16
   d5b5c:	4628      	mov	r0, r5
   d5b5e:	f000 fe13 	bl	d6788 <_ZdlPvj>
   d5b62:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d5b64:	b135      	cbz	r5, d5b74 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d5b66:	4628      	mov	r0, r5
   d5b68:	f7ff ff09 	bl	d597e <_ZNSt14_Function_baseD1Ev>
   d5b6c:	2110      	movs	r1, #16
   d5b6e:	4628      	mov	r0, r5
   d5b70:	f000 fe0a 	bl	d6788 <_ZdlPvj>
   d5b74:	4620      	mov	r0, r4
   d5b76:	2114      	movs	r1, #20
   d5b78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d5b7c:	f000 be04 	b.w	d6788 <_ZdlPvj>
   d5b80:	bd38      	pop	{r3, r4, r5, pc}

000d5b82 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d5b82:	b573      	push	{r0, r1, r4, r5, r6, lr}
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5b84:	460e      	mov	r6, r1
   d5b86:	4604      	mov	r4, r0
   d5b88:	f856 3b04 	ldr.w	r3, [r6], #4
   d5b8c:	9300      	str	r3, [sp, #0]
   d5b8e:	460d      	mov	r5, r1
   d5b90:	a801      	add	r0, sp, #4
   d5b92:	4631      	mov	r1, r6
   d5b94:	f7ff fd08 	bl	d55a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5b98:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d5b9a:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d5b9c:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d5b9e:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d5ba0:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d5ba2:	2300      	movs	r3, #0
   d5ba4:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d5ba6:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d5ba8:	f7ff fd05 	bl	d55b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5bac:	4630      	mov	r0, r6
   d5bae:	f7ff fd02 	bl	d55b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d5bb2:	4628      	mov	r0, r5
   d5bb4:	2108      	movs	r1, #8
   d5bb6:	f000 fde7 	bl	d6788 <_ZdlPvj>
        return p;
    }
   d5bba:	4620      	mov	r0, r4
   d5bbc:	b002      	add	sp, #8
   d5bbe:	bd70      	pop	{r4, r5, r6, pc}

000d5bc0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5bc0:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d5bc2:	b510      	push	{r4, lr}
      if (_M_empty())
   d5bc4:	b90a      	cbnz	r2, d5bca <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d5bc6:	f000 fde3 	bl	d6790 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    }
   d5bca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5bce:	68c3      	ldr	r3, [r0, #12]
   d5bd0:	4718      	bx	r3

000d5bd2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5bd2:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d5bd4:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d5bd6:	f100 0110 	add.w	r1, r0, #16
   d5bda:	f7ff fff1 	bl	d5bc0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d5bde:	bd08      	pop	{r3, pc}

000d5be0 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d5be0:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d5be2:	b510      	push	{r4, lr}
      if (_M_empty())
   d5be4:	b90a      	cbnz	r2, d5bea <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d5be6:	f000 fdd3 	bl	d6790 <_ZSt25__throw_bad_function_callv>
    }
   d5bea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5bee:	68c3      	ldr	r3, [r0, #12]
   d5bf0:	4718      	bx	r3

000d5bf2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5bf2:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d5bf4:	6800      	ldr	r0, [r0, #0]
   d5bf6:	f100 0110 	add.w	r1, r0, #16
   d5bfa:	f7ff fff1 	bl	d5be0 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d5bfe:	bd08      	pop	{r3, pc}

000d5c00 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d5c00:	b538      	push	{r3, r4, r5, lr}
   d5c02:	2300      	movs	r3, #0
   d5c04:	4604      	mov	r4, r0
   d5c06:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5c08:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d5c0a:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5c0c:	f7fe fa41 	bl	d4092 <_Znwj>
   d5c10:	b128      	cbz	r0, d5c1e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d5c12:	2301      	movs	r3, #1
   d5c14:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d5c18:	4b02      	ldr	r3, [pc, #8]	; (d5c24 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d5c1a:	6003      	str	r3, [r0, #0]
   d5c1c:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5c1e:	6020      	str	r0, [r4, #0]
	}
   d5c20:	4620      	mov	r0, r4
   d5c22:	bd38      	pop	{r3, r4, r5, pc}
   d5c24:	000d74bc 	.word	0x000d74bc

000d5c28 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d5c28:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d5c2a:	2300      	movs	r3, #0
   d5c2c:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d5c2e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d5c30:	4604      	mov	r4, r0
   d5c32:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d5c34:	b12b      	cbz	r3, d5c42 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5c36:	2202      	movs	r2, #2
   d5c38:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5c3a:	68eb      	ldr	r3, [r5, #12]
   d5c3c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d5c3e:	68ab      	ldr	r3, [r5, #8]
   d5c40:	60a3      	str	r3, [r4, #8]
    }
   d5c42:	4620      	mov	r0, r4
   d5c44:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5c48 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d5c48:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5c4a:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d5c4c:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d5c4e:	4668      	mov	r0, sp
   d5c50:	f7ff ff60 	bl	d5b14 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d5c54:	f04f 0302 	mov.w	r3, #2
   d5c58:	e8d4 2f4f 	ldrexb	r2, [r4]
   d5c5c:	2a00      	cmp	r2, #0
   d5c5e:	d103      	bne.n	d5c68 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d5c60:	e8c4 3f41 	strexb	r1, r3, [r4]
   d5c64:	2900      	cmp	r1, #0
   d5c66:	d1f7      	bne.n	d5c58 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d5c68:	d125      	bne.n	d5cb6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d5c6a:	f104 050c 	add.w	r5, r4, #12
   d5c6e:	4669      	mov	r1, sp
   d5c70:	4628      	mov	r0, r5
   d5c72:	f7ff ff4f 	bl	d5b14 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d5c76:	f3bf 8f5b 	dmb	ish
   d5c7a:	2301      	movs	r3, #1
   d5c7c:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d5c7e:	2000      	movs	r0, #0
   d5c80:	f104 0308 	add.w	r3, r4, #8
   d5c84:	f3bf 8f5b 	dmb	ish
   d5c88:	e853 6f00 	ldrex	r6, [r3]
   d5c8c:	e843 0200 	strex	r2, r0, [r3]
   d5c90:	2a00      	cmp	r2, #0
   d5c92:	d1f9      	bne.n	d5c88 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d5c94:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d5c98:	b16e      	cbz	r6, d5cb6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d5c9a:	f7ff fa2f 	bl	d50fc <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d5c9e:	b178      	cbz	r0, d5cc0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d5ca0:	4629      	mov	r1, r5
   d5ca2:	4630      	mov	r0, r6
   d5ca4:	f7ff ff8c 	bl	d5bc0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d5ca8:	4630      	mov	r0, r6
   d5caa:	f7ff fe68 	bl	d597e <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d5cae:	2110      	movs	r1, #16
   d5cb0:	4630      	mov	r0, r6
   d5cb2:	f000 fd69 	bl	d6788 <_ZdlPvj>
        p_->setError(std::move(error));
   d5cb6:	4668      	mov	r0, sp
   d5cb8:	f7ff ff39 	bl	d5b2e <_ZN8particle5ErrorD1Ev>
    }
   d5cbc:	b009      	add	sp, #36	; 0x24
   d5cbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5cc0:	4631      	mov	r1, r6
   d5cc2:	a802      	add	r0, sp, #8
   d5cc4:	f7ff ffb0 	bl	d5c28 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d5cc8:	68e0      	ldr	r0, [r4, #12]
   d5cca:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d5cce:	b108      	cbz	r0, d5cd4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d5cd0:	f001 fa6a 	bl	d71a8 <strdup>
        type_(type) {
   d5cd4:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5cd6:	2010      	movs	r0, #16
   d5cd8:	f8ad 501c 	strh.w	r5, [sp, #28]
   d5cdc:	f7fe f9d9 	bl	d4092 <_Znwj>
   d5ce0:	4605      	mov	r5, r0
   d5ce2:	b1e8      	cbz	r0, d5d20 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d5ce4:	2700      	movs	r7, #0
   d5ce6:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5ce8:	2018      	movs	r0, #24
   d5cea:	f7fe f9d2 	bl	d4092 <_Znwj>
   d5cee:	4604      	mov	r4, r0
   d5cf0:	b188      	cbz	r0, d5d16 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d5cf2:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d5cf4:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d5cf6:	a802      	add	r0, sp, #8
   d5cf8:	f7ff fe4a 	bl	d5990 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5cfc:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5cfe:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5d00:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5d02:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d5d04:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5d06:	a906      	add	r1, sp, #24
   d5d08:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5d0a:	60e3      	str	r3, [r4, #12]
   d5d0c:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d5d10:	9205      	str	r2, [sp, #20]
   d5d12:	f7ff feff 	bl	d5b14 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d5d16:	4b08      	ldr	r3, [pc, #32]	; (d5d38 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d5d18:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5d1a:	4b08      	ldr	r3, [pc, #32]	; (d5d3c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5d1c:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d5d1e:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d5d20:	a806      	add	r0, sp, #24
   d5d22:	f7ff ff04 	bl	d5b2e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d5d26:	a802      	add	r0, sp, #8
   d5d28:	f7ff fe29 	bl	d597e <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5d2c:	2200      	movs	r2, #0
   d5d2e:	4629      	mov	r1, r5
   d5d30:	4803      	ldr	r0, [pc, #12]	; (d5d40 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d5d32:	f7ff f9eb 	bl	d510c <application_thread_invoke>
   d5d36:	e7b7      	b.n	d5ca8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d5d38:	000d5bd3 	.word	0x000d5bd3
   d5d3c:	000d5e69 	.word	0x000d5e69
   d5d40:	000d6311 	.word	0x000d6311

000d5d44 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d5d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5d48:	b08a      	sub	sp, #40	; 0x28
   d5d4a:	4605      	mov	r5, r0
   d5d4c:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d5d50:	460c      	mov	r4, r1
   d5d52:	4617      	mov	r7, r2
   d5d54:	4698      	mov	r8, r3
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5d56:	f7ff fa65 	bl	d5224 <spark_cloud_flag_connected>
   d5d5a:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d5d5c:	4682      	mov	sl, r0
   d5d5e:	bb38      	cbnz	r0, d5db0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d5d60:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d5d64:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d5d66:	a905      	add	r1, sp, #20
   d5d68:	4630      	mov	r0, r6
   d5d6a:	f8ad 3018 	strh.w	r3, [sp, #24]
   d5d6e:	f7ff fed1 	bl	d5b14 <_ZN8particle5ErrorC1EOS0_>
   d5d72:	2014      	movs	r0, #20
   d5d74:	f7fe f98d 	bl	d4092 <_Znwj>
   d5d78:	4604      	mov	r4, r0
   d5d7a:	b148      	cbz	r0, d5d90 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d5d7c:	2302      	movs	r3, #2
   d5d7e:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5d80:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d5d82:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5d86:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d5d88:	4631      	mov	r1, r6
   d5d8a:	300c      	adds	r0, #12
   d5d8c:	f7ff fec2 	bl	d5b14 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d5d90:	4628      	mov	r0, r5
	: __shared_count(__p)
   d5d92:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d5d94:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d5d98:	f7ff ff32 	bl	d5c00 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d5d9c:	4630      	mov	r0, r6
   d5d9e:	f7ff fec6 	bl	d5b2e <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d5da2:	a805      	add	r0, sp, #20
   d5da4:	f7ff fec3 	bl	d5b2e <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   d5da8:	4628      	mov	r0, r5
   d5daa:	b00a      	add	sp, #40	; 0x28
   d5dac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d5db0:	230c      	movs	r3, #12
   d5db2:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d5db6:	2014      	movs	r0, #20
   d5db8:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d5dbc:	9307      	str	r3, [sp, #28]
   d5dbe:	f7fe f968 	bl	d4092 <_Znwj>
   d5dc2:	4601      	mov	r1, r0
   d5dc4:	b128      	cbz	r0, d5dd2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d5dc6:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d5dca:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5dce:	f880 a001 	strb.w	sl, [r0, #1]
   d5dd2:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d5dd4:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d5dd6:	f7ff ff13 	bl	d5c00 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d5dda:	4b22      	ldr	r3, [pc, #136]	; (d5e64 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d5ddc:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d5dde:	2008      	movs	r0, #8
   d5de0:	f7fe f957 	bl	d4092 <_Znwj>
   d5de4:	4682      	mov	sl, r0
   d5de6:	b128      	cbz	r0, d5df4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5de8:	9b03      	ldr	r3, [sp, #12]
   d5dea:	f840 3b04 	str.w	r3, [r0], #4
   d5dee:	a904      	add	r1, sp, #16
   d5df0:	f7ff fbda 	bl	d55a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d5df4:	9600      	str	r6, [sp, #0]
   d5df6:	fa5f f389 	uxtb.w	r3, r9
   d5dfa:	4642      	mov	r2, r8
   d5dfc:	4639      	mov	r1, r7
   d5dfe:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d5e00:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d5e04:	f7ff fa16 	bl	d5234 <spark_send_event>
   d5e08:	b9b8      	cbnz	r0, d5e3a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d5e0a:	9b03      	ldr	r3, [sp, #12]
   d5e0c:	785b      	ldrb	r3, [r3, #1]
   d5e0e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d5e12:	b993      	cbnz	r3, d5e3a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d5e14:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d5e18:	a905      	add	r1, sp, #20
   d5e1a:	a803      	add	r0, sp, #12
   d5e1c:	9205      	str	r2, [sp, #20]
   d5e1e:	f8ad 3018 	strh.w	r3, [sp, #24]
   d5e22:	f7ff ff11 	bl	d5c48 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d5e26:	a805      	add	r0, sp, #20
   d5e28:	f7ff fe81 	bl	d5b2e <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d5e2c:	a805      	add	r0, sp, #20
   d5e2e:	9909      	ldr	r1, [sp, #36]	; 0x24
   d5e30:	f7ff fea7 	bl	d5b82 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d5e34:	a806      	add	r0, sp, #24
   d5e36:	f7ff fbbe 	bl	d55b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5e3a:	9b03      	ldr	r3, [sp, #12]
   d5e3c:	9305      	str	r3, [sp, #20]
   d5e3e:	a904      	add	r1, sp, #16
   d5e40:	a806      	add	r0, sp, #24
   d5e42:	f7ff fbb1 	bl	d55a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d5e46:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5e48:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d5e4a:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d5e4c:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d5e4e:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d5e50:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d5e52:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d5e54:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d5e56:	f7ff fbae 	bl	d55b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5e5a:	a804      	add	r0, sp, #16
   d5e5c:	f7ff fbab 	bl	d55b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d5e60:	e7a2      	b.n	d5da8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d5e62:	bf00      	nop
   d5e64:	000d5f2d 	.word	0x000d5f2d

000d5e68 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d5e68:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d5e6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5e6c:	4605      	mov	r5, r0
	  switch (__op)
   d5e6e:	d007      	beq.n	d5e80 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d5e70:	2a03      	cmp	r2, #3
   d5e72:	d018      	beq.n	d5ea6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d5e74:	2a01      	cmp	r2, #1
   d5e76:	d101      	bne.n	d5e7c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d5e78:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5e7a:	6003      	str	r3, [r0, #0]
	}
   d5e7c:	2000      	movs	r0, #0
   d5e7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d5e80:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d5e82:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d5e84:	f7fe f905 	bl	d4092 <_Znwj>
   d5e88:	4604      	mov	r4, r0
   d5e8a:	b150      	cbz	r0, d5ea2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d5e8c:	4631      	mov	r1, r6
   d5e8e:	f7ff fecb 	bl	d5c28 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d5e92:	6930      	ldr	r0, [r6, #16]
   d5e94:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d5e98:	b108      	cbz	r0, d5e9e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d5e9a:	f001 f985 	bl	d71a8 <strdup>
        type_(type) {
   d5e9e:	6120      	str	r0, [r4, #16]
   d5ea0:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d5ea2:	602c      	str	r4, [r5, #0]
	}
   d5ea4:	e7ea      	b.n	d5e7c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d5ea6:	6804      	ldr	r4, [r0, #0]
   d5ea8:	2c00      	cmp	r4, #0
   d5eaa:	d0e7      	beq.n	d5e7c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d5eac:	f104 0010 	add.w	r0, r4, #16
   d5eb0:	f7ff fe3d 	bl	d5b2e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d5eb4:	4620      	mov	r0, r4
   d5eb6:	f7ff fd62 	bl	d597e <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d5eba:	2118      	movs	r1, #24
   d5ebc:	4620      	mov	r0, r4
   d5ebe:	f000 fc63 	bl	d6788 <_ZdlPvj>
   d5ec2:	e7db      	b.n	d5e7c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d5ec4 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d5ec4:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d5ec6:	2300      	movs	r3, #0
   d5ec8:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d5eca:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d5ecc:	4604      	mov	r4, r0
   d5ece:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d5ed0:	b12b      	cbz	r3, d5ede <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5ed2:	2202      	movs	r2, #2
   d5ed4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5ed6:	68eb      	ldr	r3, [r5, #12]
   d5ed8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d5eda:	68ab      	ldr	r3, [r5, #8]
   d5edc:	60a3      	str	r3, [r4, #8]
    }
   d5ede:	4620      	mov	r0, r4
   d5ee0:	bd38      	pop	{r3, r4, r5, pc}

000d5ee2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d5ee2:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d5ee4:	b570      	push	{r4, r5, r6, lr}
   d5ee6:	4604      	mov	r4, r0
	  switch (__op)
   d5ee8:	d007      	beq.n	d5efa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d5eea:	2a03      	cmp	r2, #3
   d5eec:	d012      	beq.n	d5f14 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d5eee:	2a01      	cmp	r2, #1
   d5ef0:	d101      	bne.n	d5ef6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d5ef2:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5ef4:	6003      	str	r3, [r0, #0]
	}
   d5ef6:	2000      	movs	r0, #0
   d5ef8:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d5efa:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d5efc:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d5efe:	f7fe f8c8 	bl	d4092 <_Znwj>
   d5f02:	4605      	mov	r5, r0
   d5f04:	b120      	cbz	r0, d5f10 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d5f06:	4631      	mov	r1, r6
   d5f08:	f7ff ffdc 	bl	d5ec4 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d5f0c:	7c33      	ldrb	r3, [r6, #16]
   d5f0e:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d5f10:	6025      	str	r5, [r4, #0]
	}
   d5f12:	e7f0      	b.n	d5ef6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d5f14:	6804      	ldr	r4, [r0, #0]
   d5f16:	2c00      	cmp	r4, #0
   d5f18:	d0ed      	beq.n	d5ef6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d5f1a:	4620      	mov	r0, r4
   d5f1c:	f7ff fd2f 	bl	d597e <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d5f20:	2114      	movs	r1, #20
   d5f22:	4620      	mov	r0, r4
   d5f24:	f000 fc30 	bl	d6788 <_ZdlPvj>
   d5f28:	e7e5      	b.n	d5ef6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d5f2c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d5f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5f2e:	b089      	sub	sp, #36	; 0x24
   d5f30:	4604      	mov	r4, r0
   d5f32:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d5f34:	a801      	add	r0, sp, #4
   d5f36:	4611      	mov	r1, r2
   d5f38:	f7ff fe23 	bl	d5b82 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d5f3c:	b1a4      	cbz	r4, d5f68 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d5f3e:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d5f40:	b11d      	cbz	r5, d5f4a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d5f42:	4628      	mov	r0, r5
   d5f44:	f001 f930 	bl	d71a8 <strdup>
   d5f48:	4605      	mov	r5, r0
   d5f4a:	a801      	add	r0, sp, #4
   d5f4c:	a903      	add	r1, sp, #12
        type_(type) {
   d5f4e:	9503      	str	r5, [sp, #12]
   d5f50:	f8ad 4010 	strh.w	r4, [sp, #16]
   d5f54:	f7ff fe78 	bl	d5c48 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d5f58:	a803      	add	r0, sp, #12
   d5f5a:	f7ff fde8 	bl	d5b2e <_ZN8particle5ErrorD1Ev>
   d5f5e:	a802      	add	r0, sp, #8
   d5f60:	f7ff fb29 	bl	d55b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d5f64:	b009      	add	sp, #36	; 0x24
   d5f66:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d5f68:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d5f6a:	2301      	movs	r3, #1
   d5f6c:	e8d5 2f4f 	ldrexb	r2, [r5]
   d5f70:	2a00      	cmp	r2, #0
   d5f72:	d103      	bne.n	d5f7c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d5f74:	e8c5 3f41 	strexb	r1, r3, [r5]
   d5f78:	2900      	cmp	r1, #0
   d5f7a:	d1f7      	bne.n	d5f6c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d5f7c:	d1ef      	bne.n	d5f5e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d5f7e:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d5f80:	f3bf 8f5b 	dmb	ish
   d5f84:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d5f86:	1d2b      	adds	r3, r5, #4
   d5f88:	f3bf 8f5b 	dmb	ish
   d5f8c:	e853 6f00 	ldrex	r6, [r3]
   d5f90:	e843 4200 	strex	r2, r4, [r3]
   d5f94:	2a00      	cmp	r2, #0
   d5f96:	d1f9      	bne.n	d5f8c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d5f98:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d5f9c:	2e00      	cmp	r6, #0
   d5f9e:	d0de      	beq.n	d5f5e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d5fa0:	4620      	mov	r0, r4
   d5fa2:	f7ff f8ab 	bl	d50fc <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d5fa6:	4607      	mov	r7, r0
   d5fa8:	b160      	cbz	r0, d5fc4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d5faa:	f105 010c 	add.w	r1, r5, #12
   d5fae:	4630      	mov	r0, r6
   d5fb0:	f7ff fe16 	bl	d5be0 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d5fb4:	4630      	mov	r0, r6
   d5fb6:	f7ff fce2 	bl	d597e <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d5fba:	2110      	movs	r1, #16
   d5fbc:	4630      	mov	r0, r6
   d5fbe:	f000 fbe3 	bl	d6788 <_ZdlPvj>
   d5fc2:	e7cc      	b.n	d5f5e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5fc4:	4631      	mov	r1, r6
   d5fc6:	a803      	add	r0, sp, #12
   d5fc8:	f7ff ff7c 	bl	d5ec4 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5fcc:	7b2b      	ldrb	r3, [r5, #12]
   d5fce:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5fd2:	2010      	movs	r0, #16
   d5fd4:	f7fe f85d 	bl	d4092 <_Znwj>
   d5fd8:	4605      	mov	r5, r0
   d5fda:	b1d0      	cbz	r0, d6012 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d5fdc:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5fde:	2014      	movs	r0, #20
   d5fe0:	f7fe f857 	bl	d4092 <_Znwj>
   d5fe4:	4604      	mov	r4, r0
   d5fe6:	b178      	cbz	r0, d6008 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d5fe8:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d5fea:	4601      	mov	r1, r0
   d5fec:	a803      	add	r0, sp, #12
   d5fee:	f7ff fccf 	bl	d5990 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5ff2:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d5ff4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5ff6:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5ff8:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d5ffa:	9205      	str	r2, [sp, #20]
   d5ffc:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5ffe:	60e3      	str	r3, [r4, #12]
   d6000:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d6004:	9206      	str	r2, [sp, #24]
   d6006:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d6008:	4b06      	ldr	r3, [pc, #24]	; (d6024 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d600a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d600c:	4b06      	ldr	r3, [pc, #24]	; (d6028 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d600e:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d6010:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d6012:	a803      	add	r0, sp, #12
   d6014:	f7ff fcb3 	bl	d597e <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d6018:	2200      	movs	r2, #0
   d601a:	4629      	mov	r1, r5
   d601c:	4803      	ldr	r0, [pc, #12]	; (d602c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d601e:	f7ff f875 	bl	d510c <application_thread_invoke>
   d6022:	e7c7      	b.n	d5fb4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d6024:	000d5bf3 	.word	0x000d5bf3
   d6028:	000d5ee3 	.word	0x000d5ee3
   d602c:	000d6311 	.word	0x000d6311

000d6030 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d6030:	4770      	bx	lr

000d6032 <_ZN9IPAddressD0Ev>:
   d6032:	b510      	push	{r4, lr}
   d6034:	2118      	movs	r1, #24
   d6036:	4604      	mov	r4, r0
   d6038:	f000 fba6 	bl	d6788 <_ZdlPvj>
   d603c:	4620      	mov	r0, r4
   d603e:	bd10      	pop	{r4, pc}

000d6040 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6040:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6042:	7d03      	ldrb	r3, [r0, #20]
   d6044:	2b06      	cmp	r3, #6
{
   d6046:	b08d      	sub	sp, #52	; 0x34
   d6048:	460e      	mov	r6, r1
   d604a:	f100 0704 	add.w	r7, r0, #4
   d604e:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d6052:	d012      	beq.n	d607a <_ZNK9IPAddress7printToER5Print+0x3a>
   d6054:	f100 0508 	add.w	r5, r0, #8
        return printNumber(val, base) + t;
   d6058:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d605c:	220a      	movs	r2, #10
   d605e:	4630      	mov	r0, r6
   d6060:	f7ff fb09 	bl	d5676 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6064:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6066:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d6068:	d019      	beq.n	d609e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d606a:	2c00      	cmp	r4, #0
   d606c:	d0f4      	beq.n	d6058 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d606e:	212e      	movs	r1, #46	; 0x2e
   d6070:	4630      	mov	r0, r6
   d6072:	f7ff fae1 	bl	d5638 <_ZN5Print5printEc>
   d6076:	4404      	add	r4, r0
   d6078:	e7ee      	b.n	d6058 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d607a:	232f      	movs	r3, #47	; 0x2f
   d607c:	466a      	mov	r2, sp
   d607e:	4639      	mov	r1, r7
   d6080:	200a      	movs	r0, #10
		buf[0] = 0;
   d6082:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6086:	f7fe ff31 	bl	d4eec <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d608a:	4668      	mov	r0, sp
   d608c:	f001 f8a9 	bl	d71e2 <strlen>
   d6090:	6833      	ldr	r3, [r6, #0]
   d6092:	4602      	mov	r2, r0
   d6094:	68db      	ldr	r3, [r3, #12]
   d6096:	4669      	mov	r1, sp
   d6098:	4630      	mov	r0, r6
   d609a:	4798      	blx	r3
   d609c:	4604      	mov	r4, r0
    }
    return n;
}
   d609e:	4620      	mov	r0, r4
   d60a0:	b00d      	add	sp, #52	; 0x34
   d60a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d60a4 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d60a4:	b510      	push	{r4, lr}
   d60a6:	4b05      	ldr	r3, [pc, #20]	; (d60bc <_ZN9IPAddressC1Ev+0x18>)
   d60a8:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d60aa:	2211      	movs	r2, #17
   d60ac:	f840 3b04 	str.w	r3, [r0], #4
   d60b0:	2100      	movs	r1, #0
   d60b2:	f001 f84d 	bl	d7150 <memset>
}
   d60b6:	4620      	mov	r0, r4
   d60b8:	bd10      	pop	{r4, pc}
   d60ba:	bf00      	nop
   d60bc:	000d74d8 	.word	0x000d74d8

000d60c0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d60c0:	4603      	mov	r3, r0
   d60c2:	4a07      	ldr	r2, [pc, #28]	; (d60e0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d60c4:	b510      	push	{r4, lr}
   d60c6:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d60ca:	f101 0210 	add.w	r2, r1, #16
   d60ce:	f851 4b04 	ldr.w	r4, [r1], #4
   d60d2:	f843 4b04 	str.w	r4, [r3], #4
   d60d6:	4291      	cmp	r1, r2
   d60d8:	d1f9      	bne.n	d60ce <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d60da:	780a      	ldrb	r2, [r1, #0]
   d60dc:	701a      	strb	r2, [r3, #0]
}
   d60de:	bd10      	pop	{r4, pc}
   d60e0:	000d74d8 	.word	0x000d74d8

000d60e4 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d60e4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d60e6:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d60ea:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d60ee:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d60f2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d60f6:	2304      	movs	r3, #4
   d60f8:	6041      	str	r1, [r0, #4]
   d60fa:	7503      	strb	r3, [r0, #20]
}
   d60fc:	bd10      	pop	{r4, pc}

000d60fe <_ZN9IPAddressaSEPKh>:
{
   d60fe:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d6100:	78cb      	ldrb	r3, [r1, #3]
   d6102:	9300      	str	r3, [sp, #0]
   d6104:	788b      	ldrb	r3, [r1, #2]
   d6106:	784a      	ldrb	r2, [r1, #1]
   d6108:	7809      	ldrb	r1, [r1, #0]
   d610a:	f7ff ffeb 	bl	d60e4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d610e:	b002      	add	sp, #8
   d6110:	bd10      	pop	{r4, pc}

000d6112 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6112:	7441      	strb	r1, [r0, #17]
}
   d6114:	4770      	bx	lr

000d6116 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6116:	4770      	bx	lr

000d6118 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d6118:	4770      	bx	lr

000d611a <_ZN9USBSerial4readEv>:
{
   d611a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d611c:	2100      	movs	r1, #0
   d611e:	7c00      	ldrb	r0, [r0, #16]
   d6120:	f7fe ffbc 	bl	d509c <HAL_USB_USART_Receive_Data>
}
   d6124:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6128:	bd08      	pop	{r3, pc}

000d612a <_ZN9USBSerial4peekEv>:
{
   d612a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d612c:	2101      	movs	r1, #1
   d612e:	7c00      	ldrb	r0, [r0, #16]
   d6130:	f7fe ffb4 	bl	d509c <HAL_USB_USART_Receive_Data>
}
   d6134:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6138:	bd08      	pop	{r3, pc}

000d613a <_ZN9USBSerial17availableForWriteEv>:
{
   d613a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d613c:	7c00      	ldrb	r0, [r0, #16]
   d613e:	f7fe ffa5 	bl	d508c <HAL_USB_USART_Available_Data_For_Write>
}
   d6142:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6146:	bd08      	pop	{r3, pc}

000d6148 <_ZN9USBSerial9availableEv>:
{
   d6148:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d614a:	7c00      	ldrb	r0, [r0, #16]
   d614c:	f7fe ff96 	bl	d507c <HAL_USB_USART_Available_Data>
}
   d6150:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6154:	bd08      	pop	{r3, pc}

000d6156 <_ZN9USBSerial5writeEh>:
{
   d6156:	b513      	push	{r0, r1, r4, lr}
   d6158:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d615a:	7c00      	ldrb	r0, [r0, #16]
{
   d615c:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d615e:	f7fe ff95 	bl	d508c <HAL_USB_USART_Available_Data_For_Write>
   d6162:	2800      	cmp	r0, #0
   d6164:	9901      	ldr	r1, [sp, #4]
   d6166:	dc01      	bgt.n	d616c <_ZN9USBSerial5writeEh+0x16>
   d6168:	7c60      	ldrb	r0, [r4, #17]
   d616a:	b120      	cbz	r0, d6176 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d616c:	7c20      	ldrb	r0, [r4, #16]
   d616e:	f7fe ff9d 	bl	d50ac <HAL_USB_USART_Send_Data>
   d6172:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d6176:	b002      	add	sp, #8
   d6178:	bd10      	pop	{r4, pc}

000d617a <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d617a:	7c00      	ldrb	r0, [r0, #16]
   d617c:	f7fe bf9e 	b.w	d50bc <HAL_USB_USART_Flush_Data>

000d6180 <_ZN9USBSerialD0Ev>:
   d6180:	b510      	push	{r4, lr}
   d6182:	2114      	movs	r1, #20
   d6184:	4604      	mov	r4, r0
   d6186:	f000 faff 	bl	d6788 <_ZdlPvj>
   d618a:	4620      	mov	r0, r4
   d618c:	bd10      	pop	{r4, pc}
	...

000d6190 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6190:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d6192:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6196:	4604      	mov	r4, r0
   d6198:	4608      	mov	r0, r1
   d619a:	2100      	movs	r1, #0
   d619c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d61a0:	4b04      	ldr	r3, [pc, #16]	; (d61b4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d61a2:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d61a4:	2301      	movs	r3, #1
  _serial = serial;
   d61a6:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d61a8:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d61aa:	4611      	mov	r1, r2
   d61ac:	f7fe ff56 	bl	d505c <HAL_USB_USART_Init>
}
   d61b0:	4620      	mov	r0, r4
   d61b2:	bd10      	pop	{r4, pc}
   d61b4:	000d74ec 	.word	0x000d74ec

000d61b8 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d61b8:	7c00      	ldrb	r0, [r0, #16]
   d61ba:	2200      	movs	r2, #0
   d61bc:	f7fe bf56 	b.w	d506c <HAL_USB_USART_Begin>

000d61c0 <_Z19acquireSerialBufferv>:
{
   d61c0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d61c2:	2214      	movs	r2, #20
{
   d61c4:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d61c6:	2100      	movs	r1, #0
   d61c8:	f000 ffc2 	bl	d7150 <memset>
}
   d61cc:	4620      	mov	r0, r4
   d61ce:	bd10      	pop	{r4, pc}

000d61d0 <_Z16_fetch_usbserialv>:
{
   d61d0:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d61d2:	4c0f      	ldr	r4, [pc, #60]	; (d6210 <_Z16_fetch_usbserialv+0x40>)
{
   d61d4:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d61d6:	a803      	add	r0, sp, #12
   d61d8:	f7ff fff2 	bl	d61c0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d61dc:	7821      	ldrb	r1, [r4, #0]
   d61de:	f3bf 8f5b 	dmb	ish
   d61e2:	f011 0101 	ands.w	r1, r1, #1
   d61e6:	d10f      	bne.n	d6208 <_Z16_fetch_usbserialv+0x38>
   d61e8:	4620      	mov	r0, r4
   d61ea:	9101      	str	r1, [sp, #4]
   d61ec:	f7fd ff57 	bl	d409e <__cxa_guard_acquire>
   d61f0:	9901      	ldr	r1, [sp, #4]
   d61f2:	b148      	cbz	r0, d6208 <_Z16_fetch_usbserialv+0x38>
   d61f4:	aa03      	add	r2, sp, #12
   d61f6:	4807      	ldr	r0, [pc, #28]	; (d6214 <_Z16_fetch_usbserialv+0x44>)
   d61f8:	f7ff ffca 	bl	d6190 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d61fc:	4620      	mov	r0, r4
   d61fe:	f7fd ff53 	bl	d40a8 <__cxa_guard_release>
   d6202:	4805      	ldr	r0, [pc, #20]	; (d6218 <_Z16_fetch_usbserialv+0x48>)
   d6204:	f000 ff7c 	bl	d7100 <atexit>
	return _usbserial;
}
   d6208:	4802      	ldr	r0, [pc, #8]	; (d6214 <_Z16_fetch_usbserialv+0x44>)
   d620a:	b008      	add	sp, #32
   d620c:	bd10      	pop	{r4, pc}
   d620e:	bf00      	nop
   d6210:	2003e5e8 	.word	0x2003e5e8
   d6214:	2003e5ec 	.word	0x2003e5ec
   d6218:	000d6117 	.word	0x000d6117

000d621c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d621c:	4770      	bx	lr

000d621e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d621e:	7441      	strb	r1, [r0, #17]
}
   d6220:	4770      	bx	lr

000d6222 <__tcf_0>:
#endif

USARTSerial& __fetch_global_Serial1()
{
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d6222:	4770      	bx	lr

000d6224 <_ZN11USARTSerial17availableForWriteEv>:
{
   d6224:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d6226:	7c00      	ldrb	r0, [r0, #16]
   d6228:	f7fe fea0 	bl	d4f6c <hal_usart_available_data_for_write>
}
   d622c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6230:	bd08      	pop	{r3, pc}

000d6232 <_ZN11USARTSerial9availableEv>:
{
   d6232:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d6234:	7c00      	ldrb	r0, [r0, #16]
   d6236:	f7fe fe71 	bl	d4f1c <hal_usart_available>
}
   d623a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d623e:	bd08      	pop	{r3, pc}

000d6240 <_ZN11USARTSerial4peekEv>:
{
   d6240:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d6242:	7c00      	ldrb	r0, [r0, #16]
   d6244:	f7fe fe7a 	bl	d4f3c <hal_usart_peek>
}
   d6248:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d624c:	bd08      	pop	{r3, pc}

000d624e <_ZN11USARTSerial4readEv>:
{
   d624e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d6250:	7c00      	ldrb	r0, [r0, #16]
   d6252:	f7fe fe6b 	bl	d4f2c <hal_usart_read>
}
   d6256:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d625a:	bd08      	pop	{r3, pc}

000d625c <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
   d625c:	7c00      	ldrb	r0, [r0, #16]
   d625e:	f7fe be75 	b.w	d4f4c <hal_usart_flush>

000d6262 <_ZN11USARTSerial5writeEh>:
{
   d6262:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d6264:	7c45      	ldrb	r5, [r0, #17]
{
   d6266:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d6268:	b12d      	cbz	r5, d6276 <_ZN11USARTSerial5writeEh+0x14>
	  return hal_usart_write(_serial, c);
   d626a:	7c20      	ldrb	r0, [r4, #16]
}
   d626c:	b003      	add	sp, #12
   d626e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d6272:	f7fe be4b 	b.w	d4f0c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d6276:	7c00      	ldrb	r0, [r0, #16]
   d6278:	9101      	str	r1, [sp, #4]
   d627a:	f7fe fe77 	bl	d4f6c <hal_usart_available_data_for_write>
   d627e:	2800      	cmp	r0, #0
   d6280:	9901      	ldr	r1, [sp, #4]
   d6282:	dcf2      	bgt.n	d626a <_ZN11USARTSerial5writeEh+0x8>
}
   d6284:	4628      	mov	r0, r5
   d6286:	b003      	add	sp, #12
   d6288:	bd30      	pop	{r4, r5, pc}

000d628a <_ZN11USARTSerialD0Ev>:
   d628a:	b510      	push	{r4, lr}
   d628c:	2114      	movs	r1, #20
   d628e:	4604      	mov	r4, r0
   d6290:	f000 fa7a 	bl	d6788 <_ZdlPvj>
   d6294:	4620      	mov	r0, r4
   d6296:	bd10      	pop	{r4, pc}

000d6298 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d6298:	b510      	push	{r4, lr}
   d629a:	f04f 0c00 	mov.w	ip, #0
   d629e:	4604      	mov	r4, r0
   d62a0:	4608      	mov	r0, r1
   d62a2:	4611      	mov	r1, r2
   d62a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d62a8:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d62ac:	4a04      	ldr	r2, [pc, #16]	; (d62c0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d62ae:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d62b0:	2201      	movs	r2, #1
  _serial = serial;
   d62b2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d62b4:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d62b6:	461a      	mov	r2, r3
   d62b8:	f7fe fe20 	bl	d4efc <hal_usart_init>
}
   d62bc:	4620      	mov	r0, r4
   d62be:	bd10      	pop	{r4, pc}
   d62c0:	000d751c 	.word	0x000d751c

000d62c4 <_Z22__fetch_global_Serial1v>:
{
   d62c4:	b513      	push	{r0, r1, r4, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d62c6:	4c0d      	ldr	r4, [pc, #52]	; (d62fc <_Z22__fetch_global_Serial1v+0x38>)
   d62c8:	7821      	ldrb	r1, [r4, #0]
   d62ca:	f3bf 8f5b 	dmb	ish
   d62ce:	f011 0101 	ands.w	r1, r1, #1
   d62d2:	d110      	bne.n	d62f6 <_Z22__fetch_global_Serial1v+0x32>
   d62d4:	4620      	mov	r0, r4
   d62d6:	9101      	str	r1, [sp, #4]
   d62d8:	f7fd fee1 	bl	d409e <__cxa_guard_acquire>
   d62dc:	9901      	ldr	r1, [sp, #4]
   d62de:	b150      	cbz	r0, d62f6 <_Z22__fetch_global_Serial1v+0x32>
   d62e0:	4b07      	ldr	r3, [pc, #28]	; (d6300 <_Z22__fetch_global_Serial1v+0x3c>)
   d62e2:	4a08      	ldr	r2, [pc, #32]	; (d6304 <_Z22__fetch_global_Serial1v+0x40>)
   d62e4:	4808      	ldr	r0, [pc, #32]	; (d6308 <_Z22__fetch_global_Serial1v+0x44>)
   d62e6:	f7ff ffd7 	bl	d6298 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d62ea:	4620      	mov	r0, r4
   d62ec:	f7fd fedc 	bl	d40a8 <__cxa_guard_release>
   d62f0:	4806      	ldr	r0, [pc, #24]	; (d630c <_Z22__fetch_global_Serial1v+0x48>)
   d62f2:	f000 ff05 	bl	d7100 <atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d62f6:	4804      	ldr	r0, [pc, #16]	; (d6308 <_Z22__fetch_global_Serial1v+0x44>)
   d62f8:	b002      	add	sp, #8
   d62fa:	bd10      	pop	{r4, pc}
   d62fc:	2003e600 	.word	0x2003e600
   d6300:	2003e688 	.word	0x2003e688
   d6304:	2003e604 	.word	0x2003e604
   d6308:	2003e70c 	.word	0x2003e70c
   d630c:	000d6223 	.word	0x000d6223

000d6310 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d6310:	b510      	push	{r4, lr}
      if (_M_empty())
   d6312:	6883      	ldr	r3, [r0, #8]
   d6314:	4604      	mov	r4, r0
   d6316:	b90b      	cbnz	r3, d631c <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d6318:	f000 fa3a 	bl	d6790 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d631c:	68c3      	ldr	r3, [r0, #12]
   d631e:	4798      	blx	r3
      if (_M_manager)
   d6320:	68a3      	ldr	r3, [r4, #8]
   d6322:	b11b      	cbz	r3, d632c <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6324:	2203      	movs	r2, #3
   d6326:	4621      	mov	r1, r4
   d6328:	4620      	mov	r0, r4
   d632a:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d632c:	4620      	mov	r0, r4
   d632e:	2110      	movs	r1, #16
}
   d6330:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d6334:	f000 ba28 	b.w	d6788 <_ZdlPvj>

000d6338 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d6338:	4770      	bx	lr

000d633a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d633a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d633c:	4606      	mov	r6, r0
   d633e:	4615      	mov	r5, r2
   d6340:	460c      	mov	r4, r1
   d6342:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6344:	42bc      	cmp	r4, r7
   d6346:	d006      	beq.n	d6356 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d6348:	6833      	ldr	r3, [r6, #0]
   d634a:	f814 1b01 	ldrb.w	r1, [r4], #1
   d634e:	689b      	ldr	r3, [r3, #8]
   d6350:	4630      	mov	r0, r6
   d6352:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d6354:	e7f6      	b.n	d6344 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d6356:	4628      	mov	r0, r5
   d6358:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d635a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d635a:	7c00      	ldrb	r0, [r0, #16]
   d635c:	2200      	movs	r2, #0
   d635e:	f7fe be2d 	b.w	d4fbc <hal_i2c_write>

000d6362 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d6362:	7c00      	ldrb	r0, [r0, #16]
   d6364:	2100      	movs	r1, #0
   d6366:	f7fe be31 	b.w	d4fcc <hal_i2c_available>

000d636a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d636a:	7c00      	ldrb	r0, [r0, #16]
   d636c:	2100      	movs	r1, #0
   d636e:	f7fe be35 	b.w	d4fdc <hal_i2c_read>

000d6372 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d6372:	7c00      	ldrb	r0, [r0, #16]
   d6374:	2100      	movs	r1, #0
   d6376:	f7fe be39 	b.w	d4fec <hal_i2c_peek>

000d637a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d637a:	7c00      	ldrb	r0, [r0, #16]
   d637c:	2100      	movs	r1, #0
   d637e:	f7fe be3d 	b.w	d4ffc <hal_i2c_flush>

000d6382 <_ZN7TwoWireD0Ev>:
   d6382:	b510      	push	{r4, lr}
   d6384:	2114      	movs	r1, #20
   d6386:	4604      	mov	r4, r0
   d6388:	f000 f9fe 	bl	d6788 <_ZdlPvj>
   d638c:	4620      	mov	r0, r4
   d638e:	bd10      	pop	{r4, pc}

000d6390 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d6390:	b510      	push	{r4, lr}
   d6392:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6396:	4604      	mov	r4, r0
   d6398:	4608      	mov	r0, r1
   d639a:	2100      	movs	r1, #0
   d639c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d63a0:	4b03      	ldr	r3, [pc, #12]	; (d63b0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d63a2:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d63a4:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d63a6:	4611      	mov	r1, r2
   d63a8:	f7fe fe38 	bl	d501c <hal_i2c_init>
}
   d63ac:	4620      	mov	r0, r4
   d63ae:	bd10      	pop	{r4, pc}
   d63b0:	000d754c 	.word	0x000d754c

000d63b4 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   d63b4:	7c00      	ldrb	r0, [r0, #16]
   d63b6:	2200      	movs	r2, #0
   d63b8:	f7fe bde0 	b.w	d4f7c <hal_i2c_set_speed>

000d63bc <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d63bc:	2300      	movs	r3, #0
   d63be:	7c00      	ldrb	r0, [r0, #16]
   d63c0:	461a      	mov	r2, r3
   d63c2:	4619      	mov	r1, r3
   d63c4:	f7fe bde2 	b.w	d4f8c <hal_i2c_begin>

000d63c8 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d63c8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d63ca:	2200      	movs	r2, #0
   d63cc:	2314      	movs	r3, #20
   d63ce:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d63d2:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d63d6:	780b      	ldrb	r3, [r1, #0]
   d63d8:	f88d 3008 	strb.w	r3, [sp, #8]
   d63dc:	684b      	ldr	r3, [r1, #4]
   d63de:	9303      	str	r3, [sp, #12]
   d63e0:	68cb      	ldr	r3, [r1, #12]
   d63e2:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d63e4:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d63e6:	7a0b      	ldrb	r3, [r1, #8]
   d63e8:	9305      	str	r3, [sp, #20]
   d63ea:	a901      	add	r1, sp, #4
   d63ec:	f7fe fe1e 	bl	d502c <hal_i2c_request_ex>
}
   d63f0:	b007      	add	sp, #28
   d63f2:	f85d fb04 	ldr.w	pc, [sp], #4

000d63f6 <_ZN7TwoWire11requestFromEhjh>:
{
   d63f6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d63f8:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d63fa:	f88d 1000 	strb.w	r1, [sp]
   d63fe:	f04f 0164 	mov.w	r1, #100	; 0x64
   d6402:	9103      	str	r1, [sp, #12]
   d6404:	bf18      	it	ne
   d6406:	2301      	movne	r3, #1
   d6408:	4669      	mov	r1, sp
    size_ = size;
   d640a:	9201      	str	r2, [sp, #4]
   d640c:	f88d 3008 	strb.w	r3, [sp, #8]
   d6410:	f7ff ffda 	bl	d63c8 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d6414:	b005      	add	sp, #20
   d6416:	f85d fb04 	ldr.w	pc, [sp], #4

000d641a <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   d641a:	2301      	movs	r3, #1
   d641c:	f7ff bfeb 	b.w	d63f6 <_ZN7TwoWire11requestFromEhjh>

000d6420 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d6420:	7c00      	ldrb	r0, [r0, #16]
   d6422:	2200      	movs	r2, #0
   d6424:	f7fe bdba 	b.w	d4f9c <hal_i2c_begin_transmission>

000d6428 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d6428:	b2c9      	uxtb	r1, r1
   d642a:	f7ff bff9 	b.w	d6420 <_ZN7TwoWire17beginTransmissionEh>

000d642e <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d642e:	7c00      	ldrb	r0, [r0, #16]
   d6430:	2200      	movs	r2, #0
   d6432:	f7fe bdbb 	b.w	d4fac <hal_i2c_end_transmission>

000d6436 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d6436:	2101      	movs	r1, #1
   d6438:	f7ff bff9 	b.w	d642e <_ZN7TwoWire15endTransmissionEh>

000d643c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d643c:	2200      	movs	r2, #0
   d643e:	6840      	ldr	r0, [r0, #4]
   d6440:	4611      	mov	r1, r2
   d6442:	f7fe be9f 	b.w	d5184 <network_ready>

000d6446 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6446:	2200      	movs	r2, #0
   d6448:	6840      	ldr	r0, [r0, #4]
   d644a:	4611      	mov	r1, r2
   d644c:	f7fe beba 	b.w	d51c4 <network_listening>

000d6450 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d6450:	2200      	movs	r2, #0
   d6452:	6840      	ldr	r0, [r0, #4]
   d6454:	4611      	mov	r1, r2
   d6456:	f7fe bec5 	b.w	d51e4 <network_get_listen_timeout>

000d645a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d645a:	6840      	ldr	r0, [r0, #4]
   d645c:	2200      	movs	r2, #0
   d645e:	f7fe beb9 	b.w	d51d4 <network_set_listen_timeout>

000d6462 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d6462:	6840      	ldr	r0, [r0, #4]
   d6464:	2200      	movs	r2, #0
   d6466:	f081 0101 	eor.w	r1, r1, #1
   d646a:	f7fe bea3 	b.w	d51b4 <network_listen>

000d646e <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d646e:	2300      	movs	r3, #0
   d6470:	6840      	ldr	r0, [r0, #4]
   d6472:	461a      	mov	r2, r3
   d6474:	4619      	mov	r1, r3
   d6476:	f7fe be95 	b.w	d51a4 <network_off>

000d647a <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d647a:	2300      	movs	r3, #0
   d647c:	6840      	ldr	r0, [r0, #4]
   d647e:	461a      	mov	r2, r3
   d6480:	4619      	mov	r1, r3
   d6482:	f7fe be87 	b.w	d5194 <network_on>

000d6486 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d6486:	2200      	movs	r2, #0
   d6488:	6840      	ldr	r0, [r0, #4]
   d648a:	4611      	mov	r1, r2
   d648c:	f7fe be6a 	b.w	d5164 <network_connecting>

000d6490 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6490:	6840      	ldr	r0, [r0, #4]
   d6492:	2200      	movs	r2, #0
   d6494:	2102      	movs	r1, #2
   d6496:	f7fe be6d 	b.w	d5174 <network_disconnect>

000d649a <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d649a:	2300      	movs	r3, #0
   d649c:	6840      	ldr	r0, [r0, #4]
   d649e:	461a      	mov	r2, r3
   d64a0:	f7fe be58 	b.w	d5154 <network_connect>

000d64a4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d64a4:	4b02      	ldr	r3, [pc, #8]	; (d64b0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d64a6:	2204      	movs	r2, #4
   d64a8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d64aa:	4a02      	ldr	r2, [pc, #8]	; (d64b4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d64ac:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d64ae:	4770      	bx	lr
   d64b0:	2003e720 	.word	0x2003e720
   d64b4:	000d7574 	.word	0x000d7574

000d64b8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d64b8:	2300      	movs	r3, #0
   d64ba:	6840      	ldr	r0, [r0, #4]
   d64bc:	461a      	mov	r2, r3
   d64be:	f7fe be49 	b.w	d5154 <network_connect>

000d64c2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d64c2:	6840      	ldr	r0, [r0, #4]
   d64c4:	2200      	movs	r2, #0
   d64c6:	2102      	movs	r1, #2
   d64c8:	f7fe be54 	b.w	d5174 <network_disconnect>

000d64cc <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d64cc:	2200      	movs	r2, #0
   d64ce:	6840      	ldr	r0, [r0, #4]
   d64d0:	4611      	mov	r1, r2
   d64d2:	f7fe be47 	b.w	d5164 <network_connecting>

000d64d6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d64d6:	2200      	movs	r2, #0
   d64d8:	6840      	ldr	r0, [r0, #4]
   d64da:	4611      	mov	r1, r2
   d64dc:	f7fe be52 	b.w	d5184 <network_ready>

000d64e0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d64e0:	2300      	movs	r3, #0
   d64e2:	6840      	ldr	r0, [r0, #4]
   d64e4:	461a      	mov	r2, r3
   d64e6:	4619      	mov	r1, r3
   d64e8:	f7fe be54 	b.w	d5194 <network_on>

000d64ec <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d64ec:	2300      	movs	r3, #0
   d64ee:	6840      	ldr	r0, [r0, #4]
   d64f0:	461a      	mov	r2, r3
   d64f2:	4619      	mov	r1, r3
   d64f4:	f7fe be56 	b.w	d51a4 <network_off>

000d64f8 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d64f8:	6840      	ldr	r0, [r0, #4]
   d64fa:	2100      	movs	r1, #0
   d64fc:	f7fe be7a 	b.w	d51f4 <network_is_on>

000d6500 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d6500:	6840      	ldr	r0, [r0, #4]
   d6502:	2100      	movs	r1, #0
   d6504:	f7fe be7e 	b.w	d5204 <network_is_off>

000d6508 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d6508:	6840      	ldr	r0, [r0, #4]
   d650a:	2200      	movs	r2, #0
   d650c:	f081 0101 	eor.w	r1, r1, #1
   d6510:	f7fe be50 	b.w	d51b4 <network_listen>

000d6514 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d6514:	6840      	ldr	r0, [r0, #4]
   d6516:	2200      	movs	r2, #0
   d6518:	f7fe be5c 	b.w	d51d4 <network_set_listen_timeout>

000d651c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d651c:	2200      	movs	r2, #0
   d651e:	6840      	ldr	r0, [r0, #4]
   d6520:	4611      	mov	r1, r2
   d6522:	f7fe be5f 	b.w	d51e4 <network_get_listen_timeout>

000d6526 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d6526:	2200      	movs	r2, #0
   d6528:	6840      	ldr	r0, [r0, #4]
   d652a:	4611      	mov	r1, r2
   d652c:	f7fe be4a 	b.w	d51c4 <network_listening>

000d6530 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d6530:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6534:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d6536:	b095      	sub	sp, #84	; 0x54
   d6538:	4616      	mov	r6, r2
   d653a:	460d      	mov	r5, r1
   d653c:	4607      	mov	r7, r0
    IPAddress addr;
   d653e:	f7ff fdb1 	bl	d60a4 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d6542:	4621      	mov	r1, r4
   d6544:	2218      	movs	r2, #24
   d6546:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d6548:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d654a:	f000 fe01 	bl	d7150 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d654e:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d6550:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d6554:	4621      	mov	r1, r4
   d6556:	466b      	mov	r3, sp
   d6558:	aa0c      	add	r2, sp, #48	; 0x30
   d655a:	4630      	mov	r0, r6
   d655c:	f7fe fc76 	bl	d4e4c <netdb_getaddrinfo>
    if (!r) {
   d6560:	4604      	mov	r4, r0
   d6562:	2800      	cmp	r0, #0
   d6564:	d146      	bne.n	d65f4 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6566:	4602      	mov	r2, r0
   d6568:	2101      	movs	r1, #1
   d656a:	6868      	ldr	r0, [r5, #4]
   d656c:	f7fe fe0a 	bl	d5184 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6570:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6572:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6574:	4622      	mov	r2, r4
   d6576:	6868      	ldr	r0, [r5, #4]
   d6578:	f7fe fe04 	bl	d5184 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d657c:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d657e:	4681      	mov	r9, r0
        bool ok = false;
   d6580:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6582:	2e00      	cmp	r6, #0
   d6584:	d036      	beq.n	d65f4 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d6586:	2900      	cmp	r1, #0
   d6588:	d134      	bne.n	d65f4 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d658a:	6873      	ldr	r3, [r6, #4]
   d658c:	2b02      	cmp	r3, #2
   d658e:	d003      	beq.n	d6598 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d6590:	2b0a      	cmp	r3, #10
   d6592:	d00b      	beq.n	d65ac <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6594:	69f6      	ldr	r6, [r6, #28]
   d6596:	e7f4      	b.n	d6582 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d6598:	f1b8 0f00 	cmp.w	r8, #0
   d659c:	d004      	beq.n	d65a8 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d659e:	6971      	ldr	r1, [r6, #20]
   d65a0:	4638      	mov	r0, r7
   d65a2:	3104      	adds	r1, #4
   d65a4:	f7ff fdab 	bl	d60fe <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d65a8:	4641      	mov	r1, r8
   d65aa:	e7f3      	b.n	d6594 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d65ac:	f1b9 0f00 	cmp.w	r9, #0
   d65b0:	d101      	bne.n	d65b6 <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d65b2:	4649      	mov	r1, r9
   d65b4:	e7ee      	b.n	d6594 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d65b6:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d65b8:	2210      	movs	r2, #16
   d65ba:	a801      	add	r0, sp, #4
   d65bc:	f000 fdc8 	bl	d7150 <memset>
                    a.v = 6;
   d65c0:	2306      	movs	r3, #6
   d65c2:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d65c6:	ad01      	add	r5, sp, #4
   d65c8:	f104 0308 	add.w	r3, r4, #8
   d65cc:	3418      	adds	r4, #24
   d65ce:	6818      	ldr	r0, [r3, #0]
   d65d0:	6859      	ldr	r1, [r3, #4]
   d65d2:	462a      	mov	r2, r5
   d65d4:	c203      	stmia	r2!, {r0, r1}
   d65d6:	3308      	adds	r3, #8
   d65d8:	42a3      	cmp	r3, r4
   d65da:	4615      	mov	r5, r2
   d65dc:	d1f7      	bne.n	d65ce <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d65de:	a901      	add	r1, sp, #4
   d65e0:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d65e2:	ad07      	add	r5, sp, #28
   d65e4:	f7ff fd6c 	bl	d60c0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d65e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d65ea:	1d3c      	adds	r4, r7, #4
   d65ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d65ee:	682b      	ldr	r3, [r5, #0]
   d65f0:	7023      	strb	r3, [r4, #0]
   d65f2:	e7de      	b.n	d65b2 <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d65f4:	9800      	ldr	r0, [sp, #0]
   d65f6:	f7fe fc21 	bl	d4e3c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d65fa:	4638      	mov	r0, r7
   d65fc:	b015      	add	sp, #84	; 0x54
   d65fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d6604 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d6604:	4b02      	ldr	r3, [pc, #8]	; (d6610 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d6606:	4a03      	ldr	r2, [pc, #12]	; (d6614 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d6608:	601a      	str	r2, [r3, #0]
   d660a:	2200      	movs	r2, #0
   d660c:	605a      	str	r2, [r3, #4]

} // spark
   d660e:	4770      	bx	lr
   d6610:	2003e728 	.word	0x2003e728
   d6614:	000d75b0 	.word	0x000d75b0

000d6618 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d6618:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d661a:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d661c:	d902      	bls.n	d6624 <pinAvailable+0xc>
    return false;
   d661e:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d6620:	b002      	add	sp, #8
   d6622:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d6624:	f1a0 030b 	sub.w	r3, r0, #11
   d6628:	2b02      	cmp	r3, #2
   d662a:	d81a      	bhi.n	d6662 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d662c:	4c17      	ldr	r4, [pc, #92]	; (d668c <pinAvailable+0x74>)
   d662e:	7821      	ldrb	r1, [r4, #0]
   d6630:	f3bf 8f5b 	dmb	ish
   d6634:	f011 0101 	ands.w	r1, r1, #1
   d6638:	d10b      	bne.n	d6652 <pinAvailable+0x3a>
   d663a:	4620      	mov	r0, r4
   d663c:	9101      	str	r1, [sp, #4]
   d663e:	f7fd fd2e 	bl	d409e <__cxa_guard_acquire>
   d6642:	9901      	ldr	r1, [sp, #4]
   d6644:	b128      	cbz	r0, d6652 <pinAvailable+0x3a>
   d6646:	4812      	ldr	r0, [pc, #72]	; (d6690 <pinAvailable+0x78>)
   d6648:	f7fe fe92 	bl	d5370 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d664c:	4620      	mov	r0, r4
   d664e:	f7fd fd2b 	bl	d40a8 <__cxa_guard_release>
   d6652:	4b0f      	ldr	r3, [pc, #60]	; (d6690 <pinAvailable+0x78>)
   d6654:	7818      	ldrb	r0, [r3, #0]
   d6656:	f7fe fcf9 	bl	d504c <hal_spi_is_enabled>
   d665a:	2800      	cmp	r0, #0
   d665c:	d1df      	bne.n	d661e <pinAvailable+0x6>
  return true; // 'pin' is available
   d665e:	2001      	movs	r0, #1
   d6660:	e7de      	b.n	d6620 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d6662:	2801      	cmp	r0, #1
   d6664:	d809      	bhi.n	d667a <pinAvailable+0x62>
   d6666:	f000 f86b 	bl	d6740 <_Z19__fetch_global_Wirev>
   d666a:	2100      	movs	r1, #0
   d666c:	7c00      	ldrb	r0, [r0, #16]
   d666e:	f7fe fccd 	bl	d500c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d6672:	f080 0001 	eor.w	r0, r0, #1
   d6676:	b2c0      	uxtb	r0, r0
   d6678:	e7d2      	b.n	d6620 <pinAvailable+0x8>
   d667a:	3809      	subs	r0, #9
   d667c:	2801      	cmp	r0, #1
   d667e:	d8ee      	bhi.n	d665e <pinAvailable+0x46>
   d6680:	f7ff fe20 	bl	d62c4 <_Z22__fetch_global_Serial1v>
   d6684:	7c00      	ldrb	r0, [r0, #16]
   d6686:	f7fe fc69 	bl	d4f5c <hal_usart_is_enabled>
   d668a:	e7f2      	b.n	d6672 <pinAvailable+0x5a>
   d668c:	2003e730 	.word	0x2003e730
   d6690:	2003e734 	.word	0x2003e734

000d6694 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6694:	2823      	cmp	r0, #35	; 0x23
{
   d6696:	b538      	push	{r3, r4, r5, lr}
   d6698:	4604      	mov	r4, r0
   d669a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d669c:	d80a      	bhi.n	d66b4 <pinMode+0x20>
   d669e:	29ff      	cmp	r1, #255	; 0xff
   d66a0:	d008      	beq.n	d66b4 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d66a2:	f7ff ffb9 	bl	d6618 <pinAvailable>
   d66a6:	b128      	cbz	r0, d66b4 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d66a8:	4629      	mov	r1, r5
   d66aa:	4620      	mov	r0, r4
}
   d66ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d66b0:	f7fe bbd4 	b.w	d4e5c <HAL_Pin_Mode>
}
   d66b4:	bd38      	pop	{r3, r4, r5, pc}

000d66b6 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d66b6:	b538      	push	{r3, r4, r5, lr}
   d66b8:	4604      	mov	r4, r0
   d66ba:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d66bc:	f7fe fbd6 	bl	d4e6c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d66c0:	28ff      	cmp	r0, #255	; 0xff
   d66c2:	d010      	beq.n	d66e6 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d66c4:	2806      	cmp	r0, #6
   d66c6:	d804      	bhi.n	d66d2 <digitalWrite+0x1c>
   d66c8:	234d      	movs	r3, #77	; 0x4d
   d66ca:	fa23 f000 	lsr.w	r0, r3, r0
   d66ce:	07c3      	lsls	r3, r0, #31
   d66d0:	d409      	bmi.n	d66e6 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d66d2:	4620      	mov	r0, r4
   d66d4:	f7ff ffa0 	bl	d6618 <pinAvailable>
   d66d8:	b128      	cbz	r0, d66e6 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d66da:	4629      	mov	r1, r5
   d66dc:	4620      	mov	r0, r4
}
   d66de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d66e2:	f7fe bbcb 	b.w	d4e7c <HAL_GPIO_Write>
}
   d66e6:	bd38      	pop	{r3, r4, r5, pc}

000d66e8 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d66e8:	b510      	push	{r4, lr}
   d66ea:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d66ec:	f7fe fbbe 	bl	d4e6c <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   d66f0:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   d66f2:	b2db      	uxtb	r3, r3
   d66f4:	2b01      	cmp	r3, #1
   d66f6:	d908      	bls.n	d670a <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d66f8:	4620      	mov	r0, r4
   d66fa:	f7ff ff8d 	bl	d6618 <pinAvailable>
   d66fe:	b120      	cbz	r0, d670a <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d6700:	4620      	mov	r0, r4
}
   d6702:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   d6706:	f7fe bbc1 	b.w	d4e8c <HAL_GPIO_Read>
}
   d670a:	2000      	movs	r0, #0
   d670c:	bd10      	pop	{r4, pc}

000d670e <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d670e:	4770      	bx	lr

000d6710 <_Z17acquireWireBufferv>:
{
   d6710:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d6712:	2300      	movs	r3, #0
   d6714:	2520      	movs	r5, #32
   d6716:	8043      	strh	r3, [r0, #2]
   d6718:	2314      	movs	r3, #20
{
   d671a:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d671c:	8003      	strh	r3, [r0, #0]
   d671e:	6085      	str	r5, [r0, #8]
   d6720:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d6722:	4906      	ldr	r1, [pc, #24]	; (d673c <_Z17acquireWireBufferv+0x2c>)
   d6724:	4628      	mov	r0, r5
   d6726:	f000 f831 	bl	d678c <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d672a:	4904      	ldr	r1, [pc, #16]	; (d673c <_Z17acquireWireBufferv+0x2c>)
	};
   d672c:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d672e:	4628      	mov	r0, r5
   d6730:	f000 f82c 	bl	d678c <_ZnajRKSt9nothrow_t>
	};
   d6734:	60e0      	str	r0, [r4, #12]
}
   d6736:	4620      	mov	r0, r4
   d6738:	bd38      	pop	{r3, r4, r5, pc}
   d673a:	bf00      	nop
   d673c:	000d75e4 	.word	0x000d75e4

000d6740 <_Z19__fetch_global_Wirev>:
{
   d6740:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d6742:	4d0e      	ldr	r5, [pc, #56]	; (d677c <_Z19__fetch_global_Wirev+0x3c>)
   d6744:	7829      	ldrb	r1, [r5, #0]
   d6746:	f3bf 8f5b 	dmb	ish
   d674a:	f011 0401 	ands.w	r4, r1, #1
{
   d674e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d6750:	d111      	bne.n	d6776 <_Z19__fetch_global_Wirev+0x36>
   d6752:	4628      	mov	r0, r5
   d6754:	f7fd fca3 	bl	d409e <__cxa_guard_acquire>
   d6758:	b168      	cbz	r0, d6776 <_Z19__fetch_global_Wirev+0x36>
   d675a:	a801      	add	r0, sp, #4
   d675c:	f7ff ffd8 	bl	d6710 <_Z17acquireWireBufferv>
   d6760:	aa01      	add	r2, sp, #4
   d6762:	4621      	mov	r1, r4
   d6764:	4806      	ldr	r0, [pc, #24]	; (d6780 <_Z19__fetch_global_Wirev+0x40>)
   d6766:	f7ff fe13 	bl	d6390 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d676a:	4628      	mov	r0, r5
   d676c:	f7fd fc9c 	bl	d40a8 <__cxa_guard_release>
   d6770:	4804      	ldr	r0, [pc, #16]	; (d6784 <_Z19__fetch_global_Wirev+0x44>)
   d6772:	f000 fcc5 	bl	d7100 <atexit>
	return wire;
}
   d6776:	4802      	ldr	r0, [pc, #8]	; (d6780 <_Z19__fetch_global_Wirev+0x40>)
   d6778:	b007      	add	sp, #28
   d677a:	bd30      	pop	{r4, r5, pc}
   d677c:	2003e740 	.word	0x2003e740
   d6780:	2003e744 	.word	0x2003e744
   d6784:	000d670f 	.word	0x000d670f

000d6788 <_ZdlPvj>:
   d6788:	f7fd bc87 	b.w	d409a <_ZdlPv>

000d678c <_ZnajRKSt9nothrow_t>:
   d678c:	f7fd bc83 	b.w	d4096 <_Znaj>

000d6790 <_ZSt25__throw_bad_function_callv>:
   d6790:	b508      	push	{r3, lr}
   d6792:	f7fe fd8f 	bl	d52b4 <abort>
	...

000d6798 <__aeabi_drsub>:
   d6798:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d679c:	e002      	b.n	d67a4 <__adddf3>
   d679e:	bf00      	nop

000d67a0 <__aeabi_dsub>:
   d67a0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d67a4 <__adddf3>:
   d67a4:	b530      	push	{r4, r5, lr}
   d67a6:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d67aa:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d67ae:	ea94 0f05 	teq	r4, r5
   d67b2:	bf08      	it	eq
   d67b4:	ea90 0f02 	teqeq	r0, r2
   d67b8:	bf1f      	itttt	ne
   d67ba:	ea54 0c00 	orrsne.w	ip, r4, r0
   d67be:	ea55 0c02 	orrsne.w	ip, r5, r2
   d67c2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d67c6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d67ca:	f000 80e2 	beq.w	d6992 <__adddf3+0x1ee>
   d67ce:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d67d2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d67d6:	bfb8      	it	lt
   d67d8:	426d      	neglt	r5, r5
   d67da:	dd0c      	ble.n	d67f6 <__adddf3+0x52>
   d67dc:	442c      	add	r4, r5
   d67de:	ea80 0202 	eor.w	r2, r0, r2
   d67e2:	ea81 0303 	eor.w	r3, r1, r3
   d67e6:	ea82 0000 	eor.w	r0, r2, r0
   d67ea:	ea83 0101 	eor.w	r1, r3, r1
   d67ee:	ea80 0202 	eor.w	r2, r0, r2
   d67f2:	ea81 0303 	eor.w	r3, r1, r3
   d67f6:	2d36      	cmp	r5, #54	; 0x36
   d67f8:	bf88      	it	hi
   d67fa:	bd30      	pophi	{r4, r5, pc}
   d67fc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d6800:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6804:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d6808:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d680c:	d002      	beq.n	d6814 <__adddf3+0x70>
   d680e:	4240      	negs	r0, r0
   d6810:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6814:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d6818:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d681c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d6820:	d002      	beq.n	d6828 <__adddf3+0x84>
   d6822:	4252      	negs	r2, r2
   d6824:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d6828:	ea94 0f05 	teq	r4, r5
   d682c:	f000 80a7 	beq.w	d697e <__adddf3+0x1da>
   d6830:	f1a4 0401 	sub.w	r4, r4, #1
   d6834:	f1d5 0e20 	rsbs	lr, r5, #32
   d6838:	db0d      	blt.n	d6856 <__adddf3+0xb2>
   d683a:	fa02 fc0e 	lsl.w	ip, r2, lr
   d683e:	fa22 f205 	lsr.w	r2, r2, r5
   d6842:	1880      	adds	r0, r0, r2
   d6844:	f141 0100 	adc.w	r1, r1, #0
   d6848:	fa03 f20e 	lsl.w	r2, r3, lr
   d684c:	1880      	adds	r0, r0, r2
   d684e:	fa43 f305 	asr.w	r3, r3, r5
   d6852:	4159      	adcs	r1, r3
   d6854:	e00e      	b.n	d6874 <__adddf3+0xd0>
   d6856:	f1a5 0520 	sub.w	r5, r5, #32
   d685a:	f10e 0e20 	add.w	lr, lr, #32
   d685e:	2a01      	cmp	r2, #1
   d6860:	fa03 fc0e 	lsl.w	ip, r3, lr
   d6864:	bf28      	it	cs
   d6866:	f04c 0c02 	orrcs.w	ip, ip, #2
   d686a:	fa43 f305 	asr.w	r3, r3, r5
   d686e:	18c0      	adds	r0, r0, r3
   d6870:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d6874:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6878:	d507      	bpl.n	d688a <__adddf3+0xe6>
   d687a:	f04f 0e00 	mov.w	lr, #0
   d687e:	f1dc 0c00 	rsbs	ip, ip, #0
   d6882:	eb7e 0000 	sbcs.w	r0, lr, r0
   d6886:	eb6e 0101 	sbc.w	r1, lr, r1
   d688a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d688e:	d31b      	bcc.n	d68c8 <__adddf3+0x124>
   d6890:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d6894:	d30c      	bcc.n	d68b0 <__adddf3+0x10c>
   d6896:	0849      	lsrs	r1, r1, #1
   d6898:	ea5f 0030 	movs.w	r0, r0, rrx
   d689c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d68a0:	f104 0401 	add.w	r4, r4, #1
   d68a4:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d68a8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d68ac:	f080 809a 	bcs.w	d69e4 <__adddf3+0x240>
   d68b0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d68b4:	bf08      	it	eq
   d68b6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d68ba:	f150 0000 	adcs.w	r0, r0, #0
   d68be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d68c2:	ea41 0105 	orr.w	r1, r1, r5
   d68c6:	bd30      	pop	{r4, r5, pc}
   d68c8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d68cc:	4140      	adcs	r0, r0
   d68ce:	eb41 0101 	adc.w	r1, r1, r1
   d68d2:	3c01      	subs	r4, #1
   d68d4:	bf28      	it	cs
   d68d6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d68da:	d2e9      	bcs.n	d68b0 <__adddf3+0x10c>
   d68dc:	f091 0f00 	teq	r1, #0
   d68e0:	bf04      	itt	eq
   d68e2:	4601      	moveq	r1, r0
   d68e4:	2000      	moveq	r0, #0
   d68e6:	fab1 f381 	clz	r3, r1
   d68ea:	bf08      	it	eq
   d68ec:	3320      	addeq	r3, #32
   d68ee:	f1a3 030b 	sub.w	r3, r3, #11
   d68f2:	f1b3 0220 	subs.w	r2, r3, #32
   d68f6:	da0c      	bge.n	d6912 <__adddf3+0x16e>
   d68f8:	320c      	adds	r2, #12
   d68fa:	dd08      	ble.n	d690e <__adddf3+0x16a>
   d68fc:	f102 0c14 	add.w	ip, r2, #20
   d6900:	f1c2 020c 	rsb	r2, r2, #12
   d6904:	fa01 f00c 	lsl.w	r0, r1, ip
   d6908:	fa21 f102 	lsr.w	r1, r1, r2
   d690c:	e00c      	b.n	d6928 <__adddf3+0x184>
   d690e:	f102 0214 	add.w	r2, r2, #20
   d6912:	bfd8      	it	le
   d6914:	f1c2 0c20 	rsble	ip, r2, #32
   d6918:	fa01 f102 	lsl.w	r1, r1, r2
   d691c:	fa20 fc0c 	lsr.w	ip, r0, ip
   d6920:	bfdc      	itt	le
   d6922:	ea41 010c 	orrle.w	r1, r1, ip
   d6926:	4090      	lslle	r0, r2
   d6928:	1ae4      	subs	r4, r4, r3
   d692a:	bfa2      	ittt	ge
   d692c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d6930:	4329      	orrge	r1, r5
   d6932:	bd30      	popge	{r4, r5, pc}
   d6934:	ea6f 0404 	mvn.w	r4, r4
   d6938:	3c1f      	subs	r4, #31
   d693a:	da1c      	bge.n	d6976 <__adddf3+0x1d2>
   d693c:	340c      	adds	r4, #12
   d693e:	dc0e      	bgt.n	d695e <__adddf3+0x1ba>
   d6940:	f104 0414 	add.w	r4, r4, #20
   d6944:	f1c4 0220 	rsb	r2, r4, #32
   d6948:	fa20 f004 	lsr.w	r0, r0, r4
   d694c:	fa01 f302 	lsl.w	r3, r1, r2
   d6950:	ea40 0003 	orr.w	r0, r0, r3
   d6954:	fa21 f304 	lsr.w	r3, r1, r4
   d6958:	ea45 0103 	orr.w	r1, r5, r3
   d695c:	bd30      	pop	{r4, r5, pc}
   d695e:	f1c4 040c 	rsb	r4, r4, #12
   d6962:	f1c4 0220 	rsb	r2, r4, #32
   d6966:	fa20 f002 	lsr.w	r0, r0, r2
   d696a:	fa01 f304 	lsl.w	r3, r1, r4
   d696e:	ea40 0003 	orr.w	r0, r0, r3
   d6972:	4629      	mov	r1, r5
   d6974:	bd30      	pop	{r4, r5, pc}
   d6976:	fa21 f004 	lsr.w	r0, r1, r4
   d697a:	4629      	mov	r1, r5
   d697c:	bd30      	pop	{r4, r5, pc}
   d697e:	f094 0f00 	teq	r4, #0
   d6982:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d6986:	bf06      	itte	eq
   d6988:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d698c:	3401      	addeq	r4, #1
   d698e:	3d01      	subne	r5, #1
   d6990:	e74e      	b.n	d6830 <__adddf3+0x8c>
   d6992:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6996:	bf18      	it	ne
   d6998:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d699c:	d029      	beq.n	d69f2 <__adddf3+0x24e>
   d699e:	ea94 0f05 	teq	r4, r5
   d69a2:	bf08      	it	eq
   d69a4:	ea90 0f02 	teqeq	r0, r2
   d69a8:	d005      	beq.n	d69b6 <__adddf3+0x212>
   d69aa:	ea54 0c00 	orrs.w	ip, r4, r0
   d69ae:	bf04      	itt	eq
   d69b0:	4619      	moveq	r1, r3
   d69b2:	4610      	moveq	r0, r2
   d69b4:	bd30      	pop	{r4, r5, pc}
   d69b6:	ea91 0f03 	teq	r1, r3
   d69ba:	bf1e      	ittt	ne
   d69bc:	2100      	movne	r1, #0
   d69be:	2000      	movne	r0, #0
   d69c0:	bd30      	popne	{r4, r5, pc}
   d69c2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d69c6:	d105      	bne.n	d69d4 <__adddf3+0x230>
   d69c8:	0040      	lsls	r0, r0, #1
   d69ca:	4149      	adcs	r1, r1
   d69cc:	bf28      	it	cs
   d69ce:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d69d2:	bd30      	pop	{r4, r5, pc}
   d69d4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d69d8:	bf3c      	itt	cc
   d69da:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d69de:	bd30      	popcc	{r4, r5, pc}
   d69e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d69e4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d69e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d69ec:	f04f 0000 	mov.w	r0, #0
   d69f0:	bd30      	pop	{r4, r5, pc}
   d69f2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d69f6:	bf1a      	itte	ne
   d69f8:	4619      	movne	r1, r3
   d69fa:	4610      	movne	r0, r2
   d69fc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d6a00:	bf1c      	itt	ne
   d6a02:	460b      	movne	r3, r1
   d6a04:	4602      	movne	r2, r0
   d6a06:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6a0a:	bf06      	itte	eq
   d6a0c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d6a10:	ea91 0f03 	teqeq	r1, r3
   d6a14:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d6a18:	bd30      	pop	{r4, r5, pc}
   d6a1a:	bf00      	nop

000d6a1c <__aeabi_ui2d>:
   d6a1c:	f090 0f00 	teq	r0, #0
   d6a20:	bf04      	itt	eq
   d6a22:	2100      	moveq	r1, #0
   d6a24:	4770      	bxeq	lr
   d6a26:	b530      	push	{r4, r5, lr}
   d6a28:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6a2c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6a30:	f04f 0500 	mov.w	r5, #0
   d6a34:	f04f 0100 	mov.w	r1, #0
   d6a38:	e750      	b.n	d68dc <__adddf3+0x138>
   d6a3a:	bf00      	nop

000d6a3c <__aeabi_i2d>:
   d6a3c:	f090 0f00 	teq	r0, #0
   d6a40:	bf04      	itt	eq
   d6a42:	2100      	moveq	r1, #0
   d6a44:	4770      	bxeq	lr
   d6a46:	b530      	push	{r4, r5, lr}
   d6a48:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6a4c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6a50:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d6a54:	bf48      	it	mi
   d6a56:	4240      	negmi	r0, r0
   d6a58:	f04f 0100 	mov.w	r1, #0
   d6a5c:	e73e      	b.n	d68dc <__adddf3+0x138>
   d6a5e:	bf00      	nop

000d6a60 <__aeabi_f2d>:
   d6a60:	0042      	lsls	r2, r0, #1
   d6a62:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d6a66:	ea4f 0131 	mov.w	r1, r1, rrx
   d6a6a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d6a6e:	bf1f      	itttt	ne
   d6a70:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d6a74:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d6a78:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d6a7c:	4770      	bxne	lr
   d6a7e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d6a82:	bf08      	it	eq
   d6a84:	4770      	bxeq	lr
   d6a86:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d6a8a:	bf04      	itt	eq
   d6a8c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d6a90:	4770      	bxeq	lr
   d6a92:	b530      	push	{r4, r5, lr}
   d6a94:	f44f 7460 	mov.w	r4, #896	; 0x380
   d6a98:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6a9c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6aa0:	e71c      	b.n	d68dc <__adddf3+0x138>
   d6aa2:	bf00      	nop

000d6aa4 <__aeabi_ul2d>:
   d6aa4:	ea50 0201 	orrs.w	r2, r0, r1
   d6aa8:	bf08      	it	eq
   d6aaa:	4770      	bxeq	lr
   d6aac:	b530      	push	{r4, r5, lr}
   d6aae:	f04f 0500 	mov.w	r5, #0
   d6ab2:	e00a      	b.n	d6aca <__aeabi_l2d+0x16>

000d6ab4 <__aeabi_l2d>:
   d6ab4:	ea50 0201 	orrs.w	r2, r0, r1
   d6ab8:	bf08      	it	eq
   d6aba:	4770      	bxeq	lr
   d6abc:	b530      	push	{r4, r5, lr}
   d6abe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d6ac2:	d502      	bpl.n	d6aca <__aeabi_l2d+0x16>
   d6ac4:	4240      	negs	r0, r0
   d6ac6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6aca:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6ace:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6ad2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d6ad6:	f43f aed8 	beq.w	d688a <__adddf3+0xe6>
   d6ada:	f04f 0203 	mov.w	r2, #3
   d6ade:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6ae2:	bf18      	it	ne
   d6ae4:	3203      	addne	r2, #3
   d6ae6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6aea:	bf18      	it	ne
   d6aec:	3203      	addne	r2, #3
   d6aee:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d6af2:	f1c2 0320 	rsb	r3, r2, #32
   d6af6:	fa00 fc03 	lsl.w	ip, r0, r3
   d6afa:	fa20 f002 	lsr.w	r0, r0, r2
   d6afe:	fa01 fe03 	lsl.w	lr, r1, r3
   d6b02:	ea40 000e 	orr.w	r0, r0, lr
   d6b06:	fa21 f102 	lsr.w	r1, r1, r2
   d6b0a:	4414      	add	r4, r2
   d6b0c:	e6bd      	b.n	d688a <__adddf3+0xe6>
   d6b0e:	bf00      	nop

000d6b10 <__aeabi_dmul>:
   d6b10:	b570      	push	{r4, r5, r6, lr}
   d6b12:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d6b16:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6b1a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6b1e:	bf1d      	ittte	ne
   d6b20:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6b24:	ea94 0f0c 	teqne	r4, ip
   d6b28:	ea95 0f0c 	teqne	r5, ip
   d6b2c:	f000 f8de 	bleq	d6cec <__aeabi_dmul+0x1dc>
   d6b30:	442c      	add	r4, r5
   d6b32:	ea81 0603 	eor.w	r6, r1, r3
   d6b36:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d6b3a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d6b3e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d6b42:	bf18      	it	ne
   d6b44:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d6b48:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6b4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d6b50:	d038      	beq.n	d6bc4 <__aeabi_dmul+0xb4>
   d6b52:	fba0 ce02 	umull	ip, lr, r0, r2
   d6b56:	f04f 0500 	mov.w	r5, #0
   d6b5a:	fbe1 e502 	umlal	lr, r5, r1, r2
   d6b5e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d6b62:	fbe0 e503 	umlal	lr, r5, r0, r3
   d6b66:	f04f 0600 	mov.w	r6, #0
   d6b6a:	fbe1 5603 	umlal	r5, r6, r1, r3
   d6b6e:	f09c 0f00 	teq	ip, #0
   d6b72:	bf18      	it	ne
   d6b74:	f04e 0e01 	orrne.w	lr, lr, #1
   d6b78:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d6b7c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d6b80:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d6b84:	d204      	bcs.n	d6b90 <__aeabi_dmul+0x80>
   d6b86:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d6b8a:	416d      	adcs	r5, r5
   d6b8c:	eb46 0606 	adc.w	r6, r6, r6
   d6b90:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d6b94:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d6b98:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d6b9c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d6ba0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d6ba4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6ba8:	bf88      	it	hi
   d6baa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6bae:	d81e      	bhi.n	d6bee <__aeabi_dmul+0xde>
   d6bb0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d6bb4:	bf08      	it	eq
   d6bb6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d6bba:	f150 0000 	adcs.w	r0, r0, #0
   d6bbe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6bc2:	bd70      	pop	{r4, r5, r6, pc}
   d6bc4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d6bc8:	ea46 0101 	orr.w	r1, r6, r1
   d6bcc:	ea40 0002 	orr.w	r0, r0, r2
   d6bd0:	ea81 0103 	eor.w	r1, r1, r3
   d6bd4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d6bd8:	bfc2      	ittt	gt
   d6bda:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6bde:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d6be2:	bd70      	popgt	{r4, r5, r6, pc}
   d6be4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6be8:	f04f 0e00 	mov.w	lr, #0
   d6bec:	3c01      	subs	r4, #1
   d6bee:	f300 80ab 	bgt.w	d6d48 <__aeabi_dmul+0x238>
   d6bf2:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d6bf6:	bfde      	ittt	le
   d6bf8:	2000      	movle	r0, #0
   d6bfa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d6bfe:	bd70      	pople	{r4, r5, r6, pc}
   d6c00:	f1c4 0400 	rsb	r4, r4, #0
   d6c04:	3c20      	subs	r4, #32
   d6c06:	da35      	bge.n	d6c74 <__aeabi_dmul+0x164>
   d6c08:	340c      	adds	r4, #12
   d6c0a:	dc1b      	bgt.n	d6c44 <__aeabi_dmul+0x134>
   d6c0c:	f104 0414 	add.w	r4, r4, #20
   d6c10:	f1c4 0520 	rsb	r5, r4, #32
   d6c14:	fa00 f305 	lsl.w	r3, r0, r5
   d6c18:	fa20 f004 	lsr.w	r0, r0, r4
   d6c1c:	fa01 f205 	lsl.w	r2, r1, r5
   d6c20:	ea40 0002 	orr.w	r0, r0, r2
   d6c24:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d6c28:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6c2c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6c30:	fa21 f604 	lsr.w	r6, r1, r4
   d6c34:	eb42 0106 	adc.w	r1, r2, r6
   d6c38:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6c3c:	bf08      	it	eq
   d6c3e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6c42:	bd70      	pop	{r4, r5, r6, pc}
   d6c44:	f1c4 040c 	rsb	r4, r4, #12
   d6c48:	f1c4 0520 	rsb	r5, r4, #32
   d6c4c:	fa00 f304 	lsl.w	r3, r0, r4
   d6c50:	fa20 f005 	lsr.w	r0, r0, r5
   d6c54:	fa01 f204 	lsl.w	r2, r1, r4
   d6c58:	ea40 0002 	orr.w	r0, r0, r2
   d6c5c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6c60:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6c64:	f141 0100 	adc.w	r1, r1, #0
   d6c68:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6c6c:	bf08      	it	eq
   d6c6e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6c72:	bd70      	pop	{r4, r5, r6, pc}
   d6c74:	f1c4 0520 	rsb	r5, r4, #32
   d6c78:	fa00 f205 	lsl.w	r2, r0, r5
   d6c7c:	ea4e 0e02 	orr.w	lr, lr, r2
   d6c80:	fa20 f304 	lsr.w	r3, r0, r4
   d6c84:	fa01 f205 	lsl.w	r2, r1, r5
   d6c88:	ea43 0302 	orr.w	r3, r3, r2
   d6c8c:	fa21 f004 	lsr.w	r0, r1, r4
   d6c90:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6c94:	fa21 f204 	lsr.w	r2, r1, r4
   d6c98:	ea20 0002 	bic.w	r0, r0, r2
   d6c9c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d6ca0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6ca4:	bf08      	it	eq
   d6ca6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6caa:	bd70      	pop	{r4, r5, r6, pc}
   d6cac:	f094 0f00 	teq	r4, #0
   d6cb0:	d10f      	bne.n	d6cd2 <__aeabi_dmul+0x1c2>
   d6cb2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d6cb6:	0040      	lsls	r0, r0, #1
   d6cb8:	eb41 0101 	adc.w	r1, r1, r1
   d6cbc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6cc0:	bf08      	it	eq
   d6cc2:	3c01      	subeq	r4, #1
   d6cc4:	d0f7      	beq.n	d6cb6 <__aeabi_dmul+0x1a6>
   d6cc6:	ea41 0106 	orr.w	r1, r1, r6
   d6cca:	f095 0f00 	teq	r5, #0
   d6cce:	bf18      	it	ne
   d6cd0:	4770      	bxne	lr
   d6cd2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d6cd6:	0052      	lsls	r2, r2, #1
   d6cd8:	eb43 0303 	adc.w	r3, r3, r3
   d6cdc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d6ce0:	bf08      	it	eq
   d6ce2:	3d01      	subeq	r5, #1
   d6ce4:	d0f7      	beq.n	d6cd6 <__aeabi_dmul+0x1c6>
   d6ce6:	ea43 0306 	orr.w	r3, r3, r6
   d6cea:	4770      	bx	lr
   d6cec:	ea94 0f0c 	teq	r4, ip
   d6cf0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6cf4:	bf18      	it	ne
   d6cf6:	ea95 0f0c 	teqne	r5, ip
   d6cfa:	d00c      	beq.n	d6d16 <__aeabi_dmul+0x206>
   d6cfc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6d00:	bf18      	it	ne
   d6d02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6d06:	d1d1      	bne.n	d6cac <__aeabi_dmul+0x19c>
   d6d08:	ea81 0103 	eor.w	r1, r1, r3
   d6d0c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6d10:	f04f 0000 	mov.w	r0, #0
   d6d14:	bd70      	pop	{r4, r5, r6, pc}
   d6d16:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6d1a:	bf06      	itte	eq
   d6d1c:	4610      	moveq	r0, r2
   d6d1e:	4619      	moveq	r1, r3
   d6d20:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6d24:	d019      	beq.n	d6d5a <__aeabi_dmul+0x24a>
   d6d26:	ea94 0f0c 	teq	r4, ip
   d6d2a:	d102      	bne.n	d6d32 <__aeabi_dmul+0x222>
   d6d2c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d6d30:	d113      	bne.n	d6d5a <__aeabi_dmul+0x24a>
   d6d32:	ea95 0f0c 	teq	r5, ip
   d6d36:	d105      	bne.n	d6d44 <__aeabi_dmul+0x234>
   d6d38:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d6d3c:	bf1c      	itt	ne
   d6d3e:	4610      	movne	r0, r2
   d6d40:	4619      	movne	r1, r3
   d6d42:	d10a      	bne.n	d6d5a <__aeabi_dmul+0x24a>
   d6d44:	ea81 0103 	eor.w	r1, r1, r3
   d6d48:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6d4c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6d50:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6d54:	f04f 0000 	mov.w	r0, #0
   d6d58:	bd70      	pop	{r4, r5, r6, pc}
   d6d5a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6d5e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d6d62:	bd70      	pop	{r4, r5, r6, pc}

000d6d64 <__aeabi_ddiv>:
   d6d64:	b570      	push	{r4, r5, r6, lr}
   d6d66:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d6d6a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6d6e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6d72:	bf1d      	ittte	ne
   d6d74:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6d78:	ea94 0f0c 	teqne	r4, ip
   d6d7c:	ea95 0f0c 	teqne	r5, ip
   d6d80:	f000 f8a7 	bleq	d6ed2 <__aeabi_ddiv+0x16e>
   d6d84:	eba4 0405 	sub.w	r4, r4, r5
   d6d88:	ea81 0e03 	eor.w	lr, r1, r3
   d6d8c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6d90:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6d94:	f000 8088 	beq.w	d6ea8 <__aeabi_ddiv+0x144>
   d6d98:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6d9c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d6da0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d6da4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d6da8:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d6dac:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d6db0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d6db4:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d6db8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d6dbc:	429d      	cmp	r5, r3
   d6dbe:	bf08      	it	eq
   d6dc0:	4296      	cmpeq	r6, r2
   d6dc2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d6dc6:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d6dca:	d202      	bcs.n	d6dd2 <__aeabi_ddiv+0x6e>
   d6dcc:	085b      	lsrs	r3, r3, #1
   d6dce:	ea4f 0232 	mov.w	r2, r2, rrx
   d6dd2:	1ab6      	subs	r6, r6, r2
   d6dd4:	eb65 0503 	sbc.w	r5, r5, r3
   d6dd8:	085b      	lsrs	r3, r3, #1
   d6dda:	ea4f 0232 	mov.w	r2, r2, rrx
   d6dde:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d6de2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d6de6:	ebb6 0e02 	subs.w	lr, r6, r2
   d6dea:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6dee:	bf22      	ittt	cs
   d6df0:	1ab6      	subcs	r6, r6, r2
   d6df2:	4675      	movcs	r5, lr
   d6df4:	ea40 000c 	orrcs.w	r0, r0, ip
   d6df8:	085b      	lsrs	r3, r3, #1
   d6dfa:	ea4f 0232 	mov.w	r2, r2, rrx
   d6dfe:	ebb6 0e02 	subs.w	lr, r6, r2
   d6e02:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6e06:	bf22      	ittt	cs
   d6e08:	1ab6      	subcs	r6, r6, r2
   d6e0a:	4675      	movcs	r5, lr
   d6e0c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d6e10:	085b      	lsrs	r3, r3, #1
   d6e12:	ea4f 0232 	mov.w	r2, r2, rrx
   d6e16:	ebb6 0e02 	subs.w	lr, r6, r2
   d6e1a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6e1e:	bf22      	ittt	cs
   d6e20:	1ab6      	subcs	r6, r6, r2
   d6e22:	4675      	movcs	r5, lr
   d6e24:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d6e28:	085b      	lsrs	r3, r3, #1
   d6e2a:	ea4f 0232 	mov.w	r2, r2, rrx
   d6e2e:	ebb6 0e02 	subs.w	lr, r6, r2
   d6e32:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6e36:	bf22      	ittt	cs
   d6e38:	1ab6      	subcs	r6, r6, r2
   d6e3a:	4675      	movcs	r5, lr
   d6e3c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d6e40:	ea55 0e06 	orrs.w	lr, r5, r6
   d6e44:	d018      	beq.n	d6e78 <__aeabi_ddiv+0x114>
   d6e46:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d6e4a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d6e4e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d6e52:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d6e56:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d6e5a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d6e5e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d6e62:	d1c0      	bne.n	d6de6 <__aeabi_ddiv+0x82>
   d6e64:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6e68:	d10b      	bne.n	d6e82 <__aeabi_ddiv+0x11e>
   d6e6a:	ea41 0100 	orr.w	r1, r1, r0
   d6e6e:	f04f 0000 	mov.w	r0, #0
   d6e72:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d6e76:	e7b6      	b.n	d6de6 <__aeabi_ddiv+0x82>
   d6e78:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6e7c:	bf04      	itt	eq
   d6e7e:	4301      	orreq	r1, r0
   d6e80:	2000      	moveq	r0, #0
   d6e82:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6e86:	bf88      	it	hi
   d6e88:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6e8c:	f63f aeaf 	bhi.w	d6bee <__aeabi_dmul+0xde>
   d6e90:	ebb5 0c03 	subs.w	ip, r5, r3
   d6e94:	bf04      	itt	eq
   d6e96:	ebb6 0c02 	subseq.w	ip, r6, r2
   d6e9a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d6e9e:	f150 0000 	adcs.w	r0, r0, #0
   d6ea2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6ea6:	bd70      	pop	{r4, r5, r6, pc}
   d6ea8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d6eac:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d6eb0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d6eb4:	bfc2      	ittt	gt
   d6eb6:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6eba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d6ebe:	bd70      	popgt	{r4, r5, r6, pc}
   d6ec0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6ec4:	f04f 0e00 	mov.w	lr, #0
   d6ec8:	3c01      	subs	r4, #1
   d6eca:	e690      	b.n	d6bee <__aeabi_dmul+0xde>
   d6ecc:	ea45 0e06 	orr.w	lr, r5, r6
   d6ed0:	e68d      	b.n	d6bee <__aeabi_dmul+0xde>
   d6ed2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6ed6:	ea94 0f0c 	teq	r4, ip
   d6eda:	bf08      	it	eq
   d6edc:	ea95 0f0c 	teqeq	r5, ip
   d6ee0:	f43f af3b 	beq.w	d6d5a <__aeabi_dmul+0x24a>
   d6ee4:	ea94 0f0c 	teq	r4, ip
   d6ee8:	d10a      	bne.n	d6f00 <__aeabi_ddiv+0x19c>
   d6eea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6eee:	f47f af34 	bne.w	d6d5a <__aeabi_dmul+0x24a>
   d6ef2:	ea95 0f0c 	teq	r5, ip
   d6ef6:	f47f af25 	bne.w	d6d44 <__aeabi_dmul+0x234>
   d6efa:	4610      	mov	r0, r2
   d6efc:	4619      	mov	r1, r3
   d6efe:	e72c      	b.n	d6d5a <__aeabi_dmul+0x24a>
   d6f00:	ea95 0f0c 	teq	r5, ip
   d6f04:	d106      	bne.n	d6f14 <__aeabi_ddiv+0x1b0>
   d6f06:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6f0a:	f43f aefd 	beq.w	d6d08 <__aeabi_dmul+0x1f8>
   d6f0e:	4610      	mov	r0, r2
   d6f10:	4619      	mov	r1, r3
   d6f12:	e722      	b.n	d6d5a <__aeabi_dmul+0x24a>
   d6f14:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6f18:	bf18      	it	ne
   d6f1a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6f1e:	f47f aec5 	bne.w	d6cac <__aeabi_dmul+0x19c>
   d6f22:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d6f26:	f47f af0d 	bne.w	d6d44 <__aeabi_dmul+0x234>
   d6f2a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d6f2e:	f47f aeeb 	bne.w	d6d08 <__aeabi_dmul+0x1f8>
   d6f32:	e712      	b.n	d6d5a <__aeabi_dmul+0x24a>

000d6f34 <__gedf2>:
   d6f34:	f04f 3cff 	mov.w	ip, #4294967295
   d6f38:	e006      	b.n	d6f48 <__cmpdf2+0x4>
   d6f3a:	bf00      	nop

000d6f3c <__ledf2>:
   d6f3c:	f04f 0c01 	mov.w	ip, #1
   d6f40:	e002      	b.n	d6f48 <__cmpdf2+0x4>
   d6f42:	bf00      	nop

000d6f44 <__cmpdf2>:
   d6f44:	f04f 0c01 	mov.w	ip, #1
   d6f48:	f84d cd04 	str.w	ip, [sp, #-4]!
   d6f4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6f50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6f54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6f58:	bf18      	it	ne
   d6f5a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d6f5e:	d01b      	beq.n	d6f98 <__cmpdf2+0x54>
   d6f60:	b001      	add	sp, #4
   d6f62:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d6f66:	bf0c      	ite	eq
   d6f68:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d6f6c:	ea91 0f03 	teqne	r1, r3
   d6f70:	bf02      	ittt	eq
   d6f72:	ea90 0f02 	teqeq	r0, r2
   d6f76:	2000      	moveq	r0, #0
   d6f78:	4770      	bxeq	lr
   d6f7a:	f110 0f00 	cmn.w	r0, #0
   d6f7e:	ea91 0f03 	teq	r1, r3
   d6f82:	bf58      	it	pl
   d6f84:	4299      	cmppl	r1, r3
   d6f86:	bf08      	it	eq
   d6f88:	4290      	cmpeq	r0, r2
   d6f8a:	bf2c      	ite	cs
   d6f8c:	17d8      	asrcs	r0, r3, #31
   d6f8e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d6f92:	f040 0001 	orr.w	r0, r0, #1
   d6f96:	4770      	bx	lr
   d6f98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6f9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6fa0:	d102      	bne.n	d6fa8 <__cmpdf2+0x64>
   d6fa2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d6fa6:	d107      	bne.n	d6fb8 <__cmpdf2+0x74>
   d6fa8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6fac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6fb0:	d1d6      	bne.n	d6f60 <__cmpdf2+0x1c>
   d6fb2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d6fb6:	d0d3      	beq.n	d6f60 <__cmpdf2+0x1c>
   d6fb8:	f85d 0b04 	ldr.w	r0, [sp], #4
   d6fbc:	4770      	bx	lr
   d6fbe:	bf00      	nop

000d6fc0 <__aeabi_cdrcmple>:
   d6fc0:	4684      	mov	ip, r0
   d6fc2:	4610      	mov	r0, r2
   d6fc4:	4662      	mov	r2, ip
   d6fc6:	468c      	mov	ip, r1
   d6fc8:	4619      	mov	r1, r3
   d6fca:	4663      	mov	r3, ip
   d6fcc:	e000      	b.n	d6fd0 <__aeabi_cdcmpeq>
   d6fce:	bf00      	nop

000d6fd0 <__aeabi_cdcmpeq>:
   d6fd0:	b501      	push	{r0, lr}
   d6fd2:	f7ff ffb7 	bl	d6f44 <__cmpdf2>
   d6fd6:	2800      	cmp	r0, #0
   d6fd8:	bf48      	it	mi
   d6fda:	f110 0f00 	cmnmi.w	r0, #0
   d6fde:	bd01      	pop	{r0, pc}

000d6fe0 <__aeabi_dcmpeq>:
   d6fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6fe4:	f7ff fff4 	bl	d6fd0 <__aeabi_cdcmpeq>
   d6fe8:	bf0c      	ite	eq
   d6fea:	2001      	moveq	r0, #1
   d6fec:	2000      	movne	r0, #0
   d6fee:	f85d fb08 	ldr.w	pc, [sp], #8
   d6ff2:	bf00      	nop

000d6ff4 <__aeabi_dcmplt>:
   d6ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6ff8:	f7ff ffea 	bl	d6fd0 <__aeabi_cdcmpeq>
   d6ffc:	bf34      	ite	cc
   d6ffe:	2001      	movcc	r0, #1
   d7000:	2000      	movcs	r0, #0
   d7002:	f85d fb08 	ldr.w	pc, [sp], #8
   d7006:	bf00      	nop

000d7008 <__aeabi_dcmple>:
   d7008:	f84d ed08 	str.w	lr, [sp, #-8]!
   d700c:	f7ff ffe0 	bl	d6fd0 <__aeabi_cdcmpeq>
   d7010:	bf94      	ite	ls
   d7012:	2001      	movls	r0, #1
   d7014:	2000      	movhi	r0, #0
   d7016:	f85d fb08 	ldr.w	pc, [sp], #8
   d701a:	bf00      	nop

000d701c <__aeabi_dcmpge>:
   d701c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7020:	f7ff ffce 	bl	d6fc0 <__aeabi_cdrcmple>
   d7024:	bf94      	ite	ls
   d7026:	2001      	movls	r0, #1
   d7028:	2000      	movhi	r0, #0
   d702a:	f85d fb08 	ldr.w	pc, [sp], #8
   d702e:	bf00      	nop

000d7030 <__aeabi_dcmpgt>:
   d7030:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7034:	f7ff ffc4 	bl	d6fc0 <__aeabi_cdrcmple>
   d7038:	bf34      	ite	cc
   d703a:	2001      	movcc	r0, #1
   d703c:	2000      	movcs	r0, #0
   d703e:	f85d fb08 	ldr.w	pc, [sp], #8
   d7042:	bf00      	nop

000d7044 <__aeabi_dcmpun>:
   d7044:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d7048:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d704c:	d102      	bne.n	d7054 <__aeabi_dcmpun+0x10>
   d704e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d7052:	d10a      	bne.n	d706a <__aeabi_dcmpun+0x26>
   d7054:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d7058:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d705c:	d102      	bne.n	d7064 <__aeabi_dcmpun+0x20>
   d705e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d7062:	d102      	bne.n	d706a <__aeabi_dcmpun+0x26>
   d7064:	f04f 0000 	mov.w	r0, #0
   d7068:	4770      	bx	lr
   d706a:	f04f 0001 	mov.w	r0, #1
   d706e:	4770      	bx	lr

000d7070 <__aeabi_d2iz>:
   d7070:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d7074:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d7078:	d215      	bcs.n	d70a6 <__aeabi_d2iz+0x36>
   d707a:	d511      	bpl.n	d70a0 <__aeabi_d2iz+0x30>
   d707c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d7080:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d7084:	d912      	bls.n	d70ac <__aeabi_d2iz+0x3c>
   d7086:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d708a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d708e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d7092:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d7096:	fa23 f002 	lsr.w	r0, r3, r2
   d709a:	bf18      	it	ne
   d709c:	4240      	negne	r0, r0
   d709e:	4770      	bx	lr
   d70a0:	f04f 0000 	mov.w	r0, #0
   d70a4:	4770      	bx	lr
   d70a6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d70aa:	d105      	bne.n	d70b8 <__aeabi_d2iz+0x48>
   d70ac:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d70b0:	bf08      	it	eq
   d70b2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d70b6:	4770      	bx	lr
   d70b8:	f04f 0000 	mov.w	r0, #0
   d70bc:	4770      	bx	lr
   d70be:	bf00      	nop

000d70c0 <__aeabi_d2uiz>:
   d70c0:	004a      	lsls	r2, r1, #1
   d70c2:	d211      	bcs.n	d70e8 <__aeabi_d2uiz+0x28>
   d70c4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d70c8:	d211      	bcs.n	d70ee <__aeabi_d2uiz+0x2e>
   d70ca:	d50d      	bpl.n	d70e8 <__aeabi_d2uiz+0x28>
   d70cc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d70d0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d70d4:	d40e      	bmi.n	d70f4 <__aeabi_d2uiz+0x34>
   d70d6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d70da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d70de:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d70e2:	fa23 f002 	lsr.w	r0, r3, r2
   d70e6:	4770      	bx	lr
   d70e8:	f04f 0000 	mov.w	r0, #0
   d70ec:	4770      	bx	lr
   d70ee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d70f2:	d102      	bne.n	d70fa <__aeabi_d2uiz+0x3a>
   d70f4:	f04f 30ff 	mov.w	r0, #4294967295
   d70f8:	4770      	bx	lr
   d70fa:	f04f 0000 	mov.w	r0, #0
   d70fe:	4770      	bx	lr

000d7100 <atexit>:
   d7100:	2300      	movs	r3, #0
   d7102:	4601      	mov	r1, r0
   d7104:	461a      	mov	r2, r3
   d7106:	4618      	mov	r0, r3
   d7108:	f000 b874 	b.w	d71f4 <__register_exitproc>

000d710c <ldiv>:
   d710c:	2900      	cmp	r1, #0
   d710e:	b510      	push	{r4, lr}
   d7110:	fb91 f4f2 	sdiv	r4, r1, r2
   d7114:	fb02 1314 	mls	r3, r2, r4, r1
   d7118:	db06      	blt.n	d7128 <ldiv+0x1c>
   d711a:	2b00      	cmp	r3, #0
   d711c:	da01      	bge.n	d7122 <ldiv+0x16>
   d711e:	3401      	adds	r4, #1
   d7120:	1a9b      	subs	r3, r3, r2
   d7122:	e9c0 4300 	strd	r4, r3, [r0]
   d7126:	bd10      	pop	{r4, pc}
   d7128:	2b00      	cmp	r3, #0
   d712a:	bfc4      	itt	gt
   d712c:	f104 34ff 	addgt.w	r4, r4, #4294967295
   d7130:	189b      	addgt	r3, r3, r2
   d7132:	e7f6      	b.n	d7122 <ldiv+0x16>

000d7134 <memcpy>:
   d7134:	440a      	add	r2, r1
   d7136:	4291      	cmp	r1, r2
   d7138:	f100 33ff 	add.w	r3, r0, #4294967295
   d713c:	d100      	bne.n	d7140 <memcpy+0xc>
   d713e:	4770      	bx	lr
   d7140:	b510      	push	{r4, lr}
   d7142:	f811 4b01 	ldrb.w	r4, [r1], #1
   d7146:	f803 4f01 	strb.w	r4, [r3, #1]!
   d714a:	4291      	cmp	r1, r2
   d714c:	d1f9      	bne.n	d7142 <memcpy+0xe>
   d714e:	bd10      	pop	{r4, pc}

000d7150 <memset>:
   d7150:	4402      	add	r2, r0
   d7152:	4603      	mov	r3, r0
   d7154:	4293      	cmp	r3, r2
   d7156:	d100      	bne.n	d715a <memset+0xa>
   d7158:	4770      	bx	lr
   d715a:	f803 1b01 	strb.w	r1, [r3], #1
   d715e:	e7f9      	b.n	d7154 <memset+0x4>

000d7160 <srand>:
   d7160:	b538      	push	{r3, r4, r5, lr}
   d7162:	4b0d      	ldr	r3, [pc, #52]	; (d7198 <srand+0x38>)
   d7164:	681d      	ldr	r5, [r3, #0]
   d7166:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d7168:	4604      	mov	r4, r0
   d716a:	b97b      	cbnz	r3, d718c <srand+0x2c>
   d716c:	2018      	movs	r0, #24
   d716e:	f7fe f881 	bl	d5274 <malloc>
   d7172:	4a0a      	ldr	r2, [pc, #40]	; (d719c <srand+0x3c>)
   d7174:	4b0a      	ldr	r3, [pc, #40]	; (d71a0 <srand+0x40>)
   d7176:	63a8      	str	r0, [r5, #56]	; 0x38
   d7178:	e9c0 2300 	strd	r2, r3, [r0]
   d717c:	4b09      	ldr	r3, [pc, #36]	; (d71a4 <srand+0x44>)
   d717e:	6083      	str	r3, [r0, #8]
   d7180:	230b      	movs	r3, #11
   d7182:	8183      	strh	r3, [r0, #12]
   d7184:	2201      	movs	r2, #1
   d7186:	2300      	movs	r3, #0
   d7188:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d718c:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d718e:	2200      	movs	r2, #0
   d7190:	611c      	str	r4, [r3, #16]
   d7192:	615a      	str	r2, [r3, #20]
   d7194:	bd38      	pop	{r3, r4, r5, pc}
   d7196:	bf00      	nop
   d7198:	20039fcc 	.word	0x20039fcc
   d719c:	abcd330e 	.word	0xabcd330e
   d71a0:	e66d1234 	.word	0xe66d1234
   d71a4:	0005deec 	.word	0x0005deec

000d71a8 <strdup>:
   d71a8:	4b02      	ldr	r3, [pc, #8]	; (d71b4 <strdup+0xc>)
   d71aa:	4601      	mov	r1, r0
   d71ac:	6818      	ldr	r0, [r3, #0]
   d71ae:	f000 b803 	b.w	d71b8 <_strdup_r>
   d71b2:	bf00      	nop
   d71b4:	20039fcc 	.word	0x20039fcc

000d71b8 <_strdup_r>:
   d71b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d71ba:	4604      	mov	r4, r0
   d71bc:	4608      	mov	r0, r1
   d71be:	460d      	mov	r5, r1
   d71c0:	f000 f80f 	bl	d71e2 <strlen>
   d71c4:	1c42      	adds	r2, r0, #1
   d71c6:	4611      	mov	r1, r2
   d71c8:	4620      	mov	r0, r4
   d71ca:	9201      	str	r2, [sp, #4]
   d71cc:	f7fe f87a 	bl	d52c4 <_malloc_r>
   d71d0:	4604      	mov	r4, r0
   d71d2:	b118      	cbz	r0, d71dc <_strdup_r+0x24>
   d71d4:	9a01      	ldr	r2, [sp, #4]
   d71d6:	4629      	mov	r1, r5
   d71d8:	f7ff ffac 	bl	d7134 <memcpy>
   d71dc:	4620      	mov	r0, r4
   d71de:	b003      	add	sp, #12
   d71e0:	bd30      	pop	{r4, r5, pc}

000d71e2 <strlen>:
   d71e2:	4603      	mov	r3, r0
   d71e4:	f813 2b01 	ldrb.w	r2, [r3], #1
   d71e8:	2a00      	cmp	r2, #0
   d71ea:	d1fb      	bne.n	d71e4 <strlen+0x2>
   d71ec:	1a18      	subs	r0, r3, r0
   d71ee:	3801      	subs	r0, #1
   d71f0:	4770      	bx	lr
	...

000d71f4 <__register_exitproc>:
   d71f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d71f8:	f8df 80b8 	ldr.w	r8, [pc, #184]	; d72b4 <__register_exitproc+0xc0>
   d71fc:	4606      	mov	r6, r0
   d71fe:	f8d8 0000 	ldr.w	r0, [r8]
   d7202:	461f      	mov	r7, r3
   d7204:	460d      	mov	r5, r1
   d7206:	4691      	mov	r9, r2
   d7208:	f000 f856 	bl	d72b8 <__retarget_lock_acquire_recursive>
   d720c:	4b25      	ldr	r3, [pc, #148]	; (d72a4 <__register_exitproc+0xb0>)
   d720e:	681c      	ldr	r4, [r3, #0]
   d7210:	b934      	cbnz	r4, d7220 <__register_exitproc+0x2c>
   d7212:	4c25      	ldr	r4, [pc, #148]	; (d72a8 <__register_exitproc+0xb4>)
   d7214:	601c      	str	r4, [r3, #0]
   d7216:	4b25      	ldr	r3, [pc, #148]	; (d72ac <__register_exitproc+0xb8>)
   d7218:	b113      	cbz	r3, d7220 <__register_exitproc+0x2c>
   d721a:	681b      	ldr	r3, [r3, #0]
   d721c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   d7220:	6863      	ldr	r3, [r4, #4]
   d7222:	2b1f      	cmp	r3, #31
   d7224:	dd07      	ble.n	d7236 <__register_exitproc+0x42>
   d7226:	f8d8 0000 	ldr.w	r0, [r8]
   d722a:	f000 f847 	bl	d72bc <__retarget_lock_release_recursive>
   d722e:	f04f 30ff 	mov.w	r0, #4294967295
   d7232:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d7236:	b34e      	cbz	r6, d728c <__register_exitproc+0x98>
   d7238:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   d723c:	b988      	cbnz	r0, d7262 <__register_exitproc+0x6e>
   d723e:	4b1c      	ldr	r3, [pc, #112]	; (d72b0 <__register_exitproc+0xbc>)
   d7240:	b923      	cbnz	r3, d724c <__register_exitproc+0x58>
   d7242:	f8d8 0000 	ldr.w	r0, [r8]
   d7246:	f000 f838 	bl	d72ba <__retarget_lock_release>
   d724a:	e7f0      	b.n	d722e <__register_exitproc+0x3a>
   d724c:	f44f 7084 	mov.w	r0, #264	; 0x108
   d7250:	f7fe f810 	bl	d5274 <malloc>
   d7254:	2800      	cmp	r0, #0
   d7256:	d0f4      	beq.n	d7242 <__register_exitproc+0x4e>
   d7258:	2300      	movs	r3, #0
   d725a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   d725e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   d7262:	6863      	ldr	r3, [r4, #4]
   d7264:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   d7268:	2201      	movs	r2, #1
   d726a:	409a      	lsls	r2, r3
   d726c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   d7270:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   d7274:	4313      	orrs	r3, r2
   d7276:	2e02      	cmp	r6, #2
   d7278:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   d727c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   d7280:	bf02      	ittt	eq
   d7282:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   d7286:	431a      	orreq	r2, r3
   d7288:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
   d728c:	6863      	ldr	r3, [r4, #4]
   d728e:	f8d8 0000 	ldr.w	r0, [r8]
   d7292:	1c5a      	adds	r2, r3, #1
   d7294:	3302      	adds	r3, #2
   d7296:	6062      	str	r2, [r4, #4]
   d7298:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   d729c:	f000 f80e 	bl	d72bc <__retarget_lock_release_recursive>
   d72a0:	2000      	movs	r0, #0
   d72a2:	e7c6      	b.n	d7232 <__register_exitproc+0x3e>
   d72a4:	2003e7e4 	.word	0x2003e7e4
   d72a8:	2003e758 	.word	0x2003e758
   d72ac:	00000000 	.word	0x00000000
   d72b0:	000d5275 	.word	0x000d5275
   d72b4:	2003a030 	.word	0x2003a030

000d72b8 <__retarget_lock_acquire_recursive>:
   d72b8:	4770      	bx	lr

000d72ba <__retarget_lock_release>:
   d72ba:	4770      	bx	lr

000d72bc <__retarget_lock_release_recursive>:
   d72bc:	4770      	bx	lr

000d72be <link_code_end>:
	...

000d72c0 <dynalib_user>:
   d72c0:	401d 000d 4059 000d 4081 000d 4085 000d     .@..Y@...@...@..
   d72d0:	0000 0000 414d 3358 3130 3530 7720 7361     ....MAX30105 was
   d72e0:	6e20 746f 6620 756f 646e 202e 6c50 6165      not found. Plea
   d72f0:	6573 6320 6568 6b63 7720 7269 6e69 2f67     se check wiring/
   d7300:	6f70 6577 2e72 4300 6c61 6269 6172 6974     power..Calibrati
   d7310:	676e 4300 6c61 6269 6172 6974 6e6f 6420     ng.Calibration d
   d7320:	6e6f 0065 207b 6822 6165 7472 6152 6574     one.{ "heartRate
   d7330:	3a22 2220 7325 2c22 2220 7073 326f 3a22     ": "%s", "spo2":
   d7340:	2220 7325 2c22 2220 6974 656d 7453 6d61      "%s", "timeStam
   d7350:	2270 203a 2522 2273 7d20 0a00 7550 6c62     p": "%s" }..Publ
   d7360:	7369 6568 0064 6f68 6b6f 722d 7365 6f70     ished.hook-respo
   d7370:	736e 2f65 6553 736e 726f 6144 6174 2c00     nse/SensorData.,
   d7380:	4820 3d52 2c00 5320 4f50 3d32 3000 302e      HR=., SPO2=.0.0
   d7390:	0030                                        0.

000d7392 <_ZL14uch_spo2_table>:
   d7392:	5f5f 605f 6060 6161 6161 6261 6262 6262     ___```aaaaabbbbb
   d73a2:	6363 6363 6363 6363 6464 6464 6464 6464     ccccccccdddddddd
   d73b2:	6464 6464 6464 6464 6464 6464 6363 6363     ddddddddddddcccc
   d73c2:	6363 6363 6262 6262 6262 6161 6161 6060     ccccbbbbbbaaaa``
   d73d2:	6060 5f5f 5e5f 5e5e 5d5d 5c5d 5c5c 5b5b     ``___^^^]]]\\\[[
   d73e2:	5a5a 5959 5859 5758 5657 5556 5455 5354     ZZYYYXXWWVVUUTTS
   d73f2:	5252 5151 5050 4e4f 4d4e 4c4c 4a4b 494a     RRQQPPONNMLLKJJI
   d7402:	4848 4647 4545 4344 4242 4041 3e3f 3d3e     HHGFEEDCBBA@?>>=
   d7412:	3b3c 393a 3838 3637 3435 3233 3031 2e2f     <;:98876543210/.
   d7422:	2c2d 2a2b 2829 2627 2425 2223 1f21 1d1e     -,+*)('&%$#"!...
   d7432:	1b1c 191a 1617 1415 1113 0f10 0c0e 0a0b     ................
   d7442:	0709 0506 0203 0001 0000                    ..........

000d744c <_ZTVN5spark13EthernetClassE>:
	...
   d7454:	5353 000d 5349 000d 533f 000d 5335 000d     SS..IS..?S..5S..
   d7464:	5329 000d 531d 000d 64f9 000d 6501 000d     )S...S...d...e..
   d7474:	5311 000d 5309 000d 52ff 000d 52f5 000d     .S...S...R...R..
   d7484:	6531 000d 616e 006e 6e69 0066 766f 0066     1e..nan.inf.ovf.
   d7494:	7061 0070 5925 252d 2d6d 6425 2554 3a48     app.%Y-%m-%dT%H:
   d74a4:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000d74b4 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d74bc:	5af9 000d 5aff 000d 5b3d 000d 5b0d 000d     .Z...Z..=[...[..
   d74cc:	5afb 000d                                   .Z..

000d74d0 <_ZTV9IPAddress>:
	...
   d74d8:	6041 000d 6031 000d 6033 000d               A`..1`..3`..

000d74e4 <_ZTV9USBSerial>:
	...
   d74ec:	6119 000d 6181 000d 6157 000d 55e1 000d     .a...a..Wa...U..
   d74fc:	6149 000d 611b 000d 612b 000d 617b 000d     Ia...a..+a..{a..
   d750c:	613b 000d 6113 000d                         ;a...a..

000d7514 <_ZTV11USARTSerial>:
	...
   d751c:	621d 000d 628b 000d 6263 000d 55e1 000d     .b...b..cb...U..
   d752c:	6233 000d 624f 000d 6241 000d 625d 000d     3b..Ob..Ab..]b..
   d753c:	621f 000d 6225 000d                         .b..%b..

000d7544 <_ZTV7TwoWire>:
	...
   d754c:	6339 000d 6383 000d 635b 000d 633b 000d     9c...c..[c..;c..
   d755c:	6363 000d 636b 000d 6373 000d 637b 000d     cc..kc..sc..{c..

000d756c <_ZTVN5spark9WiFiClassE>:
	...
   d7574:	649b 000d 6491 000d 6487 000d 643d 000d     .d...d...d..=d..
   d7584:	647b 000d 646f 000d 64f9 000d 6501 000d     {d..od...d...e..
   d7594:	6463 000d 645b 000d 6451 000d 6447 000d     cd..[d..Qd..Gd..
   d75a4:	6531 000d                                   1e..

000d75a8 <_ZTVN5spark12NetworkClassE>:
	...
   d75b0:	64b9 000d 64c3 000d 64cd 000d 64d7 000d     .d...d...d...d..
   d75c0:	64e1 000d 64ed 000d 64f9 000d 6501 000d     .d...d...d...e..
   d75d0:	6509 000d 6515 000d 651d 000d 6527 000d     .e...e...e..'e..
   d75e0:	6531 000d                                   1e..

000d75e4 <_ZSt7nothrow>:
	...

000d75e5 <link_const_variable_data_end>:
   d75e5:	00          	.byte	0x00
	...

000d75e8 <link_constructors_location>:
   d75e8:	000d4501 	.word	0x000d4501
   d75ec:	000d535d 	.word	0x000d535d
   d75f0:	000d5385 	.word	0x000d5385
   d75f4:	000d55d1 	.word	0x000d55d1
   d75f8:	000d585d 	.word	0x000d585d
   d75fc:	000d5965 	.word	0x000d5965
   d7600:	000d59b5 	.word	0x000d59b5
   d7604:	000d64a5 	.word	0x000d64a5
   d7608:	000d6605 	.word	0x000d6605

000d760c <link_constructors_end>:
   d760c:	00000000 	.word	0x00000000
