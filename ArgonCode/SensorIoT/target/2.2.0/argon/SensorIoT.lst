
d:/Coursework/Fall_2022/ECE_513/FinalProject/HeartRateMonitor/ArgonCode/SensorIoT/target/2.2.0/argon/SensorIoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001844  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d5860  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000006c  2003e55c  000d5864  0001e55c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000228  2003e5c8  2003e5c8  0002e5c8  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d58d0  000d58d0  000258d0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d58f8  000d58f8  000258f8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000e984c  00000000  00000000  000258fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000102b2  00000000  00000000  0010f148  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00026198  00000000  00000000  0011f3fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001f80  00000000  00000000  00145592  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000068c0  00000000  00000000  00147512  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00030a08  00000000  00000000  0014ddd2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002a7f9  00000000  00000000  0017e7da  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    001056b4  00000000  00000000  001a8fd3  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000056f8  00000000  00000000  002ae688  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f001 fa56 	bl	d54de <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f001 fa5e 	bl	d54fa <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e55c 	.word	0x2003e55c
   d4048:	000d5864 	.word	0x000d5864
   d404c:	2003e5c8 	.word	0x2003e5c8
   d4050:	2003e5c8 	.word	0x2003e5c8
   d4054:	2003e7ed 	.word	0x2003e7ed

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
    module_user_init_hook();
   d405e:	f000 fcdf 	bl	d4a20 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000d5838 	.word	0x000d5838
   d407c:	000d585c 	.word	0x000d585c

000d4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4080:	f000 b814 	b.w	d40ac <setup>

000d4084 <module_user_loop>:
}

void module_user_loop() {
   d4084:	b508      	push	{r3, lr}
    loop();
   d4086:	f000 f86f 	bl	d4168 <loop>
    _post_loop();
}
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d408e:	f000 bc7f 	b.w	d4990 <_post_loop>

000d4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4092:	f000 b9e5 	b.w	d4460 <malloc>

000d4096 <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d4096:	f000 b9eb 	b.w	d4470 <free>

000d409a <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409a:	7800      	ldrb	r0, [r0, #0]
   d409c:	fab0 f080 	clz	r0, r0
   d40a0:	0940      	lsrs	r0, r0, #5
   d40a2:	4770      	bx	lr

000d40a4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a4:	2301      	movs	r3, #1
   d40a6:	7003      	strb	r3, [r0, #0]
   d40a8:	4770      	bx	lr
	...

000d40ac <setup>:
void setup() {
   d40ac:	b510      	push	{r4, lr}
   d40ae:	b094      	sub	sp, #80	; 0x50
  Serial.begin(9600);
   d40b0:	f001 f854 	bl	d515c <_Z16_fetch_usbserialv>
   d40b4:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d40b8:	f001 f844 	bl	d5144 <_ZN9USBSerial5beginEl>
  String heartRate = "85.3256";
   d40bc:	4925      	ldr	r1, [pc, #148]	; (d4154 <setup+0xa8>)
   d40be:	a804      	add	r0, sp, #16
   d40c0:	f000 fae5 	bl	d468e <_ZN6StringC1EPKc>
  String spo2 = "85.3256";
   d40c4:	4923      	ldr	r1, [pc, #140]	; (d4154 <setup+0xa8>)
   d40c6:	a808      	add	r0, sp, #32
   d40c8:	f000 fae1 	bl	d468e <_ZN6StringC1EPKc>
  String timeStamp = String(Time.now());
   d40cc:	f000 fc02 	bl	d48d4 <_ZN9TimeClass3nowEv>
   d40d0:	220a      	movs	r2, #10
   d40d2:	4601      	mov	r1, r0
   d40d4:	a80c      	add	r0, sp, #48	; 0x30
   d40d6:	f000 fb00 	bl	d46da <_ZN6StringC1Elh>
  Serial.print(timeStamp);
   d40da:	f001 f83f 	bl	d515c <_Z16_fetch_usbserialv>
   d40de:	990c      	ldr	r1, [sp, #48]	; 0x30
   d40e0:	f000 fb8a 	bl	d47f8 <_ZN5Print5printEPKc>

  String data = String::format("{ \"heartRate\": \"%s\", \"spo2\": \"%s\", \"timeStamp\": \"%s\" }", heartRate.c_str(), spo2.c_str(), timeStamp.c_str());
   d40e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d40e6:	9a04      	ldr	r2, [sp, #16]
   d40e8:	491b      	ldr	r1, [pc, #108]	; (d4158 <setup+0xac>)
   d40ea:	9300      	str	r3, [sp, #0]
   d40ec:	a810      	add	r0, sp, #64	; 0x40
   d40ee:	9b08      	ldr	r3, [sp, #32]
   d40f0:	f000 fb06 	bl	d4700 <_ZN6String6formatEPKcz>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d40f4:	4b19      	ldr	r3, [pc, #100]	; (d415c <setup+0xb0>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d40f6:	9a10      	ldr	r2, [sp, #64]	; 0x40
   d40f8:	781b      	ldrb	r3, [r3, #0]
   d40fa:	f88d 3000 	strb.w	r3, [sp]
   d40fe:	4918      	ldr	r1, [pc, #96]	; (d4160 <setup+0xb4>)
   d4100:	233c      	movs	r3, #60	; 0x3c
   d4102:	a802      	add	r0, sp, #8
   d4104:	f000 fde4 	bl	d4cd0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d4108:	9c03      	ldr	r4, [sp, #12]
   d410a:	b17c      	cbz	r4, d412c <setup+0x80>
      if (--_M_use_count == 0)
   d410c:	6863      	ldr	r3, [r4, #4]
   d410e:	3b01      	subs	r3, #1
   d4110:	6063      	str	r3, [r4, #4]
   d4112:	b95b      	cbnz	r3, d412c <setup+0x80>
          _M_dispose();
   d4114:	6823      	ldr	r3, [r4, #0]
   d4116:	4620      	mov	r0, r4
   d4118:	689b      	ldr	r3, [r3, #8]
   d411a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d411c:	68a3      	ldr	r3, [r4, #8]
   d411e:	3b01      	subs	r3, #1
   d4120:	60a3      	str	r3, [r4, #8]
   d4122:	b91b      	cbnz	r3, d412c <setup+0x80>
            _M_destroy();
   d4124:	6823      	ldr	r3, [r4, #0]
   d4126:	4620      	mov	r0, r4
   d4128:	68db      	ldr	r3, [r3, #12]
   d412a:	4798      	blx	r3
  // Trigger the integration
  Particle.publish("SensorData", data, PRIVATE);
  // Wait 60 seconds
  Serial.println("Published");
   d412c:	f001 f816 	bl	d515c <_Z16_fetch_usbserialv>
   d4130:	490c      	ldr	r1, [pc, #48]	; (d4164 <setup+0xb8>)
   d4132:	f000 fb74 	bl	d481e <_ZN5Print7printlnEPKc>
  String data = String::format("{ \"heartRate\": \"%s\", \"spo2\": \"%s\", \"timeStamp\": \"%s\" }", heartRate.c_str(), spo2.c_str(), timeStamp.c_str());
   d4136:	a810      	add	r0, sp, #64	; 0x40
   d4138:	f000 fa5e 	bl	d45f8 <_ZN6StringD1Ev>
  String timeStamp = String(Time.now());
   d413c:	a80c      	add	r0, sp, #48	; 0x30
   d413e:	f000 fa5b 	bl	d45f8 <_ZN6StringD1Ev>
  String spo2 = "85.3256";
   d4142:	a808      	add	r0, sp, #32
   d4144:	f000 fa58 	bl	d45f8 <_ZN6StringD1Ev>
  String heartRate = "85.3256";
   d4148:	a804      	add	r0, sp, #16
   d414a:	f000 fa55 	bl	d45f8 <_ZN6StringD1Ev>
}
   d414e:	b014      	add	sp, #80	; 0x50
   d4150:	bd10      	pop	{r4, pc}
   d4152:	bf00      	nop
   d4154:	000d5680 	.word	0x000d5680
   d4158:	000d5688 	.word	0x000d5688
   d415c:	2003e5c8 	.word	0x2003e5c8
   d4160:	000d56bf 	.word	0x000d56bf
   d4164:	000d56ca 	.word	0x000d56ca

000d4168 <loop>:

void loop() {

}
   d4168:	4770      	bx	lr
	...

000d416c <_GLOBAL__sub_I_setup>:
        val_(val) {
   d416c:	4b01      	ldr	r3, [pc, #4]	; (d4174 <_GLOBAL__sub_I_setup+0x8>)
   d416e:	2201      	movs	r2, #1
   d4170:	701a      	strb	r2, [r3, #0]
   d4172:	4770      	bx	lr
   d4174:	2003e5c8 	.word	0x2003e5c8

000d4178 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4178:	b508      	push	{r3, lr}
   d417a:	4b02      	ldr	r3, [pc, #8]	; (d4184 <netdb_freeaddrinfo+0xc>)
   d417c:	681b      	ldr	r3, [r3, #0]
   d417e:	689b      	ldr	r3, [r3, #8]
   d4180:	9301      	str	r3, [sp, #4]
   d4182:	bd08      	pop	{r3, pc}
   d4184:	00030268 	.word	0x00030268

000d4188 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4188:	b508      	push	{r3, lr}
   d418a:	4b02      	ldr	r3, [pc, #8]	; (d4194 <netdb_getaddrinfo+0xc>)
   d418c:	681b      	ldr	r3, [r3, #0]
   d418e:	68db      	ldr	r3, [r3, #12]
   d4190:	9301      	str	r3, [sp, #4]
   d4192:	bd08      	pop	{r3, pc}
   d4194:	00030268 	.word	0x00030268

000d4198 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4198:	b508      	push	{r3, lr}
   d419a:	4b02      	ldr	r3, [pc, #8]	; (d41a4 <HAL_RNG_GetRandomNumber+0xc>)
   d419c:	681b      	ldr	r3, [r3, #0]
   d419e:	685b      	ldr	r3, [r3, #4]
   d41a0:	9301      	str	r3, [sp, #4]
   d41a2:	bd08      	pop	{r3, pc}
   d41a4:	00030218 	.word	0x00030218

000d41a8 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d41a8:	b508      	push	{r3, lr}
   d41aa:	4b02      	ldr	r3, [pc, #8]	; (d41b4 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d41ac:	681b      	ldr	r3, [r3, #0]
   d41ae:	695b      	ldr	r3, [r3, #20]
   d41b0:	9301      	str	r3, [sp, #4]
   d41b2:	bd08      	pop	{r3, pc}
   d41b4:	00030218 	.word	0x00030218

000d41b8 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   d41b8:	b508      	push	{r3, lr}
   d41ba:	4b02      	ldr	r3, [pc, #8]	; (d41c4 <hal_rtc_time_is_valid+0xc>)
   d41bc:	681b      	ldr	r3, [r3, #0]
   d41be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d41c0:	9301      	str	r3, [sp, #4]
   d41c2:	bd08      	pop	{r3, pc}
   d41c4:	00030218 	.word	0x00030218

000d41c8 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   d41c8:	b508      	push	{r3, lr}
   d41ca:	4b02      	ldr	r3, [pc, #8]	; (d41d4 <hal_rtc_get_time+0xc>)
   d41cc:	681b      	ldr	r3, [r3, #0]
   d41ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d41d0:	9301      	str	r3, [sp, #4]
   d41d2:	bd08      	pop	{r3, pc}
   d41d4:	00030218 	.word	0x00030218

000d41d8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d41d8:	b508      	push	{r3, lr}
   d41da:	4b02      	ldr	r3, [pc, #8]	; (d41e4 <os_mutex_recursive_create+0xc>)
   d41dc:	681b      	ldr	r3, [r3, #0]
   d41de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d41e0:	9301      	str	r3, [sp, #4]
   d41e2:	bd08      	pop	{r3, pc}
   d41e4:	00030248 	.word	0x00030248

000d41e8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d41e8:	b508      	push	{r3, lr}
   d41ea:	4b02      	ldr	r3, [pc, #8]	; (d41f4 <inet_inet_ntop+0xc>)
   d41ec:	681b      	ldr	r3, [r3, #0]
   d41ee:	695b      	ldr	r3, [r3, #20]
   d41f0:	9301      	str	r3, [sp, #4]
   d41f2:	bd08      	pop	{r3, pc}
   d41f4:	00030264 	.word	0x00030264

000d41f8 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d41f8:	b508      	push	{r3, lr}
   d41fa:	4b02      	ldr	r3, [pc, #8]	; (d4204 <hal_usart_init+0xc>)
   d41fc:	681b      	ldr	r3, [r3, #0]
   d41fe:	681b      	ldr	r3, [r3, #0]
   d4200:	9301      	str	r3, [sp, #4]
   d4202:	bd08      	pop	{r3, pc}
   d4204:	0003023c 	.word	0x0003023c

000d4208 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d4208:	b508      	push	{r3, lr}
   d420a:	4b02      	ldr	r3, [pc, #8]	; (d4214 <hal_usart_write+0xc>)
   d420c:	681b      	ldr	r3, [r3, #0]
   d420e:	68db      	ldr	r3, [r3, #12]
   d4210:	9301      	str	r3, [sp, #4]
   d4212:	bd08      	pop	{r3, pc}
   d4214:	0003023c 	.word	0x0003023c

000d4218 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d4218:	b508      	push	{r3, lr}
   d421a:	4b02      	ldr	r3, [pc, #8]	; (d4224 <hal_usart_available+0xc>)
   d421c:	681b      	ldr	r3, [r3, #0]
   d421e:	691b      	ldr	r3, [r3, #16]
   d4220:	9301      	str	r3, [sp, #4]
   d4222:	bd08      	pop	{r3, pc}
   d4224:	0003023c 	.word	0x0003023c

000d4228 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d4228:	b508      	push	{r3, lr}
   d422a:	4b02      	ldr	r3, [pc, #8]	; (d4234 <hal_usart_read+0xc>)
   d422c:	681b      	ldr	r3, [r3, #0]
   d422e:	695b      	ldr	r3, [r3, #20]
   d4230:	9301      	str	r3, [sp, #4]
   d4232:	bd08      	pop	{r3, pc}
   d4234:	0003023c 	.word	0x0003023c

000d4238 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d4238:	b508      	push	{r3, lr}
   d423a:	4b02      	ldr	r3, [pc, #8]	; (d4244 <hal_usart_peek+0xc>)
   d423c:	681b      	ldr	r3, [r3, #0]
   d423e:	699b      	ldr	r3, [r3, #24]
   d4240:	9301      	str	r3, [sp, #4]
   d4242:	bd08      	pop	{r3, pc}
   d4244:	0003023c 	.word	0x0003023c

000d4248 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d4248:	b508      	push	{r3, lr}
   d424a:	4b02      	ldr	r3, [pc, #8]	; (d4254 <hal_usart_flush+0xc>)
   d424c:	681b      	ldr	r3, [r3, #0]
   d424e:	69db      	ldr	r3, [r3, #28]
   d4250:	9301      	str	r3, [sp, #4]
   d4252:	bd08      	pop	{r3, pc}
   d4254:	0003023c 	.word	0x0003023c

000d4258 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d4258:	b508      	push	{r3, lr}
   d425a:	4b02      	ldr	r3, [pc, #8]	; (d4264 <hal_usart_available_data_for_write+0xc>)
   d425c:	681b      	ldr	r3, [r3, #0]
   d425e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4260:	9301      	str	r3, [sp, #4]
   d4262:	bd08      	pop	{r3, pc}
   d4264:	0003023c 	.word	0x0003023c

000d4268 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4268:	b508      	push	{r3, lr}
   d426a:	4b02      	ldr	r3, [pc, #8]	; (d4274 <HAL_USB_USART_Init+0xc>)
   d426c:	681b      	ldr	r3, [r3, #0]
   d426e:	681b      	ldr	r3, [r3, #0]
   d4270:	9301      	str	r3, [sp, #4]
   d4272:	bd08      	pop	{r3, pc}
   d4274:	0003024c 	.word	0x0003024c

000d4278 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4278:	b508      	push	{r3, lr}
   d427a:	4b02      	ldr	r3, [pc, #8]	; (d4284 <HAL_USB_USART_Begin+0xc>)
   d427c:	681b      	ldr	r3, [r3, #0]
   d427e:	685b      	ldr	r3, [r3, #4]
   d4280:	9301      	str	r3, [sp, #4]
   d4282:	bd08      	pop	{r3, pc}
   d4284:	0003024c 	.word	0x0003024c

000d4288 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4288:	b508      	push	{r3, lr}
   d428a:	4b02      	ldr	r3, [pc, #8]	; (d4294 <HAL_USB_USART_Available_Data+0xc>)
   d428c:	681b      	ldr	r3, [r3, #0]
   d428e:	691b      	ldr	r3, [r3, #16]
   d4290:	9301      	str	r3, [sp, #4]
   d4292:	bd08      	pop	{r3, pc}
   d4294:	0003024c 	.word	0x0003024c

000d4298 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4298:	b508      	push	{r3, lr}
   d429a:	4b02      	ldr	r3, [pc, #8]	; (d42a4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d429c:	681b      	ldr	r3, [r3, #0]
   d429e:	695b      	ldr	r3, [r3, #20]
   d42a0:	9301      	str	r3, [sp, #4]
   d42a2:	bd08      	pop	{r3, pc}
   d42a4:	0003024c 	.word	0x0003024c

000d42a8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d42a8:	b508      	push	{r3, lr}
   d42aa:	4b02      	ldr	r3, [pc, #8]	; (d42b4 <HAL_USB_USART_Receive_Data+0xc>)
   d42ac:	681b      	ldr	r3, [r3, #0]
   d42ae:	699b      	ldr	r3, [r3, #24]
   d42b0:	9301      	str	r3, [sp, #4]
   d42b2:	bd08      	pop	{r3, pc}
   d42b4:	0003024c 	.word	0x0003024c

000d42b8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d42b8:	b508      	push	{r3, lr}
   d42ba:	4b02      	ldr	r3, [pc, #8]	; (d42c4 <HAL_USB_USART_Send_Data+0xc>)
   d42bc:	681b      	ldr	r3, [r3, #0]
   d42be:	69db      	ldr	r3, [r3, #28]
   d42c0:	9301      	str	r3, [sp, #4]
   d42c2:	bd08      	pop	{r3, pc}
   d42c4:	0003024c 	.word	0x0003024c

000d42c8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d42c8:	b508      	push	{r3, lr}
   d42ca:	4b02      	ldr	r3, [pc, #8]	; (d42d4 <HAL_USB_USART_Flush_Data+0xc>)
   d42cc:	681b      	ldr	r3, [r3, #0]
   d42ce:	6a1b      	ldr	r3, [r3, #32]
   d42d0:	9301      	str	r3, [sp, #4]
   d42d2:	bd08      	pop	{r3, pc}
   d42d4:	0003024c 	.word	0x0003024c

000d42d8 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d42d8:	b508      	push	{r3, lr}
   d42da:	4b02      	ldr	r3, [pc, #8]	; (d42e4 <system_mode+0xc>)
   d42dc:	681b      	ldr	r3, [r3, #0]
   d42de:	681b      	ldr	r3, [r3, #0]
   d42e0:	9301      	str	r3, [sp, #4]
   d42e2:	bd08      	pop	{r3, pc}
   d42e4:	00030220 	.word	0x00030220

000d42e8 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d42e8:	b508      	push	{r3, lr}
   d42ea:	4b02      	ldr	r3, [pc, #8]	; (d42f4 <set_system_mode+0xc>)
   d42ec:	681b      	ldr	r3, [r3, #0]
   d42ee:	685b      	ldr	r3, [r3, #4]
   d42f0:	9301      	str	r3, [sp, #4]
   d42f2:	bd08      	pop	{r3, pc}
   d42f4:	00030220 	.word	0x00030220

000d42f8 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d42f8:	b508      	push	{r3, lr}
   d42fa:	4b02      	ldr	r3, [pc, #8]	; (d4304 <application_thread_current+0xc>)
   d42fc:	681b      	ldr	r3, [r3, #0]
   d42fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4300:	9301      	str	r3, [sp, #4]
   d4302:	bd08      	pop	{r3, pc}
   d4304:	00030220 	.word	0x00030220

000d4308 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d4308:	b508      	push	{r3, lr}
   d430a:	4b02      	ldr	r3, [pc, #8]	; (d4314 <application_thread_invoke+0xc>)
   d430c:	681b      	ldr	r3, [r3, #0]
   d430e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4310:	9301      	str	r3, [sp, #4]
   d4312:	bd08      	pop	{r3, pc}
   d4314:	00030220 	.word	0x00030220

000d4318 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d4318:	b508      	push	{r3, lr}
   d431a:	4b02      	ldr	r3, [pc, #8]	; (d4324 <system_thread_get_state+0xc>)
   d431c:	681b      	ldr	r3, [r3, #0]
   d431e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d4320:	9301      	str	r3, [sp, #4]
   d4322:	bd08      	pop	{r3, pc}
   d4324:	00030220 	.word	0x00030220

000d4328 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4328:	b508      	push	{r3, lr}
   d432a:	4b03      	ldr	r3, [pc, #12]	; (d4338 <system_ctrl_set_app_request_handler+0x10>)
   d432c:	681b      	ldr	r3, [r3, #0]
   d432e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4332:	9301      	str	r3, [sp, #4]
   d4334:	bd08      	pop	{r3, pc}
   d4336:	0000      	.short	0x0000
   d4338:	00030220 	.word	0x00030220

000d433c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d433c:	b508      	push	{r3, lr}
   d433e:	4b03      	ldr	r3, [pc, #12]	; (d434c <system_ctrl_set_result+0x10>)
   d4340:	681b      	ldr	r3, [r3, #0]
   d4342:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4346:	9301      	str	r3, [sp, #4]
   d4348:	bd08      	pop	{r3, pc}
   d434a:	0000      	.short	0x0000
   d434c:	00030220 	.word	0x00030220

000d4350 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4350:	b508      	push	{r3, lr}
   d4352:	4b02      	ldr	r3, [pc, #8]	; (d435c <network_connect+0xc>)
   d4354:	681b      	ldr	r3, [r3, #0]
   d4356:	685b      	ldr	r3, [r3, #4]
   d4358:	9301      	str	r3, [sp, #4]
   d435a:	bd08      	pop	{r3, pc}
   d435c:	00030240 	.word	0x00030240

000d4360 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4360:	b508      	push	{r3, lr}
   d4362:	4b02      	ldr	r3, [pc, #8]	; (d436c <network_connecting+0xc>)
   d4364:	681b      	ldr	r3, [r3, #0]
   d4366:	689b      	ldr	r3, [r3, #8]
   d4368:	9301      	str	r3, [sp, #4]
   d436a:	bd08      	pop	{r3, pc}
   d436c:	00030240 	.word	0x00030240

000d4370 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4370:	b508      	push	{r3, lr}
   d4372:	4b02      	ldr	r3, [pc, #8]	; (d437c <network_disconnect+0xc>)
   d4374:	681b      	ldr	r3, [r3, #0]
   d4376:	68db      	ldr	r3, [r3, #12]
   d4378:	9301      	str	r3, [sp, #4]
   d437a:	bd08      	pop	{r3, pc}
   d437c:	00030240 	.word	0x00030240

000d4380 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4380:	b508      	push	{r3, lr}
   d4382:	4b02      	ldr	r3, [pc, #8]	; (d438c <network_ready+0xc>)
   d4384:	681b      	ldr	r3, [r3, #0]
   d4386:	691b      	ldr	r3, [r3, #16]
   d4388:	9301      	str	r3, [sp, #4]
   d438a:	bd08      	pop	{r3, pc}
   d438c:	00030240 	.word	0x00030240

000d4390 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4390:	b508      	push	{r3, lr}
   d4392:	4b02      	ldr	r3, [pc, #8]	; (d439c <network_on+0xc>)
   d4394:	681b      	ldr	r3, [r3, #0]
   d4396:	695b      	ldr	r3, [r3, #20]
   d4398:	9301      	str	r3, [sp, #4]
   d439a:	bd08      	pop	{r3, pc}
   d439c:	00030240 	.word	0x00030240

000d43a0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d43a0:	b508      	push	{r3, lr}
   d43a2:	4b02      	ldr	r3, [pc, #8]	; (d43ac <network_off+0xc>)
   d43a4:	681b      	ldr	r3, [r3, #0]
   d43a6:	699b      	ldr	r3, [r3, #24]
   d43a8:	9301      	str	r3, [sp, #4]
   d43aa:	bd08      	pop	{r3, pc}
   d43ac:	00030240 	.word	0x00030240

000d43b0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d43b0:	b508      	push	{r3, lr}
   d43b2:	4b02      	ldr	r3, [pc, #8]	; (d43bc <network_listen+0xc>)
   d43b4:	681b      	ldr	r3, [r3, #0]
   d43b6:	69db      	ldr	r3, [r3, #28]
   d43b8:	9301      	str	r3, [sp, #4]
   d43ba:	bd08      	pop	{r3, pc}
   d43bc:	00030240 	.word	0x00030240

000d43c0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d43c0:	b508      	push	{r3, lr}
   d43c2:	4b02      	ldr	r3, [pc, #8]	; (d43cc <network_listening+0xc>)
   d43c4:	681b      	ldr	r3, [r3, #0]
   d43c6:	6a1b      	ldr	r3, [r3, #32]
   d43c8:	9301      	str	r3, [sp, #4]
   d43ca:	bd08      	pop	{r3, pc}
   d43cc:	00030240 	.word	0x00030240

000d43d0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d43d0:	b508      	push	{r3, lr}
   d43d2:	4b02      	ldr	r3, [pc, #8]	; (d43dc <network_set_listen_timeout+0xc>)
   d43d4:	681b      	ldr	r3, [r3, #0]
   d43d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d43d8:	9301      	str	r3, [sp, #4]
   d43da:	bd08      	pop	{r3, pc}
   d43dc:	00030240 	.word	0x00030240

000d43e0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d43e0:	b508      	push	{r3, lr}
   d43e2:	4b02      	ldr	r3, [pc, #8]	; (d43ec <network_get_listen_timeout+0xc>)
   d43e4:	681b      	ldr	r3, [r3, #0]
   d43e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d43e8:	9301      	str	r3, [sp, #4]
   d43ea:	bd08      	pop	{r3, pc}
   d43ec:	00030240 	.word	0x00030240

000d43f0 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d43f0:	b508      	push	{r3, lr}
   d43f2:	4b02      	ldr	r3, [pc, #8]	; (d43fc <network_is_on+0xc>)
   d43f4:	681b      	ldr	r3, [r3, #0]
   d43f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d43f8:	9301      	str	r3, [sp, #4]
   d43fa:	bd08      	pop	{r3, pc}
   d43fc:	00030240 	.word	0x00030240

000d4400 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d4400:	b508      	push	{r3, lr}
   d4402:	4b02      	ldr	r3, [pc, #8]	; (d440c <network_is_off+0xc>)
   d4404:	681b      	ldr	r3, [r3, #0]
   d4406:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4408:	9301      	str	r3, [sp, #4]
   d440a:	bd08      	pop	{r3, pc}
   d440c:	00030240 	.word	0x00030240

000d4410 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d4410:	b508      	push	{r3, lr}
   d4412:	4b02      	ldr	r3, [pc, #8]	; (d441c <spark_process+0xc>)
   d4414:	681b      	ldr	r3, [r3, #0]
   d4416:	689b      	ldr	r3, [r3, #8]
   d4418:	9301      	str	r3, [sp, #4]
   d441a:	bd08      	pop	{r3, pc}
   d441c:	00030244 	.word	0x00030244

000d4420 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d4420:	b508      	push	{r3, lr}
   d4422:	4b02      	ldr	r3, [pc, #8]	; (d442c <spark_cloud_flag_connected+0xc>)
   d4424:	681b      	ldr	r3, [r3, #0]
   d4426:	695b      	ldr	r3, [r3, #20]
   d4428:	9301      	str	r3, [sp, #4]
   d442a:	bd08      	pop	{r3, pc}
   d442c:	00030244 	.word	0x00030244

000d4430 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d4430:	b508      	push	{r3, lr}
   d4432:	4b02      	ldr	r3, [pc, #8]	; (d443c <spark_send_event+0xc>)
   d4434:	681b      	ldr	r3, [r3, #0]
   d4436:	6a1b      	ldr	r3, [r3, #32]
   d4438:	9301      	str	r3, [sp, #4]
   d443a:	bd08      	pop	{r3, pc}
   d443c:	00030244 	.word	0x00030244

000d4440 <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d4440:	b508      	push	{r3, lr}
   d4442:	4b02      	ldr	r3, [pc, #8]	; (d444c <spark_sync_time_pending+0xc>)
   d4444:	681b      	ldr	r3, [r3, #0]
   d4446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4448:	9301      	str	r3, [sp, #4]
   d444a:	bd08      	pop	{r3, pc}
   d444c:	00030244 	.word	0x00030244

000d4450 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4450:	b508      	push	{r3, lr}
   d4452:	4b02      	ldr	r3, [pc, #8]	; (d445c <spark_set_random_seed_from_cloud_handler+0xc>)
   d4454:	681b      	ldr	r3, [r3, #0]
   d4456:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4458:	9301      	str	r3, [sp, #4]
   d445a:	bd08      	pop	{r3, pc}
   d445c:	00030244 	.word	0x00030244

000d4460 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4460:	b508      	push	{r3, lr}
   d4462:	4b02      	ldr	r3, [pc, #8]	; (d446c <malloc+0xc>)
   d4464:	681b      	ldr	r3, [r3, #0]
   d4466:	681b      	ldr	r3, [r3, #0]
   d4468:	9301      	str	r3, [sp, #4]
   d446a:	bd08      	pop	{r3, pc}
   d446c:	0003021c 	.word	0x0003021c

000d4470 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4470:	b508      	push	{r3, lr}
   d4472:	4b02      	ldr	r3, [pc, #8]	; (d447c <free+0xc>)
   d4474:	681b      	ldr	r3, [r3, #0]
   d4476:	685b      	ldr	r3, [r3, #4]
   d4478:	9301      	str	r3, [sp, #4]
   d447a:	bd08      	pop	{r3, pc}
   d447c:	0003021c 	.word	0x0003021c

000d4480 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4480:	b508      	push	{r3, lr}
   d4482:	4b02      	ldr	r3, [pc, #8]	; (d448c <realloc+0xc>)
   d4484:	681b      	ldr	r3, [r3, #0]
   d4486:	689b      	ldr	r3, [r3, #8]
   d4488:	9301      	str	r3, [sp, #4]
   d448a:	bd08      	pop	{r3, pc}
   d448c:	0003021c 	.word	0x0003021c

000d4490 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d4490:	b508      	push	{r3, lr}
   d4492:	4b02      	ldr	r3, [pc, #8]	; (d449c <vsnprintf+0xc>)
   d4494:	681b      	ldr	r3, [r3, #0]
   d4496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4498:	9301      	str	r3, [sp, #4]
   d449a:	bd08      	pop	{r3, pc}
   d449c:	0003021c 	.word	0x0003021c

000d44a0 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d44a0:	b508      	push	{r3, lr}
   d44a2:	4b02      	ldr	r3, [pc, #8]	; (d44ac <abort+0xc>)
   d44a4:	681b      	ldr	r3, [r3, #0]
   d44a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d44a8:	9301      	str	r3, [sp, #4]
   d44aa:	bd08      	pop	{r3, pc}
   d44ac:	0003021c 	.word	0x0003021c

000d44b0 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d44b0:	b508      	push	{r3, lr}
   d44b2:	4b02      	ldr	r3, [pc, #8]	; (d44bc <_malloc_r+0xc>)
   d44b4:	681b      	ldr	r3, [r3, #0]
   d44b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d44b8:	9301      	str	r3, [sp, #4]
   d44ba:	bd08      	pop	{r3, pc}
   d44bc:	0003021c 	.word	0x0003021c

000d44c0 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d44c0:	b508      	push	{r3, lr}
   d44c2:	4b02      	ldr	r3, [pc, #8]	; (d44cc <newlib_impure_ptr_callback+0xc>)
   d44c4:	681b      	ldr	r3, [r3, #0]
   d44c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d44c8:	9301      	str	r3, [sp, #4]
   d44ca:	bd08      	pop	{r3, pc}
   d44cc:	0003021c 	.word	0x0003021c

000d44d0 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d44d0:	2200      	movs	r2, #0
   d44d2:	6840      	ldr	r0, [r0, #4]
   d44d4:	4611      	mov	r1, r2
   d44d6:	f7ff bf73 	b.w	d43c0 <network_listening>

000d44da <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d44da:	2200      	movs	r2, #0
   d44dc:	6840      	ldr	r0, [r0, #4]
   d44de:	4611      	mov	r1, r2
   d44e0:	f7ff bf7e 	b.w	d43e0 <network_get_listen_timeout>

000d44e4 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d44e4:	6840      	ldr	r0, [r0, #4]
   d44e6:	2200      	movs	r2, #0
   d44e8:	f7ff bf72 	b.w	d43d0 <network_set_listen_timeout>

000d44ec <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d44ec:	6840      	ldr	r0, [r0, #4]
   d44ee:	2200      	movs	r2, #0
   d44f0:	f081 0101 	eor.w	r1, r1, #1
   d44f4:	f7ff bf5c 	b.w	d43b0 <network_listen>

000d44f8 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d44f8:	2300      	movs	r3, #0
   d44fa:	6840      	ldr	r0, [r0, #4]
   d44fc:	461a      	mov	r2, r3
   d44fe:	4619      	mov	r1, r3
   d4500:	f7ff bf4e 	b.w	d43a0 <network_off>

000d4504 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d4504:	2300      	movs	r3, #0
   d4506:	6840      	ldr	r0, [r0, #4]
   d4508:	461a      	mov	r2, r3
   d450a:	4619      	mov	r1, r3
   d450c:	f7ff bf40 	b.w	d4390 <network_on>

000d4510 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4510:	2200      	movs	r2, #0
   d4512:	6840      	ldr	r0, [r0, #4]
   d4514:	4611      	mov	r1, r2
   d4516:	f7ff bf33 	b.w	d4380 <network_ready>

000d451a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d451a:	2200      	movs	r2, #0
   d451c:	6840      	ldr	r0, [r0, #4]
   d451e:	4611      	mov	r1, r2
   d4520:	f7ff bf1e 	b.w	d4360 <network_connecting>

000d4524 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4524:	6840      	ldr	r0, [r0, #4]
   d4526:	2200      	movs	r2, #0
   d4528:	2102      	movs	r1, #2
   d452a:	f7ff bf21 	b.w	d4370 <network_disconnect>

000d452e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d452e:	2300      	movs	r3, #0
   d4530:	6840      	ldr	r0, [r0, #4]
   d4532:	461a      	mov	r2, r3
   d4534:	f7ff bf0c 	b.w	d4350 <network_connect>

000d4538 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4538:	4b02      	ldr	r3, [pc, #8]	; (d4544 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d453a:	2203      	movs	r2, #3
   d453c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d453e:	4a02      	ldr	r2, [pc, #8]	; (d4548 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4540:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d4542:	4770      	bx	lr
   d4544:	2003e5cc 	.word	0x2003e5cc
   d4548:	000d56dc 	.word	0x000d56dc

000d454c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d454c:	4b05      	ldr	r3, [pc, #20]	; (d4564 <_GLOBAL__sub_I_System+0x18>)
   d454e:	2202      	movs	r2, #2
   d4550:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4552:	4b05      	ldr	r3, [pc, #20]	; (d4568 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   d4554:	4a05      	ldr	r2, [pc, #20]	; (d456c <_GLOBAL__sub_I_System+0x20>)
   d4556:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   d4558:	2000      	movs	r0, #0
   d455a:	6018      	str	r0, [r3, #0]
   d455c:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
   d455e:	7198      	strb	r0, [r3, #6]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4560:	f7ff bec2 	b.w	d42e8 <set_system_mode>
   d4564:	2003e5e0 	.word	0x2003e5e0
   d4568:	2003e5d4 	.word	0x2003e5d4
   d456c:	ffff0000 	.word	0xffff0000

000d4570 <ltoa>:



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   d4570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
   d4574:	1e93      	subs	r3, r2, #2
{
   d4576:	b08c      	sub	sp, #48	; 0x30
      if (36 < base || 2 > base)
   d4578:	2b22      	cmp	r3, #34	; 0x22
   d457a:	f04f 0300 	mov.w	r3, #0
{
   d457e:	460d      	mov	r5, r1
   d4580:	4614      	mov	r4, r2
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
   d4582:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
      if (36 < base || 2 > base)
   d4586:	d927      	bls.n	d45d8 <ltoa+0x68>

      if (10 == base && N < 0L)
   d4588:	2800      	cmp	r0, #0
   d458a:	da2a      	bge.n	d45e2 <ltoa+0x72>
      {
            *head++ = '-';
   d458c:	462e      	mov	r6, r5
   d458e:	232d      	movs	r3, #45	; 0x2d
   d4590:	f806 3b01 	strb.w	r3, [r6], #1
            uarg    = -N;
   d4594:	4240      	negs	r0, r0
   d4596:	240a      	movs	r4, #10
      *tail-- = '\0';
   d4598:	f10d 072b 	add.w	r7, sp, #43	; 0x2b
      }
      else  uarg = N;

      if (uarg)
      {
            for (i = 1; uarg; ++i)
   d459c:	f04f 0801 	mov.w	r8, #1
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
   d45a0:	4622      	mov	r2, r4
   d45a2:	4601      	mov	r1, r0
   d45a4:	a801      	add	r0, sp, #4
   d45a6:	f000 ff86 	bl	d54b6 <ldiv>
   d45aa:	9b02      	ldr	r3, [sp, #8]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
   d45ac:	9801      	ldr	r0, [sp, #4]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
   d45ae:	2b09      	cmp	r3, #9
   d45b0:	bfcc      	ite	gt
   d45b2:	2237      	movgt	r2, #55	; 0x37
   d45b4:	2230      	movle	r2, #48	; 0x30
   d45b6:	fa52 f383 	uxtab	r3, r2, r3
   d45ba:	f807 3901 	strb.w	r3, [r7], #-1
            for (i = 1; uarg; ++i)
   d45be:	f108 0801 	add.w	r8, r8, #1
   d45c2:	2800      	cmp	r0, #0
   d45c4:	d1ec      	bne.n	d45a0 <ltoa+0x30>
            }
      }
      else  *tail-- = '0';

      memcpy(head, ++tail, i);
   d45c6:	4642      	mov	r2, r8
   d45c8:	1c79      	adds	r1, r7, #1
   d45ca:	4630      	mov	r0, r6
   d45cc:	f000 ff87 	bl	d54de <memcpy>
      return str;
}
   d45d0:	4628      	mov	r0, r5
   d45d2:	b00c      	add	sp, #48	; 0x30
   d45d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (10 == base && N < 0L)
   d45d8:	2a0a      	cmp	r2, #10
   d45da:	d0d5      	beq.n	d4588 <ltoa+0x18>
      if (uarg)
   d45dc:	b118      	cbz	r0, d45e6 <ltoa+0x76>
   d45de:	462e      	mov	r6, r5
   d45e0:	e7da      	b.n	d4598 <ltoa+0x28>
   d45e2:	240a      	movs	r4, #10
   d45e4:	e7fa      	b.n	d45dc <ltoa+0x6c>
      else  *tail-- = '0';
   d45e6:	2330      	movs	r3, #48	; 0x30
   d45e8:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
   d45ec:	462e      	mov	r6, r5
   d45ee:	f10d 072a 	add.w	r7, sp, #42	; 0x2a
      int i = 2;
   d45f2:	f04f 0802 	mov.w	r8, #2
   d45f6:	e7e6      	b.n	d45c6 <ltoa+0x56>

000d45f8 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d45f8:	b510      	push	{r4, lr}
   d45fa:	4604      	mov	r4, r0
{
	free(buffer);
   d45fc:	6800      	ldr	r0, [r0, #0]
   d45fe:	f7ff ff37 	bl	d4470 <free>
}
   d4602:	4620      	mov	r0, r4
   d4604:	bd10      	pop	{r4, pc}

000d4606 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d4606:	b510      	push	{r4, lr}
   d4608:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d460a:	6800      	ldr	r0, [r0, #0]
   d460c:	b108      	cbz	r0, d4612 <_ZN6String10invalidateEv+0xc>
   d460e:	f7ff ff2f 	bl	d4470 <free>
	buffer = NULL;
   d4612:	2300      	movs	r3, #0
	capacity = len = 0;
   d4614:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d4618:	6023      	str	r3, [r4, #0]
}
   d461a:	bd10      	pop	{r4, pc}

000d461c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d461c:	b538      	push	{r3, r4, r5, lr}
   d461e:	4604      	mov	r4, r0
   d4620:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d4622:	6800      	ldr	r0, [r0, #0]
   d4624:	3101      	adds	r1, #1
   d4626:	f7ff ff2b 	bl	d4480 <realloc>
	if (newbuffer) {
   d462a:	b110      	cbz	r0, d4632 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d462c:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d4630:	2001      	movs	r0, #1
	}
	return 0;
}
   d4632:	bd38      	pop	{r3, r4, r5, pc}

000d4634 <_ZN6String7reserveEj>:
{
   d4634:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d4636:	6803      	ldr	r3, [r0, #0]
{
   d4638:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d463a:	b123      	cbz	r3, d4646 <_ZN6String7reserveEj+0x12>
   d463c:	6843      	ldr	r3, [r0, #4]
   d463e:	428b      	cmp	r3, r1
   d4640:	d301      	bcc.n	d4646 <_ZN6String7reserveEj+0x12>
   d4642:	2001      	movs	r0, #1
}
   d4644:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d4646:	4620      	mov	r0, r4
   d4648:	f7ff ffe8 	bl	d461c <_ZN6String12changeBufferEj>
   d464c:	2800      	cmp	r0, #0
   d464e:	d0f9      	beq.n	d4644 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d4650:	68a3      	ldr	r3, [r4, #8]
   d4652:	2b00      	cmp	r3, #0
   d4654:	d1f5      	bne.n	d4642 <_ZN6String7reserveEj+0xe>
   d4656:	6822      	ldr	r2, [r4, #0]
   d4658:	7013      	strb	r3, [r2, #0]
   d465a:	e7f2      	b.n	d4642 <_ZN6String7reserveEj+0xe>

000d465c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d465c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d465e:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d4660:	4611      	mov	r1, r2
   d4662:	9201      	str	r2, [sp, #4]
{
   d4664:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d4666:	f7ff ffe5 	bl	d4634 <_ZN6String7reserveEj>
   d466a:	9a01      	ldr	r2, [sp, #4]
   d466c:	b928      	cbnz	r0, d467a <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d466e:	4620      	mov	r0, r4
   d4670:	f7ff ffc9 	bl	d4606 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d4674:	4620      	mov	r0, r4
   d4676:	b003      	add	sp, #12
   d4678:	bd30      	pop	{r4, r5, pc}
	len = length;
   d467a:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d467c:	4629      	mov	r1, r5
   d467e:	6820      	ldr	r0, [r4, #0]
   d4680:	f000 ff2d 	bl	d54de <memcpy>
	buffer[len] = 0;
   d4684:	6822      	ldr	r2, [r4, #0]
   d4686:	68a3      	ldr	r3, [r4, #8]
   d4688:	2100      	movs	r1, #0
   d468a:	54d1      	strb	r1, [r2, r3]
	return *this;
   d468c:	e7f2      	b.n	d4674 <_ZN6String4copyEPKcj+0x18>

000d468e <_ZN6StringC1EPKc>:
	buffer = NULL;
   d468e:	2300      	movs	r3, #0
String::String(const char *cstr)
   d4690:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d4692:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d4696:	4604      	mov	r4, r0
	len = 0;
   d4698:	6083      	str	r3, [r0, #8]
	flags = 0;
   d469a:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d469c:	b141      	cbz	r1, d46b0 <_ZN6StringC1EPKc+0x22>
   d469e:	4608      	mov	r0, r1
   d46a0:	9101      	str	r1, [sp, #4]
   d46a2:	f000 ff74 	bl	d558e <strlen>
   d46a6:	9901      	ldr	r1, [sp, #4]
   d46a8:	4602      	mov	r2, r0
   d46aa:	4620      	mov	r0, r4
   d46ac:	f7ff ffd6 	bl	d465c <_ZN6String4copyEPKcj>
}
   d46b0:	4620      	mov	r0, r4
   d46b2:	b002      	add	sp, #8
   d46b4:	bd10      	pop	{r4, pc}

000d46b6 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d46b6:	b513      	push	{r0, r1, r4, lr}
   d46b8:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d46ba:	b159      	cbz	r1, d46d4 <_ZN6StringaSEPKc+0x1e>
   d46bc:	4608      	mov	r0, r1
   d46be:	9101      	str	r1, [sp, #4]
   d46c0:	f000 ff65 	bl	d558e <strlen>
   d46c4:	9901      	ldr	r1, [sp, #4]
   d46c6:	4602      	mov	r2, r0
   d46c8:	4620      	mov	r0, r4
   d46ca:	f7ff ffc7 	bl	d465c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d46ce:	4620      	mov	r0, r4
   d46d0:	b002      	add	sp, #8
   d46d2:	bd10      	pop	{r4, pc}
	else invalidate();
   d46d4:	f7ff ff97 	bl	d4606 <_ZN6String10invalidateEv>
   d46d8:	e7f9      	b.n	d46ce <_ZN6StringaSEPKc+0x18>

000d46da <_ZN6StringC1Elh>:
String::String(long value, unsigned char base)
   d46da:	b510      	push	{r4, lr}
   d46dc:	4604      	mov	r4, r0
   d46de:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   d46e0:	2300      	movs	r3, #0
	capacity = 0;
   d46e2:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   d46e6:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d46e8:	7323      	strb	r3, [r4, #12]
String::String(long value, unsigned char base)
   d46ea:	4608      	mov	r0, r1
	ltoa(value, buf, base);
   d46ec:	a901      	add	r1, sp, #4
   d46ee:	f7ff ff3f 	bl	d4570 <ltoa>
	*this = buf;
   d46f2:	a901      	add	r1, sp, #4
   d46f4:	4620      	mov	r0, r4
   d46f6:	f7ff ffde 	bl	d46b6 <_ZN6StringaSEPKc>
}
   d46fa:	4620      	mov	r0, r4
   d46fc:	b00a      	add	sp, #40	; 0x28
   d46fe:	bd10      	pop	{r4, pc}

000d4700 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   d4700:	b40e      	push	{r1, r2, r3}
   d4702:	b570      	push	{r4, r5, r6, lr}
   d4704:	b087      	sub	sp, #28
   d4706:	ad0b      	add	r5, sp, #44	; 0x2c
   d4708:	4604      	mov	r4, r0
   d470a:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d470e:	9201      	str	r2, [sp, #4]
   d4710:	462b      	mov	r3, r5
   d4712:	2105      	movs	r1, #5
   d4714:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   d4716:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d4718:	f7ff feba 	bl	d4490 <vsnprintf>
    va_end(marker);

    String result;
   d471c:	490b      	ldr	r1, [pc, #44]	; (d474c <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d471e:	4606      	mov	r6, r0
    String result;
   d4720:	4620      	mov	r0, r4
   d4722:	f7ff ffb4 	bl	d468e <_ZN6StringC1EPKc>
    result.reserve(n);  // internally adds +1 for null terminator
   d4726:	4631      	mov	r1, r6
   d4728:	4620      	mov	r0, r4
   d472a:	f7ff ff83 	bl	d4634 <_ZN6String7reserveEj>
    if (result.buffer) {
   d472e:	6820      	ldr	r0, [r4, #0]
   d4730:	b130      	cbz	r0, d4740 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d4732:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   d4734:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d4736:	462b      	mov	r3, r5
   d4738:	1c71      	adds	r1, r6, #1
   d473a:	f7ff fea9 	bl	d4490 <vsnprintf>
        va_end(marker);
        result.len = n;
   d473e:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   d4740:	4620      	mov	r0, r4
   d4742:	b007      	add	sp, #28
   d4744:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d4748:	b003      	add	sp, #12
   d474a:	4770      	bx	lr
   d474c:	000d5687 	.word	0x000d5687

000d4750 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4750:	b510      	push	{r4, lr}
          _M_dispose();
   d4752:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4754:	4604      	mov	r4, r0
          _M_dispose();
   d4756:	689b      	ldr	r3, [r3, #8]
   d4758:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d475a:	68a3      	ldr	r3, [r4, #8]
   d475c:	3b01      	subs	r3, #1
   d475e:	60a3      	str	r3, [r4, #8]
   d4760:	b92b      	cbnz	r3, d476e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d4762:	6823      	ldr	r3, [r4, #0]
   d4764:	4620      	mov	r0, r4
   d4766:	68db      	ldr	r3, [r3, #12]
    }
   d4768:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d476c:	4718      	bx	r3
    }
   d476e:	bd10      	pop	{r4, pc}

000d4770 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d4770:	680b      	ldr	r3, [r1, #0]
   d4772:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d4774:	b113      	cbz	r3, d477c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d4776:	685a      	ldr	r2, [r3, #4]
   d4778:	3201      	adds	r2, #1
   d477a:	605a      	str	r2, [r3, #4]
	  _M_pi->_M_add_ref_copy();
      }
   d477c:	4770      	bx	lr

000d477e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   d477e:	b510      	push	{r4, lr}
   d4780:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   d4782:	6800      	ldr	r0, [r0, #0]
   d4784:	b128      	cbz	r0, d4792 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
      if (--_M_use_count == 0)
   d4786:	6843      	ldr	r3, [r0, #4]
   d4788:	3b01      	subs	r3, #1
   d478a:	6043      	str	r3, [r0, #4]
   d478c:	b90b      	cbnz	r3, d4792 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d478e:	f7ff ffdf 	bl	d4750 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
      }
   d4792:	4620      	mov	r0, r4
   d4794:	bd10      	pop	{r4, pc}
	...

000d4798 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4798:	4802      	ldr	r0, [pc, #8]	; (d47a4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d479a:	2300      	movs	r3, #0
   d479c:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d479e:	f7ff bd1b 	b.w	d41d8 <os_mutex_recursive_create>
   d47a2:	bf00      	nop
   d47a4:	2003e5e4 	.word	0x2003e5e4

000d47a8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d47a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d47aa:	4606      	mov	r6, r0
   d47ac:	460d      	mov	r5, r1
  size_t n = 0;
   d47ae:	188f      	adds	r7, r1, r2
   d47b0:	2400      	movs	r4, #0
  while (size--) {
   d47b2:	42bd      	cmp	r5, r7
   d47b4:	d00c      	beq.n	d47d0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d47b6:	6833      	ldr	r3, [r6, #0]
   d47b8:	f815 1b01 	ldrb.w	r1, [r5], #1
   d47bc:	689b      	ldr	r3, [r3, #8]
   d47be:	4630      	mov	r0, r6
   d47c0:	4798      	blx	r3
     if (chunk>=0)
   d47c2:	1e03      	subs	r3, r0, #0
   d47c4:	db01      	blt.n	d47ca <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d47c6:	441c      	add	r4, r3
  while (size--) {
   d47c8:	e7f3      	b.n	d47b2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d47ca:	2c00      	cmp	r4, #0
   d47cc:	bf08      	it	eq
   d47ce:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d47d0:	4620      	mov	r0, r4
   d47d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d47d4 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d47d4:	b513      	push	{r0, r1, r4, lr}
   d47d6:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d47d8:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d47da:	b159      	cbz	r1, d47f4 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d47dc:	9101      	str	r1, [sp, #4]
   d47de:	f000 fed6 	bl	d558e <strlen>
   d47e2:	6823      	ldr	r3, [r4, #0]
   d47e4:	9901      	ldr	r1, [sp, #4]
   d47e6:	68db      	ldr	r3, [r3, #12]
   d47e8:	4602      	mov	r2, r0
   d47ea:	4620      	mov	r0, r4
    }
   d47ec:	b002      	add	sp, #8
   d47ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d47f2:	4718      	bx	r3
    }
   d47f4:	b002      	add	sp, #8
   d47f6:	bd10      	pop	{r4, pc}

000d47f8 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d47f8:	b508      	push	{r3, lr}
  return write(str);
   d47fa:	f7ff ffeb 	bl	d47d4 <_ZN5Print5writeEPKc>
}
   d47fe:	bd08      	pop	{r3, pc}

000d4800 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d4800:	6803      	ldr	r3, [r0, #0]
   d4802:	689b      	ldr	r3, [r3, #8]
   d4804:	4718      	bx	r3

000d4806 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4806:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d4808:	210d      	movs	r1, #13
{
   d480a:	4605      	mov	r5, r0
  size_t n = print('\r');
   d480c:	f7ff fff8 	bl	d4800 <_ZN5Print5printEc>
  n += print('\n');
   d4810:	210a      	movs	r1, #10
  size_t n = print('\r');
   d4812:	4604      	mov	r4, r0
  n += print('\n');
   d4814:	4628      	mov	r0, r5
   d4816:	f7ff fff3 	bl	d4800 <_ZN5Print5printEc>
  return n;
}
   d481a:	4420      	add	r0, r4
   d481c:	bd38      	pop	{r3, r4, r5, pc}

000d481e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d481e:	b538      	push	{r3, r4, r5, lr}
   d4820:	4605      	mov	r5, r0
  return write(str);
   d4822:	f7ff ffd7 	bl	d47d4 <_ZN5Print5writeEPKc>
   d4826:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d4828:	4628      	mov	r0, r5
   d482a:	f7ff ffec 	bl	d4806 <_ZN5Print7printlnEv>
  return n;
}
   d482e:	4420      	add	r0, r4
   d4830:	bd38      	pop	{r3, r4, r5, pc}

000d4832 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d4832:	b530      	push	{r4, r5, lr}
   d4834:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d4836:	2300      	movs	r3, #0
   d4838:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d483c:	2a01      	cmp	r2, #1
   d483e:	bf98      	it	ls
   d4840:	220a      	movls	r2, #10
   d4842:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d4844:	460d      	mov	r5, r1
   d4846:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d484a:	fb01 5312 	mls	r3, r1, r2, r5
   d484e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4852:	2b09      	cmp	r3, #9
   d4854:	bf94      	ite	ls
   d4856:	3330      	addls	r3, #48	; 0x30
   d4858:	3337      	addhi	r3, #55	; 0x37
   d485a:	b2db      	uxtb	r3, r3
  } while(n);
   d485c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d485e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d4862:	d9ef      	bls.n	d4844 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d4864:	4621      	mov	r1, r4
   d4866:	f7ff ffb5 	bl	d47d4 <_ZN5Print5writeEPKc>
}
   d486a:	b00b      	add	sp, #44	; 0x2c
   d486c:	bd30      	pop	{r4, r5, pc}
	...

000d4870 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d4870:	4b01      	ldr	r3, [pc, #4]	; (d4878 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d4872:	4a02      	ldr	r2, [pc, #8]	; (d487c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4874:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d4876:	4770      	bx	lr
   d4878:	2003e5e8 	.word	0x2003e5e8
   d487c:	000d5710 	.word	0x000d5710

000d4880 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d4880:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d4882:	2000      	movs	r0, #0
   d4884:	f7ff fddc 	bl	d4440 <spark_sync_time_pending>
   d4888:	b128      	cbz	r0, d4896 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d488a:	f7ff fdc9 	bl	d4420 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d488e:	f080 0001 	eor.w	r0, r0, #1
   d4892:	b2c0      	uxtb	r0, r0
    }
   d4894:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d4896:	2001      	movs	r0, #1
   d4898:	e7fc      	b.n	d4894 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000d489a <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d489a:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   d489c:	2000      	movs	r0, #0
   d489e:	f7ff fc8b 	bl	d41b8 <hal_rtc_time_is_valid>
    if (rtcstate)
   d48a2:	4604      	mov	r4, r0
   d48a4:	b9a0      	cbnz	r0, d48d0 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d48a6:	f7ff fd17 	bl	d42d8 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d48aa:	2801      	cmp	r0, #1
   d48ac:	d110      	bne.n	d48d0 <_ZN9TimeClass7isValidEv+0x36>
   d48ae:	4620      	mov	r0, r4
   d48b0:	f7ff fd32 	bl	d4318 <system_thread_get_state>
   d48b4:	b960      	cbnz	r0, d48d0 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   d48b6:	f7ff ffe3 	bl	d4880 <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d48ba:	b910      	cbnz	r0, d48c2 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   d48bc:	f7ff fda8 	bl	d4410 <spark_process>
        while (_while() && !_condition()) {
   d48c0:	e7f9      	b.n	d48b6 <_ZN9TimeClass7isValidEv+0x1c>
   d48c2:	f7ff ffdd 	bl	d4880 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   d48c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   d48ca:	2000      	movs	r0, #0
   d48cc:	f7ff bc74 	b.w	d41b8 <hal_rtc_time_is_valid>
}
   d48d0:	4620      	mov	r0, r4
   d48d2:	bd10      	pop	{r4, pc}

000d48d4 <_ZN9TimeClass3nowEv>:
{
   d48d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   d48d6:	f7ff ffe0 	bl	d489a <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   d48da:	2210      	movs	r2, #16
   d48dc:	2100      	movs	r1, #0
   d48de:	4668      	mov	r0, sp
   d48e0:	f000 fe0b 	bl	d54fa <memset>
    hal_rtc_get_time(&tv, nullptr);
   d48e4:	2100      	movs	r1, #0
   d48e6:	4668      	mov	r0, sp
   d48e8:	f7ff fc6e 	bl	d41c8 <hal_rtc_get_time>
}
   d48ec:	9800      	ldr	r0, [sp, #0]
   d48ee:	b005      	add	sp, #20
   d48f0:	f85d fb04 	ldr.w	pc, [sp], #4

000d48f4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d48f4:	4b02      	ldr	r3, [pc, #8]	; (d4900 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d48f6:	681a      	ldr	r2, [r3, #0]
   d48f8:	4b02      	ldr	r3, [pc, #8]	; (d4904 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d48fa:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d48fc:	4770      	bx	lr
   d48fe:	bf00      	nop
   d4900:	2003e55c 	.word	0x2003e55c
   d4904:	2003e5ec 	.word	0x2003e5ec

000d4908 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4908:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d490a:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d490c:	4604      	mov	r4, r0
      if (_M_manager)
   d490e:	b113      	cbz	r3, d4916 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4910:	2203      	movs	r2, #3
   d4912:	4601      	mov	r1, r0
   d4914:	4798      	blx	r3
    }
   d4916:	4620      	mov	r0, r4
   d4918:	bd10      	pop	{r4, pc}

000d491a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
   d491a:	b513      	push	{r0, r1, r4, lr}
   d491c:	460b      	mov	r3, r1
   d491e:	4602      	mov	r2, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4920:	e9d0 0100 	ldrd	r0, r1, [r0]
   d4924:	466c      	mov	r4, sp
   d4926:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d492a:	e893 0003 	ldmia.w	r3, {r0, r1}
   d492e:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d4932:	e894 0003 	ldmia.w	r4, {r0, r1}
   d4936:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d493a:	b002      	add	sp, #8
   d493c:	bd10      	pop	{r4, pc}
	...

000d4940 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d4940:	4b01      	ldr	r3, [pc, #4]	; (d4948 <_GLOBAL__sub_I_RGB+0x8>)
   d4942:	2200      	movs	r2, #0
   d4944:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   d4946:	4770      	bx	lr
   d4948:	2003e5f0 	.word	0x2003e5f0

000d494c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d494c:	4b01      	ldr	r3, [pc, #4]	; (d4954 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d494e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d4950:	4770      	bx	lr
   d4952:	bf00      	nop
   d4954:	2003e560 	.word	0x2003e560

000d4958 <serialEventRun>:
{
   d4958:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d495a:	4b0b      	ldr	r3, [pc, #44]	; (d4988 <serialEventRun+0x30>)
   d495c:	b143      	cbz	r3, d4970 <serialEventRun+0x18>
   d495e:	f000 fbfd 	bl	d515c <_Z16_fetch_usbserialv>
   d4962:	6803      	ldr	r3, [r0, #0]
   d4964:	691b      	ldr	r3, [r3, #16]
   d4966:	4798      	blx	r3
   d4968:	2800      	cmp	r0, #0
   d496a:	dd01      	ble.n	d4970 <serialEventRun+0x18>
        serialEvent();
   d496c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d4970:	4b06      	ldr	r3, [pc, #24]	; (d498c <serialEventRun+0x34>)
   d4972:	b143      	cbz	r3, d4986 <serialEventRun+0x2e>
   d4974:	f000 fc6c 	bl	d5250 <_Z22__fetch_global_Serial1v>
   d4978:	6803      	ldr	r3, [r0, #0]
   d497a:	691b      	ldr	r3, [r3, #16]
   d497c:	4798      	blx	r3
   d497e:	2800      	cmp	r0, #0
   d4980:	dd01      	ble.n	d4986 <serialEventRun+0x2e>
        serialEvent1();
   d4982:	f3af 8000 	nop.w
}
   d4986:	bd08      	pop	{r3, pc}
	...

000d4990 <_post_loop>:
{
   d4990:	b508      	push	{r3, lr}
	serialEventRun();
   d4992:	f7ff ffe1 	bl	d4958 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d4996:	f7ff fc07 	bl	d41a8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d499a:	4b01      	ldr	r3, [pc, #4]	; (d49a0 <_post_loop+0x10>)
   d499c:	6018      	str	r0, [r3, #0]
}
   d499e:	bd08      	pop	{r3, pc}
   d49a0:	2003e750 	.word	0x2003e750

000d49a4 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d49a4:	4805      	ldr	r0, [pc, #20]	; (d49bc <_Z33system_initialize_user_backup_ramv+0x18>)
   d49a6:	4a06      	ldr	r2, [pc, #24]	; (d49c0 <_Z33system_initialize_user_backup_ramv+0x1c>)
   d49a8:	4906      	ldr	r1, [pc, #24]	; (d49c4 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   d49aa:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d49ac:	1a12      	subs	r2, r2, r0
   d49ae:	f000 fd96 	bl	d54de <memcpy>
    __backup_sram_signature = signature;
   d49b2:	4b05      	ldr	r3, [pc, #20]	; (d49c8 <_Z33system_initialize_user_backup_ramv+0x24>)
   d49b4:	4a05      	ldr	r2, [pc, #20]	; (d49cc <_Z33system_initialize_user_backup_ramv+0x28>)
   d49b6:	601a      	str	r2, [r3, #0]
}
   d49b8:	bd08      	pop	{r3, pc}
   d49ba:	bf00      	nop
   d49bc:	2003f400 	.word	0x2003f400
   d49c0:	2003f404 	.word	0x2003f404
   d49c4:	000d5860 	.word	0x000d5860
   d49c8:	2003f400 	.word	0x2003f400
   d49cc:	9a271c1e 	.word	0x9a271c1e

000d49d0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d49d0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d49d2:	2300      	movs	r3, #0
   d49d4:	9300      	str	r3, [sp, #0]
   d49d6:	461a      	mov	r2, r3
   d49d8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d49dc:	f7ff fcae 	bl	d433c <system_ctrl_set_result>
}
   d49e0:	b003      	add	sp, #12
   d49e2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d49e8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d49e8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d49ea:	8843      	ldrh	r3, [r0, #2]
   d49ec:	2b0a      	cmp	r3, #10
   d49ee:	d008      	beq.n	d4a02 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d49f0:	2b50      	cmp	r3, #80	; 0x50
   d49f2:	d10b      	bne.n	d4a0c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d49f4:	4b09      	ldr	r3, [pc, #36]	; (d4a1c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d49f6:	681b      	ldr	r3, [r3, #0]
   d49f8:	b14b      	cbz	r3, d4a0e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d49fa:	b003      	add	sp, #12
   d49fc:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d4a00:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d4a02:	f7ff ffe5 	bl	d49d0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d4a06:	b003      	add	sp, #12
   d4a08:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4a0c:	2300      	movs	r3, #0
   d4a0e:	9300      	str	r3, [sp, #0]
   d4a10:	461a      	mov	r2, r3
   d4a12:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4a16:	f7ff fc91 	bl	d433c <system_ctrl_set_result>
}
   d4a1a:	e7f4      	b.n	d4a06 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d4a1c:	2003e604 	.word	0x2003e604

000d4a20 <module_user_init_hook>:
{
   d4a20:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d4a22:	4812      	ldr	r0, [pc, #72]	; (d4a6c <module_user_init_hook+0x4c>)
   d4a24:	2100      	movs	r1, #0
   d4a26:	f7ff fd4b 	bl	d44c0 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   d4a2a:	4b11      	ldr	r3, [pc, #68]	; (d4a70 <module_user_init_hook+0x50>)
   d4a2c:	681a      	ldr	r2, [r3, #0]
   d4a2e:	4b11      	ldr	r3, [pc, #68]	; (d4a74 <module_user_init_hook+0x54>)
   d4a30:	429a      	cmp	r2, r3
   d4a32:	4b11      	ldr	r3, [pc, #68]	; (d4a78 <module_user_init_hook+0x58>)
   d4a34:	bf0c      	ite	eq
   d4a36:	2201      	moveq	r2, #1
   d4a38:	2200      	movne	r2, #0
   d4a3a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d4a3c:	d001      	beq.n	d4a42 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   d4a3e:	f7ff ffb1 	bl	d49a4 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d4a42:	f7ff fba9 	bl	d4198 <HAL_RNG_GetRandomNumber>
   d4a46:	4604      	mov	r4, r0
    srand(seed);
   d4a48:	f000 fd60 	bl	d550c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d4a4c:	4b0b      	ldr	r3, [pc, #44]	; (d4a7c <module_user_init_hook+0x5c>)
   d4a4e:	b113      	cbz	r3, d4a56 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   d4a50:	4620      	mov	r0, r4
   d4a52:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d4a56:	2100      	movs	r1, #0
   d4a58:	4808      	ldr	r0, [pc, #32]	; (d4a7c <module_user_init_hook+0x5c>)
   d4a5a:	f7ff fcf9 	bl	d4450 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d4a5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4a62:	4807      	ldr	r0, [pc, #28]	; (d4a80 <module_user_init_hook+0x60>)
   d4a64:	2100      	movs	r1, #0
   d4a66:	f7ff bc5f 	b.w	d4328 <system_ctrl_set_app_request_handler>
   d4a6a:	bf00      	nop
   d4a6c:	000d494d 	.word	0x000d494d
   d4a70:	2003f400 	.word	0x2003f400
   d4a74:	9a271c1e 	.word	0x9a271c1e
   d4a78:	2003e600 	.word	0x2003e600
   d4a7c:	00000000 	.word	0x00000000
   d4a80:	000d49e9 	.word	0x000d49e9

000d4a84 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4a84:	4770      	bx	lr

000d4a86 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d4a86:	2000      	movs	r0, #0
   d4a88:	4770      	bx	lr

000d4a8a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4a8a:	b510      	push	{r4, lr}
   d4a8c:	2110      	movs	r1, #16
   d4a8e:	4604      	mov	r4, r0
   d4a90:	f000 fd06 	bl	d54a0 <_ZdlPvj>
   d4a94:	4620      	mov	r0, r4
   d4a96:	bd10      	pop	{r4, pc}

000d4a98 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d4a98:	b508      	push	{r3, lr}
      { delete this; }
   d4a9a:	f7ff fff6 	bl	d4a8a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d4a9e:	bd08      	pop	{r3, pc}

000d4aa0 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d4aa0:	b530      	push	{r4, r5, lr}
        type_(type) {
   d4aa2:	2200      	movs	r2, #0
   d4aa4:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d4aa8:	6002      	str	r2, [r0, #0]
   d4aaa:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   d4aac:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d4aae:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d4ab0:	680c      	ldr	r4, [r1, #0]
   d4ab2:	8085      	strh	r5, [r0, #4]
   d4ab4:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d4ab6:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d4ab8:	bd30      	pop	{r4, r5, pc}

000d4aba <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d4aba:	b510      	push	{r4, lr}
   d4abc:	4604      	mov	r4, r0
    free((void*)msg_);
   d4abe:	6800      	ldr	r0, [r0, #0]
   d4ac0:	f7ff fcd6 	bl	d4470 <free>
}
   d4ac4:	4620      	mov	r0, r4
   d4ac6:	bd10      	pop	{r4, pc}

000d4ac8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d4ac8:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d4aca:	68c4      	ldr	r4, [r0, #12]
   d4acc:	b1f4      	cbz	r4, d4b0c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d4ace:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d4ad0:	2b02      	cmp	r3, #2
   d4ad2:	d103      	bne.n	d4adc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d4ad4:	f104 000c 	add.w	r0, r4, #12
   d4ad8:	f7ff ffef 	bl	d4aba <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d4adc:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d4ade:	b135      	cbz	r5, d4aee <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4ae0:	4628      	mov	r0, r5
   d4ae2:	f7ff ff11 	bl	d4908 <_ZNSt14_Function_baseD1Ev>
   d4ae6:	2110      	movs	r1, #16
   d4ae8:	4628      	mov	r0, r5
   d4aea:	f000 fcd9 	bl	d54a0 <_ZdlPvj>
   d4aee:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d4af0:	b135      	cbz	r5, d4b00 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d4af2:	4628      	mov	r0, r5
   d4af4:	f7ff ff08 	bl	d4908 <_ZNSt14_Function_baseD1Ev>
   d4af8:	2110      	movs	r1, #16
   d4afa:	4628      	mov	r0, r5
   d4afc:	f000 fcd0 	bl	d54a0 <_ZdlPvj>
   d4b00:	4620      	mov	r0, r4
   d4b02:	2114      	movs	r1, #20
   d4b04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d4b08:	f000 bcca 	b.w	d54a0 <_ZdlPvj>
   d4b0c:	bd38      	pop	{r3, r4, r5, pc}

000d4b0e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d4b0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4b10:	460e      	mov	r6, r1
   d4b12:	4604      	mov	r4, r0
   d4b14:	f856 3b04 	ldr.w	r3, [r6], #4
   d4b18:	9300      	str	r3, [sp, #0]
   d4b1a:	460d      	mov	r5, r1
   d4b1c:	a801      	add	r0, sp, #4
   d4b1e:	4631      	mov	r1, r6
   d4b20:	f7ff fe26 	bl	d4770 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d4b24:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d4b26:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d4b28:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d4b2a:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d4b2c:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d4b2e:	2300      	movs	r3, #0
   d4b30:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d4b32:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d4b34:	f7ff fe23 	bl	d477e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4b38:	4630      	mov	r0, r6
   d4b3a:	f7ff fe20 	bl	d477e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d4b3e:	4628      	mov	r0, r5
   d4b40:	2108      	movs	r1, #8
   d4b42:	f000 fcad 	bl	d54a0 <_ZdlPvj>
        return p;
    }
   d4b46:	4620      	mov	r0, r4
   d4b48:	b002      	add	sp, #8
   d4b4a:	bd70      	pop	{r4, r5, r6, pc}

000d4b4c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4b4c:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d4b4e:	b510      	push	{r4, lr}
      if (_M_empty())
   d4b50:	b90a      	cbnz	r2, d4b56 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d4b52:	f000 fca7 	bl	d54a4 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    }
   d4b56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4b5a:	68c3      	ldr	r3, [r0, #12]
   d4b5c:	4718      	bx	r3

000d4b5e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4b5e:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d4b60:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d4b62:	f100 0110 	add.w	r1, r0, #16
   d4b66:	f7ff fff1 	bl	d4b4c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d4b6a:	bd08      	pop	{r3, pc}

000d4b6c <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d4b6c:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d4b6e:	b510      	push	{r4, lr}
      if (_M_empty())
   d4b70:	b90a      	cbnz	r2, d4b76 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d4b72:	f000 fc97 	bl	d54a4 <_ZSt25__throw_bad_function_callv>
    }
   d4b76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4b7a:	68c3      	ldr	r3, [r0, #12]
   d4b7c:	4718      	bx	r3

000d4b7e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4b7e:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d4b80:	6800      	ldr	r0, [r0, #0]
   d4b82:	f100 0110 	add.w	r1, r0, #16
   d4b86:	f7ff fff1 	bl	d4b6c <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d4b8a:	bd08      	pop	{r3, pc}

000d4b8c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d4b8c:	b538      	push	{r3, r4, r5, lr}
   d4b8e:	2300      	movs	r3, #0
   d4b90:	4604      	mov	r4, r0
   d4b92:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4b94:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d4b96:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4b98:	f7ff fa7b 	bl	d4092 <_Znwj>
   d4b9c:	b128      	cbz	r0, d4baa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d4b9e:	2301      	movs	r3, #1
   d4ba0:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d4ba4:	4b02      	ldr	r3, [pc, #8]	; (d4bb0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d4ba6:	6003      	str	r3, [r0, #0]
   d4ba8:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4baa:	6020      	str	r0, [r4, #0]
	}
   d4bac:	4620      	mov	r0, r4
   d4bae:	bd38      	pop	{r3, r4, r5, pc}
   d4bb0:	000d5738 	.word	0x000d5738

000d4bb4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d4bb4:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d4bb6:	2300      	movs	r3, #0
   d4bb8:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d4bba:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d4bbc:	4604      	mov	r4, r0
   d4bbe:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d4bc0:	b12b      	cbz	r3, d4bce <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4bc2:	2202      	movs	r2, #2
   d4bc4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d4bc6:	68eb      	ldr	r3, [r5, #12]
   d4bc8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4bca:	68ab      	ldr	r3, [r5, #8]
   d4bcc:	60a3      	str	r3, [r4, #8]
    }
   d4bce:	4620      	mov	r0, r4
   d4bd0:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4bd4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d4bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4bd6:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d4bd8:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d4bda:	4668      	mov	r0, sp
   d4bdc:	f7ff ff60 	bl	d4aa0 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d4be0:	f04f 0302 	mov.w	r3, #2
   d4be4:	e8d4 2f4f 	ldrexb	r2, [r4]
   d4be8:	2a00      	cmp	r2, #0
   d4bea:	d103      	bne.n	d4bf4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d4bec:	e8c4 3f41 	strexb	r1, r3, [r4]
   d4bf0:	2900      	cmp	r1, #0
   d4bf2:	d1f7      	bne.n	d4be4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d4bf4:	d125      	bne.n	d4c42 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d4bf6:	f104 050c 	add.w	r5, r4, #12
   d4bfa:	4669      	mov	r1, sp
   d4bfc:	4628      	mov	r0, r5
   d4bfe:	f7ff ff4f 	bl	d4aa0 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d4c02:	f3bf 8f5b 	dmb	ish
   d4c06:	2301      	movs	r3, #1
   d4c08:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d4c0a:	2000      	movs	r0, #0
   d4c0c:	f104 0308 	add.w	r3, r4, #8
   d4c10:	f3bf 8f5b 	dmb	ish
   d4c14:	e853 6f00 	ldrex	r6, [r3]
   d4c18:	e843 0200 	strex	r2, r0, [r3]
   d4c1c:	2a00      	cmp	r2, #0
   d4c1e:	d1f9      	bne.n	d4c14 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d4c20:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d4c24:	b16e      	cbz	r6, d4c42 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d4c26:	f7ff fb67 	bl	d42f8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d4c2a:	b178      	cbz	r0, d4c4c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d4c2c:	4629      	mov	r1, r5
   d4c2e:	4630      	mov	r0, r6
   d4c30:	f7ff ff8c 	bl	d4b4c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d4c34:	4630      	mov	r0, r6
   d4c36:	f7ff fe67 	bl	d4908 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d4c3a:	2110      	movs	r1, #16
   d4c3c:	4630      	mov	r0, r6
   d4c3e:	f000 fc2f 	bl	d54a0 <_ZdlPvj>
        p_->setError(std::move(error));
   d4c42:	4668      	mov	r0, sp
   d4c44:	f7ff ff39 	bl	d4aba <_ZN8particle5ErrorD1Ev>
    }
   d4c48:	b009      	add	sp, #36	; 0x24
   d4c4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d4c4c:	4631      	mov	r1, r6
   d4c4e:	a802      	add	r0, sp, #8
   d4c50:	f7ff ffb0 	bl	d4bb4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d4c54:	68e0      	ldr	r0, [r4, #12]
   d4c56:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d4c5a:	b108      	cbz	r0, d4c60 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d4c5c:	f000 fc7a 	bl	d5554 <strdup>
        type_(type) {
   d4c60:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d4c62:	2010      	movs	r0, #16
   d4c64:	f8ad 501c 	strh.w	r5, [sp, #28]
   d4c68:	f7ff fa13 	bl	d4092 <_Znwj>
   d4c6c:	4605      	mov	r5, r0
   d4c6e:	b1e8      	cbz	r0, d4cac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d4c70:	2700      	movs	r7, #0
   d4c72:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4c74:	2018      	movs	r0, #24
   d4c76:	f7ff fa0c 	bl	d4092 <_Znwj>
   d4c7a:	4604      	mov	r4, r0
   d4c7c:	b188      	cbz	r0, d4ca2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d4c7e:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d4c80:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d4c82:	a802      	add	r0, sp, #8
   d4c84:	f7ff fe49 	bl	d491a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4c88:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d4c8a:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d4c8c:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4c8e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d4c90:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d4c92:	a906      	add	r1, sp, #24
   d4c94:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d4c96:	60e3      	str	r3, [r4, #12]
   d4c98:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d4c9c:	9205      	str	r2, [sp, #20]
   d4c9e:	f7ff feff 	bl	d4aa0 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d4ca2:	4b08      	ldr	r3, [pc, #32]	; (d4cc4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d4ca4:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d4ca6:	4b08      	ldr	r3, [pc, #32]	; (d4cc8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4ca8:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d4caa:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d4cac:	a806      	add	r0, sp, #24
   d4cae:	f7ff ff04 	bl	d4aba <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d4cb2:	a802      	add	r0, sp, #8
   d4cb4:	f7ff fe28 	bl	d4908 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d4cb8:	2200      	movs	r2, #0
   d4cba:	4629      	mov	r1, r5
   d4cbc:	4803      	ldr	r0, [pc, #12]	; (d4ccc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d4cbe:	f7ff fb23 	bl	d4308 <application_thread_invoke>
   d4cc2:	e7b7      	b.n	d4c34 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d4cc4:	000d4b5f 	.word	0x000d4b5f
   d4cc8:	000d4df5 	.word	0x000d4df5
   d4ccc:	000d529d 	.word	0x000d529d

000d4cd0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d4cd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d4cd4:	b08a      	sub	sp, #40	; 0x28
   d4cd6:	4605      	mov	r5, r0
   d4cd8:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d4cdc:	460c      	mov	r4, r1
   d4cde:	4617      	mov	r7, r2
   d4ce0:	4698      	mov	r8, r3
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4ce2:	f7ff fb9d 	bl	d4420 <spark_cloud_flag_connected>
   d4ce6:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d4ce8:	4682      	mov	sl, r0
   d4cea:	bb38      	cbnz	r0, d4d3c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d4cec:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d4cf0:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d4cf2:	a905      	add	r1, sp, #20
   d4cf4:	4630      	mov	r0, r6
   d4cf6:	f8ad 3018 	strh.w	r3, [sp, #24]
   d4cfa:	f7ff fed1 	bl	d4aa0 <_ZN8particle5ErrorC1EOS0_>
   d4cfe:	2014      	movs	r0, #20
   d4d00:	f7ff f9c7 	bl	d4092 <_Znwj>
   d4d04:	4604      	mov	r4, r0
   d4d06:	b148      	cbz	r0, d4d1c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d4d08:	2302      	movs	r3, #2
   d4d0a:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4d0c:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d4d0e:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4d12:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d4d14:	4631      	mov	r1, r6
   d4d16:	300c      	adds	r0, #12
   d4d18:	f7ff fec2 	bl	d4aa0 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d4d1c:	4628      	mov	r0, r5
	: __shared_count(__p)
   d4d1e:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d4d20:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d4d24:	f7ff ff32 	bl	d4b8c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d4d28:	4630      	mov	r0, r6
   d4d2a:	f7ff fec6 	bl	d4aba <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d4d2e:	a805      	add	r0, sp, #20
   d4d30:	f7ff fec3 	bl	d4aba <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   d4d34:	4628      	mov	r0, r5
   d4d36:	b00a      	add	sp, #40	; 0x28
   d4d38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d4d3c:	230c      	movs	r3, #12
   d4d3e:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d4d42:	2014      	movs	r0, #20
   d4d44:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d4d48:	9307      	str	r3, [sp, #28]
   d4d4a:	f7ff f9a2 	bl	d4092 <_Znwj>
   d4d4e:	4601      	mov	r1, r0
   d4d50:	b128      	cbz	r0, d4d5e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d4d52:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d4d56:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4d5a:	f880 a001 	strb.w	sl, [r0, #1]
   d4d5e:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d4d60:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d4d62:	f7ff ff13 	bl	d4b8c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d4d66:	4b22      	ldr	r3, [pc, #136]	; (d4df0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d4d68:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d4d6a:	2008      	movs	r0, #8
   d4d6c:	f7ff f991 	bl	d4092 <_Znwj>
   d4d70:	4682      	mov	sl, r0
   d4d72:	b128      	cbz	r0, d4d80 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4d74:	9b03      	ldr	r3, [sp, #12]
   d4d76:	f840 3b04 	str.w	r3, [r0], #4
   d4d7a:	a904      	add	r1, sp, #16
   d4d7c:	f7ff fcf8 	bl	d4770 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d4d80:	9600      	str	r6, [sp, #0]
   d4d82:	fa5f f389 	uxtb.w	r3, r9
   d4d86:	4642      	mov	r2, r8
   d4d88:	4639      	mov	r1, r7
   d4d8a:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d4d8c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d4d90:	f7ff fb4e 	bl	d4430 <spark_send_event>
   d4d94:	b9b8      	cbnz	r0, d4dc6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d4d96:	9b03      	ldr	r3, [sp, #12]
   d4d98:	785b      	ldrb	r3, [r3, #1]
   d4d9a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d4d9e:	b993      	cbnz	r3, d4dc6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d4da0:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d4da4:	a905      	add	r1, sp, #20
   d4da6:	a803      	add	r0, sp, #12
   d4da8:	9205      	str	r2, [sp, #20]
   d4daa:	f8ad 3018 	strh.w	r3, [sp, #24]
   d4dae:	f7ff ff11 	bl	d4bd4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d4db2:	a805      	add	r0, sp, #20
   d4db4:	f7ff fe81 	bl	d4aba <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d4db8:	a805      	add	r0, sp, #20
   d4dba:	9909      	ldr	r1, [sp, #36]	; 0x24
   d4dbc:	f7ff fea7 	bl	d4b0e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d4dc0:	a806      	add	r0, sp, #24
   d4dc2:	f7ff fcdc 	bl	d477e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4dc6:	9b03      	ldr	r3, [sp, #12]
   d4dc8:	9305      	str	r3, [sp, #20]
   d4dca:	a904      	add	r1, sp, #16
   d4dcc:	a806      	add	r0, sp, #24
   d4dce:	f7ff fccf 	bl	d4770 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d4dd2:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d4dd4:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d4dd6:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d4dd8:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d4dda:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d4ddc:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d4dde:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d4de0:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d4de2:	f7ff fccc 	bl	d477e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4de6:	a804      	add	r0, sp, #16
   d4de8:	f7ff fcc9 	bl	d477e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d4dec:	e7a2      	b.n	d4d34 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d4dee:	bf00      	nop
   d4df0:	000d4eb9 	.word	0x000d4eb9

000d4df4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d4df4:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d4df6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4df8:	4605      	mov	r5, r0
	  switch (__op)
   d4dfa:	d007      	beq.n	d4e0c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d4dfc:	2a03      	cmp	r2, #3
   d4dfe:	d018      	beq.n	d4e32 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d4e00:	2a01      	cmp	r2, #1
   d4e02:	d101      	bne.n	d4e08 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d4e04:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4e06:	6003      	str	r3, [r0, #0]
	}
   d4e08:	2000      	movs	r0, #0
   d4e0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d4e0c:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d4e0e:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d4e10:	f7ff f93f 	bl	d4092 <_Znwj>
   d4e14:	4604      	mov	r4, r0
   d4e16:	b150      	cbz	r0, d4e2e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d4e18:	4631      	mov	r1, r6
   d4e1a:	f7ff fecb 	bl	d4bb4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d4e1e:	6930      	ldr	r0, [r6, #16]
   d4e20:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d4e24:	b108      	cbz	r0, d4e2a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d4e26:	f000 fb95 	bl	d5554 <strdup>
        type_(type) {
   d4e2a:	6120      	str	r0, [r4, #16]
   d4e2c:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d4e2e:	602c      	str	r4, [r5, #0]
	}
   d4e30:	e7ea      	b.n	d4e08 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d4e32:	6804      	ldr	r4, [r0, #0]
   d4e34:	2c00      	cmp	r4, #0
   d4e36:	d0e7      	beq.n	d4e08 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d4e38:	f104 0010 	add.w	r0, r4, #16
   d4e3c:	f7ff fe3d 	bl	d4aba <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d4e40:	4620      	mov	r0, r4
   d4e42:	f7ff fd61 	bl	d4908 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d4e46:	2118      	movs	r1, #24
   d4e48:	4620      	mov	r0, r4
   d4e4a:	f000 fb29 	bl	d54a0 <_ZdlPvj>
   d4e4e:	e7db      	b.n	d4e08 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d4e50 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d4e50:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d4e52:	2300      	movs	r3, #0
   d4e54:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d4e56:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d4e58:	4604      	mov	r4, r0
   d4e5a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d4e5c:	b12b      	cbz	r3, d4e6a <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4e5e:	2202      	movs	r2, #2
   d4e60:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d4e62:	68eb      	ldr	r3, [r5, #12]
   d4e64:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4e66:	68ab      	ldr	r3, [r5, #8]
   d4e68:	60a3      	str	r3, [r4, #8]
    }
   d4e6a:	4620      	mov	r0, r4
   d4e6c:	bd38      	pop	{r3, r4, r5, pc}

000d4e6e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d4e6e:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d4e70:	b570      	push	{r4, r5, r6, lr}
   d4e72:	4604      	mov	r4, r0
	  switch (__op)
   d4e74:	d007      	beq.n	d4e86 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d4e76:	2a03      	cmp	r2, #3
   d4e78:	d012      	beq.n	d4ea0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d4e7a:	2a01      	cmp	r2, #1
   d4e7c:	d101      	bne.n	d4e82 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d4e7e:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4e80:	6003      	str	r3, [r0, #0]
	}
   d4e82:	2000      	movs	r0, #0
   d4e84:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d4e86:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d4e88:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d4e8a:	f7ff f902 	bl	d4092 <_Znwj>
   d4e8e:	4605      	mov	r5, r0
   d4e90:	b120      	cbz	r0, d4e9c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d4e92:	4631      	mov	r1, r6
   d4e94:	f7ff ffdc 	bl	d4e50 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d4e98:	7c33      	ldrb	r3, [r6, #16]
   d4e9a:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d4e9c:	6025      	str	r5, [r4, #0]
	}
   d4e9e:	e7f0      	b.n	d4e82 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d4ea0:	6804      	ldr	r4, [r0, #0]
   d4ea2:	2c00      	cmp	r4, #0
   d4ea4:	d0ed      	beq.n	d4e82 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d4ea6:	4620      	mov	r0, r4
   d4ea8:	f7ff fd2e 	bl	d4908 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d4eac:	2114      	movs	r1, #20
   d4eae:	4620      	mov	r0, r4
   d4eb0:	f000 faf6 	bl	d54a0 <_ZdlPvj>
   d4eb4:	e7e5      	b.n	d4e82 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d4eb8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d4eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4eba:	b089      	sub	sp, #36	; 0x24
   d4ebc:	4604      	mov	r4, r0
   d4ebe:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d4ec0:	a801      	add	r0, sp, #4
   d4ec2:	4611      	mov	r1, r2
   d4ec4:	f7ff fe23 	bl	d4b0e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d4ec8:	b1a4      	cbz	r4, d4ef4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d4eca:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d4ecc:	b11d      	cbz	r5, d4ed6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d4ece:	4628      	mov	r0, r5
   d4ed0:	f000 fb40 	bl	d5554 <strdup>
   d4ed4:	4605      	mov	r5, r0
   d4ed6:	a801      	add	r0, sp, #4
   d4ed8:	a903      	add	r1, sp, #12
        type_(type) {
   d4eda:	9503      	str	r5, [sp, #12]
   d4edc:	f8ad 4010 	strh.w	r4, [sp, #16]
   d4ee0:	f7ff fe78 	bl	d4bd4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d4ee4:	a803      	add	r0, sp, #12
   d4ee6:	f7ff fde8 	bl	d4aba <_ZN8particle5ErrorD1Ev>
   d4eea:	a802      	add	r0, sp, #8
   d4eec:	f7ff fc47 	bl	d477e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d4ef0:	b009      	add	sp, #36	; 0x24
   d4ef2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d4ef4:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d4ef6:	2301      	movs	r3, #1
   d4ef8:	e8d5 2f4f 	ldrexb	r2, [r5]
   d4efc:	2a00      	cmp	r2, #0
   d4efe:	d103      	bne.n	d4f08 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d4f00:	e8c5 3f41 	strexb	r1, r3, [r5]
   d4f04:	2900      	cmp	r1, #0
   d4f06:	d1f7      	bne.n	d4ef8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d4f08:	d1ef      	bne.n	d4eea <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d4f0a:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d4f0c:	f3bf 8f5b 	dmb	ish
   d4f10:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d4f12:	1d2b      	adds	r3, r5, #4
   d4f14:	f3bf 8f5b 	dmb	ish
   d4f18:	e853 6f00 	ldrex	r6, [r3]
   d4f1c:	e843 4200 	strex	r2, r4, [r3]
   d4f20:	2a00      	cmp	r2, #0
   d4f22:	d1f9      	bne.n	d4f18 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d4f24:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d4f28:	2e00      	cmp	r6, #0
   d4f2a:	d0de      	beq.n	d4eea <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d4f2c:	4620      	mov	r0, r4
   d4f2e:	f7ff f9e3 	bl	d42f8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d4f32:	4607      	mov	r7, r0
   d4f34:	b160      	cbz	r0, d4f50 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d4f36:	f105 010c 	add.w	r1, r5, #12
   d4f3a:	4630      	mov	r0, r6
   d4f3c:	f7ff fe16 	bl	d4b6c <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d4f40:	4630      	mov	r0, r6
   d4f42:	f7ff fce1 	bl	d4908 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d4f46:	2110      	movs	r1, #16
   d4f48:	4630      	mov	r0, r6
   d4f4a:	f000 faa9 	bl	d54a0 <_ZdlPvj>
   d4f4e:	e7cc      	b.n	d4eea <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d4f50:	4631      	mov	r1, r6
   d4f52:	a803      	add	r0, sp, #12
   d4f54:	f7ff ff7c 	bl	d4e50 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d4f58:	7b2b      	ldrb	r3, [r5, #12]
   d4f5a:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d4f5e:	2010      	movs	r0, #16
   d4f60:	f7ff f897 	bl	d4092 <_Znwj>
   d4f64:	4605      	mov	r5, r0
   d4f66:	b1d0      	cbz	r0, d4f9e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d4f68:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4f6a:	2014      	movs	r0, #20
   d4f6c:	f7ff f891 	bl	d4092 <_Znwj>
   d4f70:	4604      	mov	r4, r0
   d4f72:	b178      	cbz	r0, d4f94 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d4f74:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d4f76:	4601      	mov	r1, r0
   d4f78:	a803      	add	r0, sp, #12
   d4f7a:	f7ff fcce 	bl	d491a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4f7e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d4f80:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d4f82:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4f84:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d4f86:	9205      	str	r2, [sp, #20]
   d4f88:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d4f8a:	60e3      	str	r3, [r4, #12]
   d4f8c:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d4f90:	9206      	str	r2, [sp, #24]
   d4f92:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d4f94:	4b06      	ldr	r3, [pc, #24]	; (d4fb0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d4f96:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d4f98:	4b06      	ldr	r3, [pc, #24]	; (d4fb4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4f9a:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d4f9c:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d4f9e:	a803      	add	r0, sp, #12
   d4fa0:	f7ff fcb2 	bl	d4908 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d4fa4:	2200      	movs	r2, #0
   d4fa6:	4629      	mov	r1, r5
   d4fa8:	4803      	ldr	r0, [pc, #12]	; (d4fb8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d4faa:	f7ff f9ad 	bl	d4308 <application_thread_invoke>
   d4fae:	e7c7      	b.n	d4f40 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d4fb0:	000d4b7f 	.word	0x000d4b7f
   d4fb4:	000d4e6f 	.word	0x000d4e6f
   d4fb8:	000d529d 	.word	0x000d529d

000d4fbc <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d4fbc:	4770      	bx	lr

000d4fbe <_ZN9IPAddressD0Ev>:
   d4fbe:	b510      	push	{r4, lr}
   d4fc0:	2118      	movs	r1, #24
   d4fc2:	4604      	mov	r4, r0
   d4fc4:	f000 fa6c 	bl	d54a0 <_ZdlPvj>
   d4fc8:	4620      	mov	r0, r4
   d4fca:	bd10      	pop	{r4, pc}

000d4fcc <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4fce:	7d03      	ldrb	r3, [r0, #20]
   d4fd0:	2b06      	cmp	r3, #6
{
   d4fd2:	b08d      	sub	sp, #52	; 0x34
   d4fd4:	460e      	mov	r6, r1
   d4fd6:	f100 0704 	add.w	r7, r0, #4
   d4fda:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d4fde:	d012      	beq.n	d5006 <_ZNK9IPAddress7printToER5Print+0x3a>
   d4fe0:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d4fe4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d4fe8:	220a      	movs	r2, #10
   d4fea:	4630      	mov	r0, r6
   d4fec:	f7ff fc21 	bl	d4832 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4ff0:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4ff2:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d4ff4:	d019      	beq.n	d502a <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d4ff6:	2c00      	cmp	r4, #0
   d4ff8:	d0f4      	beq.n	d4fe4 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d4ffa:	212e      	movs	r1, #46	; 0x2e
   d4ffc:	4630      	mov	r0, r6
   d4ffe:	f7ff fbff 	bl	d4800 <_ZN5Print5printEc>
   d5002:	4404      	add	r4, r0
   d5004:	e7ee      	b.n	d4fe4 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5006:	232f      	movs	r3, #47	; 0x2f
   d5008:	466a      	mov	r2, sp
   d500a:	4639      	mov	r1, r7
   d500c:	200a      	movs	r0, #10
		buf[0] = 0;
   d500e:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5012:	f7ff f8e9 	bl	d41e8 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d5016:	4668      	mov	r0, sp
   d5018:	f000 fab9 	bl	d558e <strlen>
   d501c:	6833      	ldr	r3, [r6, #0]
   d501e:	4602      	mov	r2, r0
   d5020:	68db      	ldr	r3, [r3, #12]
   d5022:	4669      	mov	r1, sp
   d5024:	4630      	mov	r0, r6
   d5026:	4798      	blx	r3
   d5028:	4604      	mov	r4, r0
    }
    return n;
}
   d502a:	4620      	mov	r0, r4
   d502c:	b00d      	add	sp, #52	; 0x34
   d502e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5030 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d5030:	b510      	push	{r4, lr}
   d5032:	4b05      	ldr	r3, [pc, #20]	; (d5048 <_ZN9IPAddressC1Ev+0x18>)
   d5034:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5036:	2211      	movs	r2, #17
   d5038:	f840 3b04 	str.w	r3, [r0], #4
   d503c:	2100      	movs	r1, #0
   d503e:	f000 fa5c 	bl	d54fa <memset>
}
   d5042:	4620      	mov	r0, r4
   d5044:	bd10      	pop	{r4, pc}
   d5046:	bf00      	nop
   d5048:	000d5754 	.word	0x000d5754

000d504c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d504c:	4603      	mov	r3, r0
   d504e:	4a07      	ldr	r2, [pc, #28]	; (d506c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5050:	b510      	push	{r4, lr}
   d5052:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d5056:	f101 0210 	add.w	r2, r1, #16
   d505a:	f851 4b04 	ldr.w	r4, [r1], #4
   d505e:	f843 4b04 	str.w	r4, [r3], #4
   d5062:	4291      	cmp	r1, r2
   d5064:	d1f9      	bne.n	d505a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5066:	780a      	ldrb	r2, [r1, #0]
   d5068:	701a      	strb	r2, [r3, #0]
}
   d506a:	bd10      	pop	{r4, pc}
   d506c:	000d5754 	.word	0x000d5754

000d5070 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d5070:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5072:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5076:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d507a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d507e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d5082:	2304      	movs	r3, #4
   d5084:	6041      	str	r1, [r0, #4]
   d5086:	7503      	strb	r3, [r0, #20]
}
   d5088:	bd10      	pop	{r4, pc}

000d508a <_ZN9IPAddressaSEPKh>:
{
   d508a:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d508c:	78cb      	ldrb	r3, [r1, #3]
   d508e:	9300      	str	r3, [sp, #0]
   d5090:	788b      	ldrb	r3, [r1, #2]
   d5092:	784a      	ldrb	r2, [r1, #1]
   d5094:	7809      	ldrb	r1, [r1, #0]
   d5096:	f7ff ffeb 	bl	d5070 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d509a:	b002      	add	sp, #8
   d509c:	bd10      	pop	{r4, pc}

000d509e <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d509e:	7441      	strb	r1, [r0, #17]
}
   d50a0:	4770      	bx	lr

000d50a2 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d50a2:	4770      	bx	lr

000d50a4 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d50a4:	4770      	bx	lr

000d50a6 <_ZN9USBSerial4readEv>:
{
   d50a6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d50a8:	2100      	movs	r1, #0
   d50aa:	7c00      	ldrb	r0, [r0, #16]
   d50ac:	f7ff f8fc 	bl	d42a8 <HAL_USB_USART_Receive_Data>
}
   d50b0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d50b4:	bd08      	pop	{r3, pc}

000d50b6 <_ZN9USBSerial4peekEv>:
{
   d50b6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d50b8:	2101      	movs	r1, #1
   d50ba:	7c00      	ldrb	r0, [r0, #16]
   d50bc:	f7ff f8f4 	bl	d42a8 <HAL_USB_USART_Receive_Data>
}
   d50c0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d50c4:	bd08      	pop	{r3, pc}

000d50c6 <_ZN9USBSerial17availableForWriteEv>:
{
   d50c6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d50c8:	7c00      	ldrb	r0, [r0, #16]
   d50ca:	f7ff f8e5 	bl	d4298 <HAL_USB_USART_Available_Data_For_Write>
}
   d50ce:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d50d2:	bd08      	pop	{r3, pc}

000d50d4 <_ZN9USBSerial9availableEv>:
{
   d50d4:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d50d6:	7c00      	ldrb	r0, [r0, #16]
   d50d8:	f7ff f8d6 	bl	d4288 <HAL_USB_USART_Available_Data>
}
   d50dc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d50e0:	bd08      	pop	{r3, pc}

000d50e2 <_ZN9USBSerial5writeEh>:
{
   d50e2:	b513      	push	{r0, r1, r4, lr}
   d50e4:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d50e6:	7c00      	ldrb	r0, [r0, #16]
{
   d50e8:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d50ea:	f7ff f8d5 	bl	d4298 <HAL_USB_USART_Available_Data_For_Write>
   d50ee:	2800      	cmp	r0, #0
   d50f0:	9901      	ldr	r1, [sp, #4]
   d50f2:	dc01      	bgt.n	d50f8 <_ZN9USBSerial5writeEh+0x16>
   d50f4:	7c60      	ldrb	r0, [r4, #17]
   d50f6:	b120      	cbz	r0, d5102 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d50f8:	7c20      	ldrb	r0, [r4, #16]
   d50fa:	f7ff f8dd 	bl	d42b8 <HAL_USB_USART_Send_Data>
   d50fe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d5102:	b002      	add	sp, #8
   d5104:	bd10      	pop	{r4, pc}

000d5106 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d5106:	7c00      	ldrb	r0, [r0, #16]
   d5108:	f7ff b8de 	b.w	d42c8 <HAL_USB_USART_Flush_Data>

000d510c <_ZN9USBSerialD0Ev>:
   d510c:	b510      	push	{r4, lr}
   d510e:	2114      	movs	r1, #20
   d5110:	4604      	mov	r4, r0
   d5112:	f000 f9c5 	bl	d54a0 <_ZdlPvj>
   d5116:	4620      	mov	r0, r4
   d5118:	bd10      	pop	{r4, pc}
	...

000d511c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d511c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d511e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5122:	4604      	mov	r4, r0
   d5124:	4608      	mov	r0, r1
   d5126:	2100      	movs	r1, #0
   d5128:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d512c:	4b04      	ldr	r3, [pc, #16]	; (d5140 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d512e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d5130:	2301      	movs	r3, #1
  _serial = serial;
   d5132:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d5134:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d5136:	4611      	mov	r1, r2
   d5138:	f7ff f896 	bl	d4268 <HAL_USB_USART_Init>
}
   d513c:	4620      	mov	r0, r4
   d513e:	bd10      	pop	{r4, pc}
   d5140:	000d5768 	.word	0x000d5768

000d5144 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d5144:	7c00      	ldrb	r0, [r0, #16]
   d5146:	2200      	movs	r2, #0
   d5148:	f7ff b896 	b.w	d4278 <HAL_USB_USART_Begin>

000d514c <_Z19acquireSerialBufferv>:
{
   d514c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d514e:	2214      	movs	r2, #20
{
   d5150:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5152:	2100      	movs	r1, #0
   d5154:	f000 f9d1 	bl	d54fa <memset>
}
   d5158:	4620      	mov	r0, r4
   d515a:	bd10      	pop	{r4, pc}

000d515c <_Z16_fetch_usbserialv>:
{
   d515c:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d515e:	4c0f      	ldr	r4, [pc, #60]	; (d519c <_Z16_fetch_usbserialv+0x40>)
{
   d5160:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d5162:	a803      	add	r0, sp, #12
   d5164:	f7ff fff2 	bl	d514c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5168:	7821      	ldrb	r1, [r4, #0]
   d516a:	f3bf 8f5b 	dmb	ish
   d516e:	f011 0101 	ands.w	r1, r1, #1
   d5172:	d10f      	bne.n	d5194 <_Z16_fetch_usbserialv+0x38>
   d5174:	4620      	mov	r0, r4
   d5176:	9101      	str	r1, [sp, #4]
   d5178:	f7fe ff8f 	bl	d409a <__cxa_guard_acquire>
   d517c:	9901      	ldr	r1, [sp, #4]
   d517e:	b148      	cbz	r0, d5194 <_Z16_fetch_usbserialv+0x38>
   d5180:	aa03      	add	r2, sp, #12
   d5182:	4807      	ldr	r0, [pc, #28]	; (d51a0 <_Z16_fetch_usbserialv+0x44>)
   d5184:	f7ff ffca 	bl	d511c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5188:	4620      	mov	r0, r4
   d518a:	f7fe ff8b 	bl	d40a4 <__cxa_guard_release>
   d518e:	4805      	ldr	r0, [pc, #20]	; (d51a4 <_Z16_fetch_usbserialv+0x48>)
   d5190:	f000 f98b 	bl	d54aa <atexit>
	return _usbserial;
}
   d5194:	4802      	ldr	r0, [pc, #8]	; (d51a0 <_Z16_fetch_usbserialv+0x44>)
   d5196:	b008      	add	sp, #32
   d5198:	bd10      	pop	{r4, pc}
   d519a:	bf00      	nop
   d519c:	2003e608 	.word	0x2003e608
   d51a0:	2003e60c 	.word	0x2003e60c
   d51a4:	000d50a3 	.word	0x000d50a3

000d51a8 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d51a8:	4770      	bx	lr

000d51aa <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d51aa:	7441      	strb	r1, [r0, #17]
}
   d51ac:	4770      	bx	lr

000d51ae <__tcf_0>:
#endif

USARTSerial& __fetch_global_Serial1()
{
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d51ae:	4770      	bx	lr

000d51b0 <_ZN11USARTSerial17availableForWriteEv>:
{
   d51b0:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d51b2:	7c00      	ldrb	r0, [r0, #16]
   d51b4:	f7ff f850 	bl	d4258 <hal_usart_available_data_for_write>
}
   d51b8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d51bc:	bd08      	pop	{r3, pc}

000d51be <_ZN11USARTSerial9availableEv>:
{
   d51be:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d51c0:	7c00      	ldrb	r0, [r0, #16]
   d51c2:	f7ff f829 	bl	d4218 <hal_usart_available>
}
   d51c6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d51ca:	bd08      	pop	{r3, pc}

000d51cc <_ZN11USARTSerial4peekEv>:
{
   d51cc:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d51ce:	7c00      	ldrb	r0, [r0, #16]
   d51d0:	f7ff f832 	bl	d4238 <hal_usart_peek>
}
   d51d4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d51d8:	bd08      	pop	{r3, pc}

000d51da <_ZN11USARTSerial4readEv>:
{
   d51da:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d51dc:	7c00      	ldrb	r0, [r0, #16]
   d51de:	f7ff f823 	bl	d4228 <hal_usart_read>
}
   d51e2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d51e6:	bd08      	pop	{r3, pc}

000d51e8 <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
   d51e8:	7c00      	ldrb	r0, [r0, #16]
   d51ea:	f7ff b82d 	b.w	d4248 <hal_usart_flush>

000d51ee <_ZN11USARTSerial5writeEh>:
{
   d51ee:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d51f0:	7c45      	ldrb	r5, [r0, #17]
{
   d51f2:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d51f4:	b12d      	cbz	r5, d5202 <_ZN11USARTSerial5writeEh+0x14>
	  return hal_usart_write(_serial, c);
   d51f6:	7c20      	ldrb	r0, [r4, #16]
}
   d51f8:	b003      	add	sp, #12
   d51fa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d51fe:	f7ff b803 	b.w	d4208 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5202:	7c00      	ldrb	r0, [r0, #16]
   d5204:	9101      	str	r1, [sp, #4]
   d5206:	f7ff f827 	bl	d4258 <hal_usart_available_data_for_write>
   d520a:	2800      	cmp	r0, #0
   d520c:	9901      	ldr	r1, [sp, #4]
   d520e:	dcf2      	bgt.n	d51f6 <_ZN11USARTSerial5writeEh+0x8>
}
   d5210:	4628      	mov	r0, r5
   d5212:	b003      	add	sp, #12
   d5214:	bd30      	pop	{r4, r5, pc}

000d5216 <_ZN11USARTSerialD0Ev>:
   d5216:	b510      	push	{r4, lr}
   d5218:	2114      	movs	r1, #20
   d521a:	4604      	mov	r4, r0
   d521c:	f000 f940 	bl	d54a0 <_ZdlPvj>
   d5220:	4620      	mov	r0, r4
   d5222:	bd10      	pop	{r4, pc}

000d5224 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d5224:	b510      	push	{r4, lr}
   d5226:	f04f 0c00 	mov.w	ip, #0
   d522a:	4604      	mov	r4, r0
   d522c:	4608      	mov	r0, r1
   d522e:	4611      	mov	r1, r2
   d5230:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5234:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d5238:	4a04      	ldr	r2, [pc, #16]	; (d524c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d523a:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d523c:	2201      	movs	r2, #1
  _serial = serial;
   d523e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d5240:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d5242:	461a      	mov	r2, r3
   d5244:	f7fe ffd8 	bl	d41f8 <hal_usart_init>
}
   d5248:	4620      	mov	r0, r4
   d524a:	bd10      	pop	{r4, pc}
   d524c:	000d5798 	.word	0x000d5798

000d5250 <_Z22__fetch_global_Serial1v>:
{
   d5250:	b513      	push	{r0, r1, r4, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d5252:	4c0d      	ldr	r4, [pc, #52]	; (d5288 <_Z22__fetch_global_Serial1v+0x38>)
   d5254:	7821      	ldrb	r1, [r4, #0]
   d5256:	f3bf 8f5b 	dmb	ish
   d525a:	f011 0101 	ands.w	r1, r1, #1
   d525e:	d110      	bne.n	d5282 <_Z22__fetch_global_Serial1v+0x32>
   d5260:	4620      	mov	r0, r4
   d5262:	9101      	str	r1, [sp, #4]
   d5264:	f7fe ff19 	bl	d409a <__cxa_guard_acquire>
   d5268:	9901      	ldr	r1, [sp, #4]
   d526a:	b150      	cbz	r0, d5282 <_Z22__fetch_global_Serial1v+0x32>
   d526c:	4b07      	ldr	r3, [pc, #28]	; (d528c <_Z22__fetch_global_Serial1v+0x3c>)
   d526e:	4a08      	ldr	r2, [pc, #32]	; (d5290 <_Z22__fetch_global_Serial1v+0x40>)
   d5270:	4808      	ldr	r0, [pc, #32]	; (d5294 <_Z22__fetch_global_Serial1v+0x44>)
   d5272:	f7ff ffd7 	bl	d5224 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d5276:	4620      	mov	r0, r4
   d5278:	f7fe ff14 	bl	d40a4 <__cxa_guard_release>
   d527c:	4806      	ldr	r0, [pc, #24]	; (d5298 <_Z22__fetch_global_Serial1v+0x48>)
   d527e:	f000 f914 	bl	d54aa <atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5282:	4804      	ldr	r0, [pc, #16]	; (d5294 <_Z22__fetch_global_Serial1v+0x44>)
   d5284:	b002      	add	sp, #8
   d5286:	bd10      	pop	{r4, pc}
   d5288:	2003e620 	.word	0x2003e620
   d528c:	2003e6a8 	.word	0x2003e6a8
   d5290:	2003e624 	.word	0x2003e624
   d5294:	2003e72c 	.word	0x2003e72c
   d5298:	000d51af 	.word	0x000d51af

000d529c <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d529c:	b510      	push	{r4, lr}
      if (_M_empty())
   d529e:	6883      	ldr	r3, [r0, #8]
   d52a0:	4604      	mov	r4, r0
   d52a2:	b90b      	cbnz	r3, d52a8 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d52a4:	f000 f8fe 	bl	d54a4 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d52a8:	68c3      	ldr	r3, [r0, #12]
   d52aa:	4798      	blx	r3
      if (_M_manager)
   d52ac:	68a3      	ldr	r3, [r4, #8]
   d52ae:	b11b      	cbz	r3, d52b8 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d52b0:	2203      	movs	r2, #3
   d52b2:	4621      	mov	r1, r4
   d52b4:	4620      	mov	r0, r4
   d52b6:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d52b8:	4620      	mov	r0, r4
   d52ba:	2110      	movs	r1, #16
}
   d52bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d52c0:	f000 b8ee 	b.w	d54a0 <_ZdlPvj>

000d52c4 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d52c4:	2200      	movs	r2, #0
   d52c6:	6840      	ldr	r0, [r0, #4]
   d52c8:	4611      	mov	r1, r2
   d52ca:	f7ff b859 	b.w	d4380 <network_ready>

000d52ce <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d52ce:	2200      	movs	r2, #0
   d52d0:	6840      	ldr	r0, [r0, #4]
   d52d2:	4611      	mov	r1, r2
   d52d4:	f7ff b874 	b.w	d43c0 <network_listening>

000d52d8 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d52d8:	2200      	movs	r2, #0
   d52da:	6840      	ldr	r0, [r0, #4]
   d52dc:	4611      	mov	r1, r2
   d52de:	f7ff b87f 	b.w	d43e0 <network_get_listen_timeout>

000d52e2 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d52e2:	6840      	ldr	r0, [r0, #4]
   d52e4:	2200      	movs	r2, #0
   d52e6:	f7ff b873 	b.w	d43d0 <network_set_listen_timeout>

000d52ea <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d52ea:	6840      	ldr	r0, [r0, #4]
   d52ec:	2200      	movs	r2, #0
   d52ee:	f081 0101 	eor.w	r1, r1, #1
   d52f2:	f7ff b85d 	b.w	d43b0 <network_listen>

000d52f6 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d52f6:	2300      	movs	r3, #0
   d52f8:	6840      	ldr	r0, [r0, #4]
   d52fa:	461a      	mov	r2, r3
   d52fc:	4619      	mov	r1, r3
   d52fe:	f7ff b84f 	b.w	d43a0 <network_off>

000d5302 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d5302:	2300      	movs	r3, #0
   d5304:	6840      	ldr	r0, [r0, #4]
   d5306:	461a      	mov	r2, r3
   d5308:	4619      	mov	r1, r3
   d530a:	f7ff b841 	b.w	d4390 <network_on>

000d530e <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d530e:	2200      	movs	r2, #0
   d5310:	6840      	ldr	r0, [r0, #4]
   d5312:	4611      	mov	r1, r2
   d5314:	f7ff b824 	b.w	d4360 <network_connecting>

000d5318 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5318:	6840      	ldr	r0, [r0, #4]
   d531a:	2200      	movs	r2, #0
   d531c:	2102      	movs	r1, #2
   d531e:	f7ff b827 	b.w	d4370 <network_disconnect>

000d5322 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d5322:	2300      	movs	r3, #0
   d5324:	6840      	ldr	r0, [r0, #4]
   d5326:	461a      	mov	r2, r3
   d5328:	f7ff b812 	b.w	d4350 <network_connect>

000d532c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d532c:	4b02      	ldr	r3, [pc, #8]	; (d5338 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d532e:	2204      	movs	r2, #4
   d5330:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d5332:	4a02      	ldr	r2, [pc, #8]	; (d533c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d5334:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d5336:	4770      	bx	lr
   d5338:	2003e740 	.word	0x2003e740
   d533c:	000d57c8 	.word	0x000d57c8

000d5340 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5340:	2300      	movs	r3, #0
   d5342:	6840      	ldr	r0, [r0, #4]
   d5344:	461a      	mov	r2, r3
   d5346:	f7ff b803 	b.w	d4350 <network_connect>

000d534a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d534a:	6840      	ldr	r0, [r0, #4]
   d534c:	2200      	movs	r2, #0
   d534e:	2102      	movs	r1, #2
   d5350:	f7ff b80e 	b.w	d4370 <network_disconnect>

000d5354 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5354:	2200      	movs	r2, #0
   d5356:	6840      	ldr	r0, [r0, #4]
   d5358:	4611      	mov	r1, r2
   d535a:	f7ff b801 	b.w	d4360 <network_connecting>

000d535e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d535e:	2200      	movs	r2, #0
   d5360:	6840      	ldr	r0, [r0, #4]
   d5362:	4611      	mov	r1, r2
   d5364:	f7ff b80c 	b.w	d4380 <network_ready>

000d5368 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5368:	2300      	movs	r3, #0
   d536a:	6840      	ldr	r0, [r0, #4]
   d536c:	461a      	mov	r2, r3
   d536e:	4619      	mov	r1, r3
   d5370:	f7ff b80e 	b.w	d4390 <network_on>

000d5374 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5374:	2300      	movs	r3, #0
   d5376:	6840      	ldr	r0, [r0, #4]
   d5378:	461a      	mov	r2, r3
   d537a:	4619      	mov	r1, r3
   d537c:	f7ff b810 	b.w	d43a0 <network_off>

000d5380 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d5380:	6840      	ldr	r0, [r0, #4]
   d5382:	2100      	movs	r1, #0
   d5384:	f7ff b834 	b.w	d43f0 <network_is_on>

000d5388 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d5388:	6840      	ldr	r0, [r0, #4]
   d538a:	2100      	movs	r1, #0
   d538c:	f7ff b838 	b.w	d4400 <network_is_off>

000d5390 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5390:	6840      	ldr	r0, [r0, #4]
   d5392:	2200      	movs	r2, #0
   d5394:	f081 0101 	eor.w	r1, r1, #1
   d5398:	f7ff b80a 	b.w	d43b0 <network_listen>

000d539c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d539c:	6840      	ldr	r0, [r0, #4]
   d539e:	2200      	movs	r2, #0
   d53a0:	f7ff b816 	b.w	d43d0 <network_set_listen_timeout>

000d53a4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d53a4:	2200      	movs	r2, #0
   d53a6:	6840      	ldr	r0, [r0, #4]
   d53a8:	4611      	mov	r1, r2
   d53aa:	f7ff b819 	b.w	d43e0 <network_get_listen_timeout>

000d53ae <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d53ae:	2200      	movs	r2, #0
   d53b0:	6840      	ldr	r0, [r0, #4]
   d53b2:	4611      	mov	r1, r2
   d53b4:	f7ff b804 	b.w	d43c0 <network_listening>

000d53b8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d53b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d53bc:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d53be:	b095      	sub	sp, #84	; 0x54
   d53c0:	4616      	mov	r6, r2
   d53c2:	460d      	mov	r5, r1
   d53c4:	4607      	mov	r7, r0
    IPAddress addr;
   d53c6:	f7ff fe33 	bl	d5030 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d53ca:	4621      	mov	r1, r4
   d53cc:	2218      	movs	r2, #24
   d53ce:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d53d0:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d53d2:	f000 f892 	bl	d54fa <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d53d6:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d53d8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d53dc:	4621      	mov	r1, r4
   d53de:	466b      	mov	r3, sp
   d53e0:	aa0c      	add	r2, sp, #48	; 0x30
   d53e2:	4630      	mov	r0, r6
   d53e4:	f7fe fed0 	bl	d4188 <netdb_getaddrinfo>
    if (!r) {
   d53e8:	4604      	mov	r4, r0
   d53ea:	2800      	cmp	r0, #0
   d53ec:	d146      	bne.n	d547c <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d53ee:	4602      	mov	r2, r0
   d53f0:	2101      	movs	r1, #1
   d53f2:	6868      	ldr	r0, [r5, #4]
   d53f4:	f7fe ffc4 	bl	d4380 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d53f8:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d53fa:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d53fc:	4622      	mov	r2, r4
   d53fe:	6868      	ldr	r0, [r5, #4]
   d5400:	f7fe ffbe 	bl	d4380 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5404:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5406:	4681      	mov	r9, r0
        bool ok = false;
   d5408:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d540a:	2e00      	cmp	r6, #0
   d540c:	d036      	beq.n	d547c <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d540e:	2900      	cmp	r1, #0
   d5410:	d134      	bne.n	d547c <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d5412:	6873      	ldr	r3, [r6, #4]
   d5414:	2b02      	cmp	r3, #2
   d5416:	d003      	beq.n	d5420 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d5418:	2b0a      	cmp	r3, #10
   d541a:	d00b      	beq.n	d5434 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d541c:	69f6      	ldr	r6, [r6, #28]
   d541e:	e7f4      	b.n	d540a <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d5420:	f1b8 0f00 	cmp.w	r8, #0
   d5424:	d004      	beq.n	d5430 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5426:	6971      	ldr	r1, [r6, #20]
   d5428:	4638      	mov	r0, r7
   d542a:	3104      	adds	r1, #4
   d542c:	f7ff fe2d 	bl	d508a <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d5430:	4641      	mov	r1, r8
   d5432:	e7f3      	b.n	d541c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d5434:	f1b9 0f00 	cmp.w	r9, #0
   d5438:	d101      	bne.n	d543e <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d543a:	4649      	mov	r1, r9
   d543c:	e7ee      	b.n	d541c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d543e:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5440:	2210      	movs	r2, #16
   d5442:	a801      	add	r0, sp, #4
   d5444:	f000 f859 	bl	d54fa <memset>
                    a.v = 6;
   d5448:	2306      	movs	r3, #6
   d544a:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d544e:	ad01      	add	r5, sp, #4
   d5450:	f104 0308 	add.w	r3, r4, #8
   d5454:	3418      	adds	r4, #24
   d5456:	6818      	ldr	r0, [r3, #0]
   d5458:	6859      	ldr	r1, [r3, #4]
   d545a:	462a      	mov	r2, r5
   d545c:	c203      	stmia	r2!, {r0, r1}
   d545e:	3308      	adds	r3, #8
   d5460:	42a3      	cmp	r3, r4
   d5462:	4615      	mov	r5, r2
   d5464:	d1f7      	bne.n	d5456 <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d5466:	a901      	add	r1, sp, #4
   d5468:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d546a:	ad07      	add	r5, sp, #28
   d546c:	f7ff fdee 	bl	d504c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5470:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5472:	1d3c      	adds	r4, r7, #4
   d5474:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5476:	682b      	ldr	r3, [r5, #0]
   d5478:	7023      	strb	r3, [r4, #0]
   d547a:	e7de      	b.n	d543a <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d547c:	9800      	ldr	r0, [sp, #0]
   d547e:	f7fe fe7b 	bl	d4178 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5482:	4638      	mov	r0, r7
   d5484:	b015      	add	sp, #84	; 0x54
   d5486:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d548c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d548c:	4b02      	ldr	r3, [pc, #8]	; (d5498 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d548e:	4a03      	ldr	r2, [pc, #12]	; (d549c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5490:	601a      	str	r2, [r3, #0]
   d5492:	2200      	movs	r2, #0
   d5494:	605a      	str	r2, [r3, #4]

} // spark
   d5496:	4770      	bx	lr
   d5498:	2003e748 	.word	0x2003e748
   d549c:	000d5804 	.word	0x000d5804

000d54a0 <_ZdlPvj>:
   d54a0:	f7fe bdf9 	b.w	d4096 <_ZdlPv>

000d54a4 <_ZSt25__throw_bad_function_callv>:
   d54a4:	b508      	push	{r3, lr}
   d54a6:	f7fe fffb 	bl	d44a0 <abort>

000d54aa <atexit>:
   d54aa:	2300      	movs	r3, #0
   d54ac:	4601      	mov	r1, r0
   d54ae:	461a      	mov	r2, r3
   d54b0:	4618      	mov	r0, r3
   d54b2:	f000 b875 	b.w	d55a0 <__register_exitproc>

000d54b6 <ldiv>:
   d54b6:	2900      	cmp	r1, #0
   d54b8:	b510      	push	{r4, lr}
   d54ba:	fb91 f4f2 	sdiv	r4, r1, r2
   d54be:	fb02 1314 	mls	r3, r2, r4, r1
   d54c2:	db06      	blt.n	d54d2 <ldiv+0x1c>
   d54c4:	2b00      	cmp	r3, #0
   d54c6:	da01      	bge.n	d54cc <ldiv+0x16>
   d54c8:	3401      	adds	r4, #1
   d54ca:	1a9b      	subs	r3, r3, r2
   d54cc:	e9c0 4300 	strd	r4, r3, [r0]
   d54d0:	bd10      	pop	{r4, pc}
   d54d2:	2b00      	cmp	r3, #0
   d54d4:	bfc4      	itt	gt
   d54d6:	f104 34ff 	addgt.w	r4, r4, #4294967295
   d54da:	189b      	addgt	r3, r3, r2
   d54dc:	e7f6      	b.n	d54cc <ldiv+0x16>

000d54de <memcpy>:
   d54de:	440a      	add	r2, r1
   d54e0:	4291      	cmp	r1, r2
   d54e2:	f100 33ff 	add.w	r3, r0, #4294967295
   d54e6:	d100      	bne.n	d54ea <memcpy+0xc>
   d54e8:	4770      	bx	lr
   d54ea:	b510      	push	{r4, lr}
   d54ec:	f811 4b01 	ldrb.w	r4, [r1], #1
   d54f0:	f803 4f01 	strb.w	r4, [r3, #1]!
   d54f4:	4291      	cmp	r1, r2
   d54f6:	d1f9      	bne.n	d54ec <memcpy+0xe>
   d54f8:	bd10      	pop	{r4, pc}

000d54fa <memset>:
   d54fa:	4402      	add	r2, r0
   d54fc:	4603      	mov	r3, r0
   d54fe:	4293      	cmp	r3, r2
   d5500:	d100      	bne.n	d5504 <memset+0xa>
   d5502:	4770      	bx	lr
   d5504:	f803 1b01 	strb.w	r1, [r3], #1
   d5508:	e7f9      	b.n	d54fe <memset+0x4>
	...

000d550c <srand>:
   d550c:	b538      	push	{r3, r4, r5, lr}
   d550e:	4b0d      	ldr	r3, [pc, #52]	; (d5544 <srand+0x38>)
   d5510:	681d      	ldr	r5, [r3, #0]
   d5512:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d5514:	4604      	mov	r4, r0
   d5516:	b97b      	cbnz	r3, d5538 <srand+0x2c>
   d5518:	2018      	movs	r0, #24
   d551a:	f7fe ffa1 	bl	d4460 <malloc>
   d551e:	4a0a      	ldr	r2, [pc, #40]	; (d5548 <srand+0x3c>)
   d5520:	4b0a      	ldr	r3, [pc, #40]	; (d554c <srand+0x40>)
   d5522:	63a8      	str	r0, [r5, #56]	; 0x38
   d5524:	e9c0 2300 	strd	r2, r3, [r0]
   d5528:	4b09      	ldr	r3, [pc, #36]	; (d5550 <srand+0x44>)
   d552a:	6083      	str	r3, [r0, #8]
   d552c:	230b      	movs	r3, #11
   d552e:	8183      	strh	r3, [r0, #12]
   d5530:	2201      	movs	r2, #1
   d5532:	2300      	movs	r3, #0
   d5534:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d5538:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d553a:	2200      	movs	r2, #0
   d553c:	611c      	str	r4, [r3, #16]
   d553e:	615a      	str	r2, [r3, #20]
   d5540:	bd38      	pop	{r3, r4, r5, pc}
   d5542:	bf00      	nop
   d5544:	2003e560 	.word	0x2003e560
   d5548:	abcd330e 	.word	0xabcd330e
   d554c:	e66d1234 	.word	0xe66d1234
   d5550:	0005deec 	.word	0x0005deec

000d5554 <strdup>:
   d5554:	4b02      	ldr	r3, [pc, #8]	; (d5560 <strdup+0xc>)
   d5556:	4601      	mov	r1, r0
   d5558:	6818      	ldr	r0, [r3, #0]
   d555a:	f000 b803 	b.w	d5564 <_strdup_r>
   d555e:	bf00      	nop
   d5560:	2003e560 	.word	0x2003e560

000d5564 <_strdup_r>:
   d5564:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5566:	4604      	mov	r4, r0
   d5568:	4608      	mov	r0, r1
   d556a:	460d      	mov	r5, r1
   d556c:	f000 f80f 	bl	d558e <strlen>
   d5570:	1c42      	adds	r2, r0, #1
   d5572:	4611      	mov	r1, r2
   d5574:	4620      	mov	r0, r4
   d5576:	9201      	str	r2, [sp, #4]
   d5578:	f7fe ff9a 	bl	d44b0 <_malloc_r>
   d557c:	4604      	mov	r4, r0
   d557e:	b118      	cbz	r0, d5588 <_strdup_r+0x24>
   d5580:	9a01      	ldr	r2, [sp, #4]
   d5582:	4629      	mov	r1, r5
   d5584:	f7ff ffab 	bl	d54de <memcpy>
   d5588:	4620      	mov	r0, r4
   d558a:	b003      	add	sp, #12
   d558c:	bd30      	pop	{r4, r5, pc}

000d558e <strlen>:
   d558e:	4603      	mov	r3, r0
   d5590:	f813 2b01 	ldrb.w	r2, [r3], #1
   d5594:	2a00      	cmp	r2, #0
   d5596:	d1fb      	bne.n	d5590 <strlen+0x2>
   d5598:	1a18      	subs	r0, r3, r0
   d559a:	3801      	subs	r0, #1
   d559c:	4770      	bx	lr
	...

000d55a0 <__register_exitproc>:
   d55a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d55a4:	f8df 80b8 	ldr.w	r8, [pc, #184]	; d5660 <__register_exitproc+0xc0>
   d55a8:	4606      	mov	r6, r0
   d55aa:	f8d8 0000 	ldr.w	r0, [r8]
   d55ae:	461f      	mov	r7, r3
   d55b0:	460d      	mov	r5, r1
   d55b2:	4691      	mov	r9, r2
   d55b4:	f000 f856 	bl	d5664 <__retarget_lock_acquire_recursive>
   d55b8:	4b25      	ldr	r3, [pc, #148]	; (d5650 <__register_exitproc+0xb0>)
   d55ba:	681c      	ldr	r4, [r3, #0]
   d55bc:	b934      	cbnz	r4, d55cc <__register_exitproc+0x2c>
   d55be:	4c25      	ldr	r4, [pc, #148]	; (d5654 <__register_exitproc+0xb4>)
   d55c0:	601c      	str	r4, [r3, #0]
   d55c2:	4b25      	ldr	r3, [pc, #148]	; (d5658 <__register_exitproc+0xb8>)
   d55c4:	b113      	cbz	r3, d55cc <__register_exitproc+0x2c>
   d55c6:	681b      	ldr	r3, [r3, #0]
   d55c8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   d55cc:	6863      	ldr	r3, [r4, #4]
   d55ce:	2b1f      	cmp	r3, #31
   d55d0:	dd07      	ble.n	d55e2 <__register_exitproc+0x42>
   d55d2:	f8d8 0000 	ldr.w	r0, [r8]
   d55d6:	f000 f847 	bl	d5668 <__retarget_lock_release_recursive>
   d55da:	f04f 30ff 	mov.w	r0, #4294967295
   d55de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d55e2:	b34e      	cbz	r6, d5638 <__register_exitproc+0x98>
   d55e4:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   d55e8:	b988      	cbnz	r0, d560e <__register_exitproc+0x6e>
   d55ea:	4b1c      	ldr	r3, [pc, #112]	; (d565c <__register_exitproc+0xbc>)
   d55ec:	b923      	cbnz	r3, d55f8 <__register_exitproc+0x58>
   d55ee:	f8d8 0000 	ldr.w	r0, [r8]
   d55f2:	f000 f838 	bl	d5666 <__retarget_lock_release>
   d55f6:	e7f0      	b.n	d55da <__register_exitproc+0x3a>
   d55f8:	f44f 7084 	mov.w	r0, #264	; 0x108
   d55fc:	f7fe ff30 	bl	d4460 <malloc>
   d5600:	2800      	cmp	r0, #0
   d5602:	d0f4      	beq.n	d55ee <__register_exitproc+0x4e>
   d5604:	2300      	movs	r3, #0
   d5606:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   d560a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   d560e:	6863      	ldr	r3, [r4, #4]
   d5610:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   d5614:	2201      	movs	r2, #1
   d5616:	409a      	lsls	r2, r3
   d5618:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   d561c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   d5620:	4313      	orrs	r3, r2
   d5622:	2e02      	cmp	r6, #2
   d5624:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   d5628:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   d562c:	bf02      	ittt	eq
   d562e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   d5632:	431a      	orreq	r2, r3
   d5634:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
   d5638:	6863      	ldr	r3, [r4, #4]
   d563a:	f8d8 0000 	ldr.w	r0, [r8]
   d563e:	1c5a      	adds	r2, r3, #1
   d5640:	3302      	adds	r3, #2
   d5642:	6062      	str	r2, [r4, #4]
   d5644:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   d5648:	f000 f80e 	bl	d5668 <__retarget_lock_release_recursive>
   d564c:	2000      	movs	r0, #0
   d564e:	e7c6      	b.n	d55de <__register_exitproc+0x3e>
   d5650:	2003e7e0 	.word	0x2003e7e0
   d5654:	2003e754 	.word	0x2003e754
   d5658:	00000000 	.word	0x00000000
   d565c:	000d4461 	.word	0x000d4461
   d5660:	2003e5c4 	.word	0x2003e5c4

000d5664 <__retarget_lock_acquire_recursive>:
   d5664:	4770      	bx	lr

000d5666 <__retarget_lock_release>:
   d5666:	4770      	bx	lr

000d5668 <__retarget_lock_release_recursive>:
   d5668:	4770      	bx	lr

000d566a <link_code_end>:
	...

000d566c <dynalib_user>:
   d566c:	401d 000d 4059 000d 4081 000d 4085 000d     .@..Y@...@...@..
   d567c:	0000 0000 3538 332e 3532 0036 207b 6822     ....85.3256.{ "h
   d568c:	6165 7472 6152 6574 3a22 2220 7325 2c22     eartRate": "%s",
   d569c:	2220 7073 326f 3a22 2220 7325 2c22 2220      "spo2": "%s", "
   d56ac:	6974 656d 7453 6d61 2270 203a 2522 2273     timeStamp": "%s"
   d56bc:	7d20 5300 6e65 6f73 4472 7461 0061 7550      }.SensorData.Pu
   d56cc:	6c62 7369 6568 0064                         blished.

000d56d4 <_ZTVN5spark13EthernetClassE>:
	...
   d56dc:	452f 000d 4525 000d 451b 000d 4511 000d     /E..%E...E...E..
   d56ec:	4505 000d 44f9 000d 5381 000d 5389 000d     .E...D...S...S..
   d56fc:	44ed 000d 44e5 000d 44db 000d 44d1 000d     .D...D...D...D..
   d570c:	53b9 000d 7061 0070 5925 252d 2d6d 6425     .S..app.%Y-%m-%d
   d571c:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   d572c:	6d69 0065                                   ime.

000d5730 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d5738:	4a85 000d 4a8b 000d 4ac9 000d 4a99 000d     .J...J...J...J..
   d5748:	4a87 000d                                   .J..

000d574c <_ZTV9IPAddress>:
	...
   d5754:	4fcd 000d 4fbd 000d 4fbf 000d               .O...O...O..

000d5760 <_ZTV9USBSerial>:
	...
   d5768:	50a5 000d 510d 000d 50e3 000d 47a9 000d     .P...Q...P...G..
   d5778:	50d5 000d 50a7 000d 50b7 000d 5107 000d     .P...P...P...Q..
   d5788:	50c7 000d 509f 000d                         .P...P..

000d5790 <_ZTV11USARTSerial>:
	...
   d5798:	51a9 000d 5217 000d 51ef 000d 47a9 000d     .Q...R...Q...G..
   d57a8:	51bf 000d 51db 000d 51cd 000d 51e9 000d     .Q...Q...Q...Q..
   d57b8:	51ab 000d 51b1 000d                         .Q...Q..

000d57c0 <_ZTVN5spark9WiFiClassE>:
	...
   d57c8:	5323 000d 5319 000d 530f 000d 52c5 000d     #S...S...S...R..
   d57d8:	5303 000d 52f7 000d 5381 000d 5389 000d     .S...R...S...S..
   d57e8:	52eb 000d 52e3 000d 52d9 000d 52cf 000d     .R...R...R...R..
   d57f8:	53b9 000d                                   .S..

000d57fc <_ZTVN5spark12NetworkClassE>:
	...
   d5804:	5341 000d 534b 000d 5355 000d 535f 000d     AS..KS..US.._S..
   d5814:	5369 000d 5375 000d 5381 000d 5389 000d     iS..uS...S...S..
   d5824:	5391 000d 539d 000d 53a5 000d 53af 000d     .S...S...S...S..
   d5834:	53b9 000d                                   .S..

000d5838 <link_const_variable_data_end>:
   d5838:	000d416d 	.word	0x000d416d
   d583c:	000d4539 	.word	0x000d4539
   d5840:	000d454d 	.word	0x000d454d
   d5844:	000d4799 	.word	0x000d4799
   d5848:	000d4871 	.word	0x000d4871
   d584c:	000d48f5 	.word	0x000d48f5
   d5850:	000d4941 	.word	0x000d4941
   d5854:	000d532d 	.word	0x000d532d
   d5858:	000d548d 	.word	0x000d548d

000d585c <link_constructors_end>:
   d585c:	00000000 	.word	0x00000000
